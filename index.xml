<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>银之介</title><link>https://www.jiangdaoli.cf/</link><description>Recent content on 银之介</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 14 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.jiangdaoli.cf/index.xml" rel="self" type="application/rss+xml"/><item><title>quest2入门使用汇总</title><link>https://www.jiangdaoli.cf/p/quest2/</link><pubDate>Sat, 14 May 2022 00:00:00 +0000</pubDate><guid>https://www.jiangdaoli.cf/p/quest2/</guid><description>&lt;h1 id="购买配件">购买配件&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>配件&lt;/th>
&lt;th>用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>mq2 pro 续航版&lt;/td>
&lt;td>提升头戴舒适度，有必要买，可以按照自己需要选择没有续航的&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>磁吸镜片&lt;/td>
&lt;td>近视适用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>皮质眼罩鼻垫&lt;/td>
&lt;td>防汗防漏光&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="网络">网络&lt;/h1>
&lt;p>国内quest2用户应该已经具备上外网的条件，不再赘述。&lt;/p>
&lt;p>quest2需要&lt;strong>无线网络链接&lt;/strong>，解决网络问题一般有以下方式：&lt;/p>
&lt;ol>
&lt;li>刷路由器，这个方式比较直接，我认为日常不适用的场景较多，所以我没用。&lt;/li>
&lt;li>电脑热点，下文介绍。&lt;/li>
&lt;/ol>
&lt;p>&lt;em>如果你有&lt;strong>网线&lt;/strong>连接电脑，可以试试clash TUN模式开热点。&lt;/em>&lt;/p>
&lt;p>&lt;strong>下面介绍通用的sstap方法。&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>打开科学上网，允许局域网连接。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/solikethis/SSTap-backup" target="_blank" rel="noopener"
>下载sstap&lt;/a>，我使用的1.1.0.1版本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>配置并打开sstap
&lt;figure
class="gallery-image"
style="
flex-grow: 84;
flex-basis: 202px"
>
&lt;a href="https://www.jiangdaoli.cf/p/quest2/1.jpg" data-size="762x904">
&lt;img src="https://www.jiangdaoli.cf/p/quest2/1.jpg"
width="762"
height="904"
srcset="https://www.jiangdaoli.cf/p/quest2/1_hu05598ef3f23291f76f2030fc640c9d6f_138617_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/quest2/1_hu05598ef3f23291f76f2030fc640c9d6f_138617_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>打开热点，并打开 网络和Internet设置 -&amp;gt; 更改适配器选项 -&amp;gt; 右键 SSTAP 1 -&amp;gt; 属性 -&amp;gt; 共享 ，然后就可以连热点了。
&lt;figure
class="gallery-image"
style="
flex-grow: 147;
flex-basis: 354px"
>
&lt;a href="https://www.jiangdaoli.cf/p/quest2/2.jpg" data-size="1314x890">
&lt;img src="https://www.jiangdaoli.cf/p/quest2/2.jpg"
width="1314"
height="890"
srcset="https://www.jiangdaoli.cf/p/quest2/2_hu286664c3a18791c6ce86785b99d75d5c_206462_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/quest2/2_hu286664c3a18791c6ce86785b99d75d5c_206462_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="注册接受邀请领取30美金奖励">注册，接受邀请领取30美金奖励&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>使用outlook、gmail等邮箱和原生ip至少提前1天注册facebook账号。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接受邀请比较麻烦，以下方式成本过高，仅作为了解，有需要直接去找别人代操作受邀！！&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;em>注意：接受邀请也是高风险的操作，由于变换ip和账号资料不完善，依然有可能封号，所以放弃30美金也是省心的选择，想玩破解版的玩家可以花1块钱去&lt;a class="link" href="gizvr.cn" >极客VR&lt;/a>注册。&lt;/em>&lt;/p>
&lt;p>我试了多地vps，原生ip也全都出现Ineligible Country​，原因是服务器厂商用的数据中心ip（type是hosting），会被识别屏蔽。所以要用住宅代理（type是isp），由于成本高，服务器厂商几乎不用，只有代理厂商的住宅代理和部分静态住宅代理才可以接受邀请。我搜索了多家代理厂商，价格便宜的只有 911s5 和 iproyal&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>代理厂商&lt;/th>
&lt;th>特点&lt;/th>
&lt;th>价格&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>911s5&lt;/td>
&lt;td>自有软件，pc端指定软件代理，使用简单，ip质量差，部分可以邀请使用&lt;/td>
&lt;td>最低28美元/150ip，每ip可用24小时&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iproyal&lt;/td>
&lt;td>直接给地址端口和用户，所以在国内必须自己搭建国外节点并且&lt;strong>中转&lt;/strong>才能使用，但是ip质量较好、使用舒适。必须实名，不实名很多网站不能访问（包括facebook），而且实名较为耗时&lt;/td>
&lt;td>3美元/GB ，paypal入金最低20美元&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;details class="spoiler " id="spoiler-0">
&lt;summary>“以xui为例的中转配置文件”&lt;/summary>
&lt;p>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">// 直接修改&amp;#34;servers&amp;#34;即可使用
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;api&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;services&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;HandlerService&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;LoggerService&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;StatsService&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;tag&amp;#34;: &amp;#34;api&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;inbounds&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;listen&amp;#34;: &amp;#34;127.0.0.1&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;port&amp;#34;: 62789,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;protocol&amp;#34;: &amp;#34;dokodemo-door&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;settings&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;address&amp;#34;: &amp;#34;127.0.0.1&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;tag&amp;#34;: &amp;#34;api&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;outbounds&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;protocol&amp;#34;: &amp;#34;Socks&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;settings&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;servers&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;address&amp;#34;: &amp;#34;proxy.iproyal.com&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;port&amp;#34;: 12325,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;users&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;user&amp;#34;: &amp;#34;user&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;pass&amp;#34;: &amp;#34;pass&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;level&amp;#34;: 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;tag&amp;#34;: &amp;#34;ip2&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;protocol&amp;#34;: &amp;#34;freedom&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;settings&amp;#34;: {}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;protocol&amp;#34;: &amp;#34;blackhole&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;settings&amp;#34;: {},
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;tag&amp;#34;: &amp;#34;blocked&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;policy&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;system&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;statsInboundDownlink&amp;#34;: true,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;statsInboundUplink&amp;#34;: true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;routing&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;rules&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;inboundTag&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;inbound-12325&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;outboundTag&amp;#34;: &amp;#34;ip2&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;field&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;inboundTag&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;api&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;outboundTag&amp;#34;: &amp;#34;api&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;field&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;ip&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;geoip:private&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;outboundTag&amp;#34;: &amp;#34;blocked&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;field&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;outboundTag&amp;#34;: &amp;#34;blocked&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;protocol&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;bittorrent&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;field&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;stats&amp;#34;: {}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 配置文件详解
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;api&amp;#34;: { // api: 提供了一些 API 接口供远程调用
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;services&amp;#34;: [ // services: [string] 开启的 API 列表
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;HandlerService&amp;#34;, // HandlerService:添加、删除一个入站、出站代理在一个入站代理中添加、删除一个用户
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;LoggerService&amp;#34;, // 内置Logger
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;StatsService&amp;#34; // 内置的数据统计服务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;tag&amp;#34;: &amp;#34;api&amp;#34; // tag: string api中的tag是**出站**代理标识
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;inbounds&amp;#34;: [ // 入站 -&amp;gt; 路由 不用修改
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;listen&amp;#34;: &amp;#34;127.0.0.1&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;port&amp;#34;: 62789,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;protocol&amp;#34;: &amp;#34;dokodemo-door&amp;#34;, // 任意门,可以监听一个本地端口
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;settings&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;address&amp;#34;: &amp;#34;127.0.0.1&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;tag&amp;#34;: &amp;#34;api&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;outbounds&amp;#34;: [ // 出站
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">##################此处开始添加##################
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> { // 添加出站节点
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;protocol&amp;#34;: &amp;#34;Socks&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;settings&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;servers&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;address&amp;#34;: &amp;#34;127.0.0.1&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;port&amp;#34;: 12325,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;users&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;user&amp;#34;: &amp;#34;test user&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;pass&amp;#34;: &amp;#34;test pass&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;level&amp;#34;: 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;tag&amp;#34;: &amp;#34;ip2&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#################此处结束添加###################
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;protocol&amp;#34;: &amp;#34;freedom&amp;#34;, // 向任意网络发送（正常的）TCP 或 UDP 数据
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;settings&amp;#34;: {}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;protocol&amp;#34;: &amp;#34;blackhole&amp;#34;, // 禁止访问
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;settings&amp;#34;: {},
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;tag&amp;#34;: &amp;#34;blocked&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;policy&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;system&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;statsInboundDownlink&amp;#34;: true,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;statsInboundUplink&amp;#34;: true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;routing&amp;#34;: { // 路由 -&amp;gt; 出站
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;rules&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">##################此处开始添加##################
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> { // 添加路由，xui的&amp;#34;inboundTag&amp;#34;规则是&amp;#34;inbound-port&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;inboundTag&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;inbound-12325&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;outboundTag&amp;#34;: &amp;#34;ip2&amp;#34;, // -&amp;gt; &amp;#34;outbounds&amp;#34;: {&amp;#34;tag&amp;#34;: &amp;#34;ip2&amp;#34;}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;field&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#################此处结束添加###################
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;inboundTag&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;api&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;outboundTag&amp;#34;: &amp;#34;api&amp;#34;, // -&amp;gt; &amp;#34;api&amp;#34;: {&amp;#34;tag&amp;#34;: &amp;#34;api&amp;#34;}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;field&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;ip&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;geoip:private&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;outboundTag&amp;#34;: &amp;#34;blocked&amp;#34;, // -&amp;gt; 禁止访问
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;field&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;outboundTag&amp;#34;: &amp;#34;blocked&amp;#34;, // -&amp;gt; 禁止访问
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;protocol&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;bittorrent&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;field&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;stats&amp;#34;: {}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/details>
&lt;h1 id="激活">激活&lt;/h1>
&lt;p>下载Oculus App，quest2联网后配对，配对成功就说明Quest2激活成功了。&lt;/p>
&lt;h1 id="安装第三方应用">安装第三方应用&lt;/h1>
&lt;ol>
&lt;li>首先需要开启开发者模式。在&lt;a class="link" href="https://developer.oculus.com/manage/organizations/create/" target="_blank" rel="noopener"
>Oculus开发者网站&lt;/a>创建一个开发者组织，再去Oculus APP菜单 -&amp;gt; 设备 -&amp;gt; 开发者模式 -&amp;gt; 打开 。&lt;/li>
&lt;/ol>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 277;
flex-basis: 666px"
>
&lt;a href="https://www.jiangdaoli.cf/p/quest2/3.jpg" data-size="1890x681">
&lt;img src="https://www.jiangdaoli.cf/p/quest2/3.jpg"
width="1890"
height="681"
srcset="https://www.jiangdaoli.cf/p/quest2/3_hu12e14b7c4164af371baa9202565e842d_257944_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/quest2/3_hu12e14b7c4164af371baa9202565e842d_257944_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;ol start="2">
&lt;li>&lt;a class="link" href="https://sidequestvr.com/setup-howto" target="_blank" rel="noopener"
>下载SideQuest&lt;/a>并安装。&lt;/li>
&lt;/ol>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 170;
flex-basis: 410px"
>
&lt;a href="https://www.jiangdaoli.cf/p/quest2/4.jpg" data-size="926x542">
&lt;img src="https://www.jiangdaoli.cf/p/quest2/4.jpg"
width="926"
height="542"
srcset="https://www.jiangdaoli.cf/p/quest2/4_hu17a372bafe153704ca78bb23fa0ab3ca_170969_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/quest2/4_hu17a372bafe153704ca78bb23fa0ab3ca_170969_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;ol start="3">
&lt;li>下载Oculus ADB驱动。右键单击android_winusb.inf选择“安装”。然后用USB线将头显和电脑连接起来，在头显中点击“允许”。&lt;/li>
&lt;/ol>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 245;
flex-basis: 590px"
>
&lt;a href="https://www.jiangdaoli.cf/p/quest2/5.jpg" data-size="1043x424">
&lt;img src="https://www.jiangdaoli.cf/p/quest2/5.jpg"
width="1043"
height="424"
srcset="https://www.jiangdaoli.cf/p/quest2/5_hue7bdfd98572c040d1b975b0887f1a766_100388_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/quest2/5_hue7bdfd98572c040d1b975b0887f1a766_100388_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;ol start="4">
&lt;li>然后就可以安装apk了。&lt;/li>
&lt;/ol>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 398;
flex-basis: 957px"
>
&lt;a href="https://www.jiangdaoli.cf/p/quest2/6.jpg" data-size="706x177">
&lt;img src="https://www.jiangdaoli.cf/p/quest2/6.jpg"
width="706"
height="177"
srcset="https://www.jiangdaoli.cf/p/quest2/6_hu26241288b6e9df49f96a074c68bac755_38841_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/quest2/6_hu26241288b6e9df49f96a074c68bac755_38841_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;ol start="5">
&lt;li>如果apk附带文件夹，就拖入obb文件夹。&lt;/li>
&lt;/ol>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 489;
flex-basis: 1173px"
>
&lt;a href="https://www.jiangdaoli.cf/p/quest2/7.jpg" data-size="675x138">
&lt;img src="https://www.jiangdaoli.cf/p/quest2/7.jpg"
width="675"
height="138"
srcset="https://www.jiangdaoli.cf/p/quest2/7_huf99fb6261387974025db04e2263378d0_38642_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/quest2/7_huf99fb6261387974025db04e2263378d0_38642_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 302;
flex-basis: 726px"
>
&lt;a href="https://www.jiangdaoli.cf/p/quest2/8.jpg" data-size="1278x422">
&lt;img src="https://www.jiangdaoli.cf/p/quest2/8.jpg"
width="1278"
height="422"
srcset="https://www.jiangdaoli.cf/p/quest2/8_hu5e190ebc36a18c706cb7024a413612a7_166580_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/quest2/8_hu5e190ebc36a18c706cb7024a413612a7_166580_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;ol start="6">
&lt;li>进入头显的未知来源就可以使用了。&lt;/li>
&lt;/ol>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 100;
flex-basis: 240px"
>
&lt;a href="https://www.jiangdaoli.cf/p/quest2/9.jpg" data-size="1024x1024">
&lt;img src="https://www.jiangdaoli.cf/p/quest2/9.jpg"
width="1024"
height="1024"
srcset="https://www.jiangdaoli.cf/p/quest2/9_hu9999e3505472b8edceb589735c6b0c21_132513_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/quest2/9_hu9999e3505472b8edceb589735c6b0c21_132513_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h1 id="常见问题">常见问题&lt;/h1>
&lt;ul>
&lt;li>恢复出厂设置&lt;/li>
&lt;/ul>
&lt;p>手机配对后在app菜单 -&amp;gt; 设备 -&amp;gt; 高级设置 -&amp;gt; 恢复出场设置&lt;/p>
&lt;p>登陆Oculus官网 -&amp;gt; 点头像 -&amp;gt; Oculus settings -&amp;gt; Devices DELETE -&amp;gt; DEVICE DATA&lt;/p></description></item><item><title>flutter基础备忘录</title><link>https://www.jiangdaoli.cf/p/flutter/</link><pubDate>Sat, 30 Apr 2022 00:00:00 +0000</pubDate><guid>https://www.jiangdaoli.cf/p/flutter/</guid><description>&lt;h2 id="安装">安装&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>配置 JDK、安装配置Android Studio&lt;/p>
&lt;/li>
&lt;li>
&lt;p>flutter(windows)
&lt;a class="link" href="https://docs.flutter.dev/get-started/install/windows" target="_blank" rel="noopener"
>flutter安装&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">set PUB_HOSTED_URL=&amp;#34;https://mirrors.tuna.tsinghua.edu.cn/dart-pub&amp;#34; #配置国内镜像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set FLUTTER_STORAGE_BASE_URL=&amp;#34;https://mirrors.tuna.tsinghua.edu.cn/flutter&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>安装遇坑&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">//配置build.gradle(project:android)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">allprojects {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> repositories {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> google()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> jcenter()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> maven { url &amp;#34;https://storage.googleapis.com/download.flutter.io&amp;#34; }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="创建-flutter-项目">创建 Flutter 项目&lt;/h2>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 146;
flex-basis: 352px"
>
&lt;a href="https://www.jiangdaoli.cf/p/flutter/1.jpg" data-size="1317x897">
&lt;img src="https://www.jiangdaoli.cf/p/flutter/1.jpg"
width="1317"
height="897"
srcset="https://www.jiangdaoli.cf/p/flutter/1_huff754efb2c95fdbde3860fe3076e21cb_150899_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/flutter/1_huff754efb2c95fdbde3860fe3076e21cb_150899_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 141;
flex-basis: 339px"
>
&lt;a href="https://www.jiangdaoli.cf/p/flutter/2.jpg" data-size="1279x903">
&lt;img src="https://www.jiangdaoli.cf/p/flutter/2.jpg"
width="1279"
height="903"
srcset="https://www.jiangdaoli.cf/p/flutter/2_hucf4eac703c21ad8fecf4d8297c8a4909_91996_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/flutter/2_hucf4eac703c21ad8fecf4d8297c8a4909_91996_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 137;
flex-basis: 330px"
>
&lt;a href="https://www.jiangdaoli.cf/p/flutter/3.jpg" data-size="1234x897">
&lt;img src="https://www.jiangdaoli.cf/p/flutter/3.jpg"
width="1234"
height="897"
srcset="https://www.jiangdaoli.cf/p/flutter/3_huf5771a4378f496e08370a30e6aea2a57_268237_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/flutter/3_huf5771a4378f496e08370a30e6aea2a57_268237_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>&lt;figure
class="gallery-image"
style="
flex-grow: 178;
flex-basis: 427px"
>
&lt;a href="https://www.jiangdaoli.cf/p/flutter/4.jpg" data-size="1738x975">
&lt;img src="https://www.jiangdaoli.cf/p/flutter/4.jpg"
width="1738"
height="975"
srcset="https://www.jiangdaoli.cf/p/flutter/4_hu749a3588d7f75328d4ce8cfeb04f0fea_609718_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/flutter/4_hu749a3588d7f75328d4ce8cfeb04f0fea_609718_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="dart">dart&lt;/h2>
&lt;h3 id="变量">变量&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># 创建一个变量并将其初始化
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var name = &amp;#39;Bob&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 指定类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">String name = &amp;#39;Bob&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 如果对象(name)不局限于单一的类型(String),可以将其指定为 Object（或 dynamic）类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Object name = &amp;#39;Bob&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">? 可空类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">int? a=123; // int? 表示a是一个可空类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">! 类型断言
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">a! // a不为空
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="常量">常量&lt;/h3>
&lt;ul>
&lt;li>final 和 const&lt;/li>
&lt;/ul>
&lt;p>final在被使用到的时候才会进行初始化, 如果只是被定义, 而没有被使用到, 那么这个变量一直没有被初始化 (&amp;lsquo;懒加载&amp;rsquo;); 而const修饰的变量, 一经定义就会在编译期间对其进行初始化&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">final name = &amp;#39;Bob&amp;#39;; // Without a type annotation
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">final String nickname = &amp;#39;Bobby&amp;#39;;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="类型">类型&lt;/h3>
&lt;ul>
&lt;li>内置类型&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">int 整数值
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">double 浮点数字
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">String 字符串
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bool 布尔类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">List 集合类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set 无序集合
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Map 字典型
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://dart.dev/guides/language/language-tour#enumerated-types" target="_blank" rel="noopener"
>enum&lt;/a>　　枚举类型,在switch语句中运行良好&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Set主要的功能就是去除数组重复内容&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">void main(){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> List myList=[&amp;#39;香蕉&amp;#39;,&amp;#39;苹果&amp;#39;,&amp;#39;西瓜&amp;#39;,&amp;#39;香蕉&amp;#39;,&amp;#39;苹果&amp;#39;,&amp;#39;香蕉&amp;#39;,&amp;#39;苹果&amp;#39;];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var s=new Set();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s.addAll(myList);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(s);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(s.toList());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>将 list &lt;a class="link" href="https://dart.dev/codelabs/iterables#mapping" target="_blank" rel="noopener"
>映射&lt;/a>为 widget 数组&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">MyList.map((item) =&amp;gt; SomeWidget(item)).toList();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="函数">函数&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">bool isNoble(int atomicNumber) { # bool:返回类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return _nobleGases[atomicNumber] != null;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>箭头函数 =&amp;gt;&lt;/p>
&lt;p>&lt;code>=&amp;gt; expr&lt;/code> 是 &lt;code>{ return expr; }&lt;/code>的简写&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="运算符">运算符：&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>算术运算符&lt;/p>
&lt;p>&lt;code>+&lt;/code>(加)　　&lt;code>–&lt;/code>(减)　　&lt;code>-&lt;/code>(负)　　&lt;code>*&lt;/code>(乘)　　&lt;code>/&lt;/code>(除)　　&lt;code>~/&lt;/code>(取整)　　&lt;code>%&lt;/code>（取余）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>关系运算符&lt;/p>
&lt;p>&lt;code>==&lt;/code>　　&lt;code>！=&lt;/code>　　&lt;code>&amp;gt;&lt;/code>　　&lt;code>&amp;lt;&lt;/code>　　&lt;code>&amp;gt;=&lt;/code>　　&lt;code>&amp;lt;=&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>逻辑运算符&lt;/p>
&lt;p>&lt;code>!&lt;/code>(取反)　　&lt;code>&amp;amp;&amp;amp;&lt;/code>(与)　　&lt;code>||&lt;/code>(或)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>赋值运算符&lt;/p>
&lt;p>基础赋值运算符　　&lt;code>=&lt;/code>　　&lt;code>??=&lt;/code>(为 null 的变量赋值)&lt;/p>
&lt;p>复合赋值运算符　　&lt;code>+=&lt;/code>　　&lt;code>-=&lt;/code>　　&lt;code>*=&lt;/code>　　&lt;code>/=&lt;/code>　　&lt;code>%=&lt;/code>　　&lt;code>~/=&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其他运算符
&lt;code>()&lt;/code>　　使用一个方法&lt;/p>
&lt;p>&lt;code>[]&lt;/code>　　访问 List&lt;/p>
&lt;p>&lt;code>?[]&lt;/code>　　访问 List,左侧可以为null&lt;/p>
&lt;p>&lt;code>.&lt;/code>　　访问成员&lt;/p>
&lt;p>&lt;code>?.&lt;/code>　　访问成员,左侧可以为null&lt;/p>
&lt;/li>
&lt;li>
&lt;p>if-else的表达式：&lt;/p>
&lt;ul>
&lt;li>condition &lt;code>?&lt;/code> expr1 &lt;code>:&lt;/code> expr2&lt;/li>
&lt;/ul>
&lt;p>如果条件为真，则计算expr1（并返回其值）；否则，计算并返回expr2的值。&lt;/p>
&lt;ul>
&lt;li>expr1 &lt;code>??&lt;/code> expr2&lt;/li>
&lt;/ul>
&lt;p>如果expr1不为 null，则返回其值；否则，计算并返回expr2的值。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="类">类&lt;/h3>
&lt;ul>
&lt;li>抽象类、抽象方法
　抽象类常用于定义接口，抽象类常常会包含抽象方法&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">abstract class Doer {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Define instance variables and methods...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void doSomething(); // Define an abstract method.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class EffectiveDoer extends Doer {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void doSomething() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Provide an implementation, so the method is not abstract here...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="泛型">泛型&lt;/h3>
&lt;p>泛型常用于需要要求类型安全的情况，可以减少代码重复。
&lt;figure
class="gallery-image"
style="
flex-grow: 249;
flex-basis: 599px"
>
&lt;a href="https://www.jiangdaoli.cf/p/flutter/fanxing.jpg" data-size="1122x449">
&lt;img src="https://www.jiangdaoli.cf/p/flutter/fanxing.jpg"
width="1122"
height="449"
srcset="https://www.jiangdaoli.cf/p/flutter/fanxing_hu6d02cad28d2736a6e42659b75fd941e7_62001_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/flutter/fanxing_hu6d02cad28d2736a6e42659b75fd941e7_62001_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;p>@override 注解来表示你重写了一个成员
&lt;figure
class="gallery-image"
style="
flex-grow: 177;
flex-basis: 427px"
>
&lt;a href="https://www.jiangdaoli.cf/p/flutter/override.jpg" data-size="1173x659">
&lt;img src="https://www.jiangdaoli.cf/p/flutter/override.jpg"
width="1173"
height="659"
srcset="https://www.jiangdaoli.cf/p/flutter/override_huf3ae0c28a53250be072483b49c760168_125842_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/flutter/override_huf3ae0c28a53250be072483b49c760168_125842_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
>
&lt;/a>
&lt;/figure>&lt;/p>
&lt;h2 id="flutter">flutter&lt;/h2>
&lt;p>double width = MediaQuery.of(context).size.width; 屏幕宽度
double height = MediaQuery.of(context).size.height; 屏幕高度&lt;/p></description></item><item><title>root手机和自动化</title><link>https://www.jiangdaoli.cf/p/phone-root/</link><pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.jiangdaoli.cf/p/phone-root/</guid><description>&lt;h1 id="root不同手机不同操作刷机有变砖风险">root（不同手机不同操作，刷机有变砖风险！）&lt;/h1>
&lt;p>以前手机都是用虚拟机 VMOS Pro，应用权限是有了，但现手机不能自动开屏幕锁自动执行任务，于是我就找了旧手机root，以荣耀8青春版为例。
大概分为以下几个步骤：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>解bl锁
各品牌手机解锁有所不同，大部分厂商官方给解锁码，我仅简述我本次华为旧机解锁，我用的是github的potatoNV短接解锁，如果其中没有你的手机，直接淘宝不要浪费时间。作者在youtube有教程，照做就好了，视频简介的USB com 1.0连接教程也要看，他的点击DriverSetup操作很快，不要漏了，&lt;a class="link" href="http://www.shuajibang.net/news/detail/39124/" target="_blank" rel="noopener"
>短接点可以参考这里&lt;/a>。获得解锁码搜华为工具箱即可解锁。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>刷入 TWRP recovery
建议不要刷机软件一键刷机，都是垃圾系统，就用官方系统刷适合你手机的TWRP，我在&lt;a class="link" href="https://m.huaweirom.com/rom/" target="_blank" rel="noopener"
>这个网站&lt;/a>找到华为的TWRP，我当时看到他的网站干净无广告就刷了，是可以用的，此网站应该靠谱。Fastboot模式运行run脚本就行了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>root
安卓7及以上使用magisk，有大神建议用20.4版本，github下载zip放进手机储存卡，进入TWRP recovery安装，开机后酷安装magisk app即可。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="macrodroid">MacroDroid&lt;/h1>
&lt;h2 id="基础">基础&lt;/h2>
&lt;p>&lt;strong>设置：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>防止系统清理：进入系统最近任务界面，点击应用旁边的小锁，锁定应用不被系统清理&lt;/li>
&lt;li>忽略电池优化：依次打开系统设置，应用和通知，应用管理，设置，特殊访问权限，忽略电池优化（直接在设置搜索栏搜索电池也能找到），允许忽略应用&lt;/li>
&lt;li>设置启动管理：依次打开系统设置，电池，启动管理，关闭应用自动管理后弹出的对话框中选中：允许自启动，允许关联启动，允许后台活动&lt;/li>
&lt;li>权限全部打开&lt;/li>
&lt;/ul>
&lt;h2 id="shell">shell&lt;/h2>
&lt;p>shell命令很方便定义操作（点击的坐标可以在手机开发者选项中打开指针位置）。&lt;a class="link" href="https://commandnotfound.cn/android/4/439/%E5%B8%B8%E7%94%A8-adb-shell-%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8" target="_blank" rel="noopener"
>shell命令摘录网站&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">#按键事件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">input text &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">string&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> #输入文本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">input keyevent 20 #向下
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">input keyevent 4 #返回
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">input keyevent 3 #Home
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">input keyevent 6 #挂机
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">input keyevent 84 #搜索
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">input keyevent 26 #电源，息屏
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">input keyevent 24 #音量+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">input keyevent 25 #音量-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#模拟点击
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">input tap 100 100
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#滑动
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">input swipe x1 y1 x2 y2 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">input swipe 100 100 400 100 300 #左往右
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">input swipe 400 100 100 100 300 #右往左
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">input swipe 100 100 100 400 300 #上往下
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">input swipe 100 400 100 100 300 #下往上
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">input swipe 100 100 400 400 300 #上往下斜
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">input swipe 400 400 100 100 300 #下往上斜
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#长按
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">input swipe 100 100 100 100 1000 //在 100 100 位置长按 1000毫秒
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>freenom自动续期</title><link>https://www.jiangdaoli.cf/p/freenom/</link><pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.jiangdaoli.cf/p/freenom/</guid><description>&lt;h1 id="freenom自动续期">freenom自动续期&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>Fork &lt;a class="link" href="https://github.com/luolongfei/freenom" target="_blank" rel="noopener"
>luolongfei大佬的freenom库&lt;/a>，再添加以下workflow：
&lt;details class="spoiler " id="spoiler-0">
&lt;summary>“点击展开完整代码”&lt;/summary>
&lt;p>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># 1、Fork 本仓库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 2、在你 Fork 的本仓库下的 Settings &amp;gt; Secrets 画面追加以下几个 secret 变量：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># FREENOM_USERNAME、FREENOM_PASSWORD、MULTIPLE_ACCOUNTS、MAIL_USERNAME、MAIL_PASSWORD、TO、MAIL_ENABLE、TELEGRAM_CHAT_ID、
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># TELEGRAM_BOT_TOKEN、TELEGRAM_BOT_ENABLE、NOTICE_FREQ
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># （注：此处列出了所有可用变量，你只用追加你需要用到的变量，变量的具体含义请参考本项目的 .env 文件中的说明，一般情况下，.env 文件中的某些
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 项存在默认值，如果默认值满足你的需求则可不追加到 Secrets，它们会保持默认）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 下面定时任务中的时间是世界时间，每天 10:00（本示例已改为2:00） 执行，由于创建虚拟环境会消耗时间，故任务会延迟 30 秒左右执行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># @Author of yml configuration file: RouRouX &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">https:&lt;/span>&lt;span class="err">//&lt;/span>&lt;span class="na">github&lt;/span>&lt;span class="err">.&lt;/span>&lt;span class="na">com&lt;/span>&lt;span class="err">/&lt;/span>&lt;span class="na">RouRouX&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="err">&amp;amp;&lt;/span> mybsdc &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">mybsdc&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="na">gmail&lt;/span>&lt;span class="err">.&lt;/span>&lt;span class="na">com&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">###### end 说明 ######
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">name: Run it on action
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">on:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> branches:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> schedule:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - cron: 00 02 * * *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> workflow_dispatch:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">jobs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run-it:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> runs-on: ubuntu-18.04
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name: Run it on action
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> steps:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Checkout master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: actions/checkout@v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Setup PHP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: shivammathur/setup-php@v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> php-version: &amp;#39;7.2&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Setting
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run: |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo &amp;#39;Renew freenom domain name automatically.&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo &amp;#39;@Author of yml configuration file: RouRouX &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">https:&lt;/span>&lt;span class="err">//&lt;/span>&lt;span class="na">github&lt;/span>&lt;span class="err">.&lt;/span>&lt;span class="na">com&lt;/span>&lt;span class="err">/&lt;/span>&lt;span class="na">RouRouX&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="err">&amp;amp;&lt;/span> mybsdc &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">mybsdc&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="na">gmail&lt;/span>&lt;span class="err">.&lt;/span>&lt;span class="na">com&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo &amp;#39;@Url: https://github.com/luolongfei/freenom&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cp .env.example .env
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [[ (&amp;#39;${{ secrets.FREENOM_USERNAME }}&amp;#39; == &amp;#39;&amp;#39; || &amp;#39;${{ secrets.FREENOM_PASSWORD }}&amp;#39; == &amp;#39;&amp;#39;) &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> &amp;#39;${{ secrets.MULTIPLE_ACCOUNTS }}&amp;#39; == &amp;#39;&amp;#39; ]]; then echo &amp;#39;你在 Github 的当前项目的 Settings &amp;gt; Secrets 画面没有设置任何与账户信息相关的 secret 值，无法正常运行，请添加新的 secret 值，设置 FREENOM_USERNAME 与 FREENOM_PASSWORD，或者设置 MULTIPLE_ACCOUNTS，以及 .env 文件中其它必要项，各项的具体含义与格式参考本项目 .env 文件中的说明。&amp;#39;; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.FREENOM_USERNAME }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^FREENOM_USERNAME=.*$/FREENOM_USERNAME=&amp;#39;${{ secrets.FREENOM_USERNAME }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.FREENOM_PASSWORD }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^FREENOM_PASSWORD=.*$/FREENOM_PASSWORD=&amp;#39;${{ secrets.FREENOM_PASSWORD }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.MULTIPLE_ACCOUNTS }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^MULTIPLE_ACCOUNTS=.*$/MULTIPLE_ACCOUNTS=&amp;#39;${{ secrets.MULTIPLE_ACCOUNTS }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.MAIL_USERNAME }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^MAIL_USERNAME=.*$/MAIL_USERNAME=&amp;#39;${{ secrets.MAIL_USERNAME }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.MAIL_PASSWORD }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^MAIL_PASSWORD=.*$/MAIL_PASSWORD=&amp;#39;${{ secrets.MAIL_PASSWORD }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.TO }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^TO=.*$/TO=&amp;#39;${{ secrets.TO }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.MAIL_ENABLE }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^MAIL_ENABLE=.*$/MAIL_ENABLE=&amp;#39;${{ secrets.MAIL_ENABLE }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.TELEGRAM_CHAT_ID }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^TELEGRAM_CHAT_ID=.*$/TELEGRAM_CHAT_ID=&amp;#39;${{ secrets.TELEGRAM_CHAT_ID }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.TELEGRAM_BOT_TOKEN }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^TELEGRAM_BOT_TOKEN=.*$/TELEGRAM_BOT_TOKEN=&amp;#39;${{ secrets.TELEGRAM_BOT_TOKEN }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.TELEGRAM_BOT_ENABLE }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^TELEGRAM_BOT_ENABLE=.*$/TELEGRAM_BOT_ENABLE=&amp;#39;${{ secrets.TELEGRAM_BOT_ENABLE }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.NOTICE_FREQ }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^NOTICE_FREQ=.*$/NOTICE_FREQ=&amp;#39;${{ secrets.NOTICE_FREQ }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sed -i &amp;#34;s/^ON_GITHUB_ACTIONS=.*$/ON_GITHUB_ACTIONS=true/&amp;#34; .env
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Run
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run: |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> php run
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 以下为保活所需step
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: curl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> id: enable_workflow
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> env:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> REST_TOKEN: ${{ secrets.REST_TOKEN }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> API_ADDRESS: ${{ secrets.API_ADDRESS }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run: |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo &amp;#34;Enable Workflow Start...&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> curl -X PUT -H &amp;#34;Authorization: token $REST_TOKEN&amp;#34; &amp;#34;$API_ADDRESS&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo &amp;#34;Finished&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/details>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在你 Fork 的本仓库下的 &lt;code>Settings&lt;/code> -&amp;gt; &lt;code>Secrets&lt;/code> 页面追加以下几个&lt;code>secret&lt;/code>秘密环境变量&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">变量名&lt;/th>
&lt;th style="text-align:center">含义&lt;/th>
&lt;th style="text-align:center">默认值&lt;/th>
&lt;th style="text-align:center">是否必须&lt;/th>
&lt;th style="text-align:center">备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">FREENOM_USERNAME&lt;/td>
&lt;td style="text-align:center">freenom 账户&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">只支持邮箱账户，不支持也不打算支持第三方社交账户登录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">FREENOM_PASSWORD&lt;/td>
&lt;td style="text-align:center">freenom 密码&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">某些特殊字符可能需要转义，在&lt;code>Github actions&lt;/code>环境，请在除字母数字以外的字符前加上“\”，否则可能无法正确读取密码，此举是防止某些字符在&lt;code>shell&lt;/code>命令行被解析，举个例子，比如我密码是&lt;code>fei.,:!~@#$%^&amp;amp;*?233-_abcd^$$&lt;/code>，那么写到秘密变量时就应写为&lt;code>fei\.\,\:\!\~\@\#\$\%\^\&amp;amp;\*\?233\-\_abcd\^\$\$&lt;/code>。而在普通&lt;code>VPS&lt;/code>环境，则只用在密码中的“#”或单双引号前加“\”，请参考&lt;code>.env.example&lt;/code>文件内的注释，应该没人会设置那么变态的密码吧&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">MULTIPLE_ACCOUNTS&lt;/td>
&lt;td style="text-align:center">多账户支持&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">多个账户和密码的格式必须是“&lt;code>&amp;lt;账户1&amp;gt;@&amp;lt;密码1&amp;gt;|&amp;lt;账户2&amp;gt;@&amp;lt;密码2&amp;gt;|&amp;lt;账户3&amp;gt;@&amp;lt;密码3&amp;gt;&lt;/code>”，如果设置了多账户，上面的&lt;code>FREENOM_USERNAME&lt;/code>和&lt;code>FREENOM_PASSWORD&lt;/code>可不设置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">MAIL_USERNAME&lt;/td>
&lt;td style="text-align:center">机器人邮箱账户&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">支持&lt;code>Gmail&lt;/code>、&lt;code>QQ邮箱&lt;/code>以及&lt;code>163邮箱&lt;/code>，尽可能使用&lt;code>163邮箱&lt;/code>或者&lt;code>QQ邮箱&lt;/code>，而非之前推荐的&lt;code>Gmail&lt;/code>。因为谷歌的安全机制，每次在新设备登录 &lt;code>Gmail&lt;/code> 都会先被限制，需要手动解除限制才行，而&lt;code>Github Actions&lt;/code>每次创建的虚拟环境都会分配一个新的设备&lt;code>IP&lt;/code>，相当于每次都是从新设备登录&lt;code>Gmail&lt;/code>，而我们不可能每次都去手动为&lt;code>Gmail&lt;/code>解除登录限制，所以这种机制会导致无法发出通知邮件。具体的配置方法参考「 &lt;a class="link" href="#--%e9%85%8d%e7%bd%ae%e5%8f%91%e4%bf%a1%e9%82%ae%e7%ae%b1" >配置发信邮箱&lt;/a> 」&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">MAIL_PASSWORD&lt;/td>
&lt;td style="text-align:center">机器人邮箱密码&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">&lt;code>Gmail&lt;/code>填密码，&lt;code>QQ邮箱&lt;/code>或&lt;code>163邮箱&lt;/code>填授权码&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">TO&lt;/td>
&lt;td style="text-align:center">接收通知的邮箱&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">你自己最常用的邮箱，推荐使用&lt;code>QQ邮箱&lt;/code>，用来接收机器人邮箱发出的域名相关邮件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">MAIL_ENABLE&lt;/td>
&lt;td style="text-align:center">是否启用邮件推送功能&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">&lt;code>true&lt;/code>：启用&lt;!-- raw HTML omitted -->&lt;code>false&lt;/code>：不启用&lt;!-- raw HTML omitted -->默认启用，如果设为&lt;code>false&lt;/code>，不启用邮件推送功能，则上面的&lt;code>MAIL_USERNAME&lt;/code>、&lt;code>MAIL_PASSWORD&lt;/code>、&lt;code>TO&lt;/code>变量变为非必须，可不设置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">TELEGRAM_CHAT_ID&lt;/td>
&lt;td style="text-align:center">你的&lt;code>chat_id&lt;/code>&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">通过发送&lt;code>/start&lt;/code>给&lt;code>@userinfobot&lt;/code>可以获取自己的&lt;code>id&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">TELEGRAM_BOT_TOKEN&lt;/td>
&lt;td style="text-align:center">你的&lt;code>Telegram bot&lt;/code>的&lt;code>token&lt;/code>&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">TELEGRAM_BOT_ENABLE&lt;/td>
&lt;td style="text-align:center">是否启用&lt;code>Telegram Bot&lt;/code>推送功能&lt;/td>
&lt;td style="text-align:center">false&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">&lt;code>true&lt;/code>：启用&lt;!-- raw HTML omitted -->&lt;code>false&lt;/code>：不启用&lt;!-- raw HTML omitted -->默认不启用，如果设为&lt;code>true&lt;/code>，则必须设置上面的&lt;code>TELEGRAM_CHAT_ID&lt;/code>和&lt;code>TELEGRAM_BOT_TOKEN&lt;/code>变量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">NOTICE_FREQ&lt;/td>
&lt;td style="text-align:center">通知频率&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">&lt;code>0&lt;/code>：仅当有续期操作的时候&lt;!-- raw HTML omitted -->&lt;code>1&lt;/code>：每次执行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">REST_TOKEN&lt;/td>
&lt;td style="text-align:center">如后文所示&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">保活所需&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">API_ADDRESS&lt;/td>
&lt;td style="text-align:center">如后文所示&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">保活所需&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ol>
&lt;p>（注：你只用关注上面表格中的必须项，非必须项可不设置，将保持默认值。更多相关变量的含义、格式以及默认值，请参考本项目的&lt;code>.env.example&lt;/code>文件内的注释）&lt;/p>
&lt;ol start="3">
&lt;li>启用 Actions ，完成。&lt;/li>
&lt;/ol>
&lt;h1 id="保活">保活&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>Fork &lt;a class="link" href="https://github.com/zhzhzhy/Workflow-Keep-Alive" target="_blank" rel="noopener"
>zhzhzhy/Workflow-Keep-Alive库&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建 sercets ：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">变量名&lt;/th>
&lt;th style="text-align:center">值&lt;/th>
&lt;th style="text-align:center">备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">REST_TOKEN&lt;/td>
&lt;td style="text-align:center">个人访问令牌（Personal access tokens）&lt;/td>
&lt;td style="text-align:center">个人资料照片-&amp;gt;设置-&amp;gt;Developer settings&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">API_ADDRESS&lt;/td>
&lt;td style="text-align:center">&lt;code>https://api.github.com/repos/{owner}/{target-repo}/actions/workflows/enable_workflow/enable&lt;/code>&lt;/td>
&lt;td style="text-align:center">修改{owner}/{target-repo}&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>运行 github action。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>相互唤醒，再次在目标 repo 的工作流程中执行上述步骤，并添加所需 Github Action step（此步骤已标注请回看）。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="附">附&lt;/h1>
&lt;p>&lt;a class="link" href="https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions" target="_blank" rel="noopener"
>github workflow 语法文档&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://crontab.guru/examples.html" target="_blank" rel="noopener"
>修改定时任务 —— Cron示例&lt;/a>&lt;/p></description></item><item><title>docker自动化部署</title><link>https://www.jiangdaoli.cf/p/auto-deploy/</link><pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.jiangdaoli.cf/p/auto-deploy/</guid><description>&lt;h1 id="actions部署前后端分离项目">actions部署前后端分离项目&lt;/h1>
&lt;p>&lt;a class="link" href="https://dev.to/2nit/rails-cd-with-docker-github-actions-and-vps-4hi4" target="_blank" rel="noopener"
>参考文章&lt;/a>&lt;/p>
&lt;p>本文使用github actions + docker compose部署到github container registry（这适用于中小型项目） 附：&lt;a class="link" href="https://cloudonaut.io/amazon-ecr-vs-docker-hub-vs-github-container-registry/" target="_blank" rel="noopener"
>容器注册平台对比&lt;/a>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>准备好你的dockerfile，如无docker和docker-compose基础请先看文档和&lt;a class="link" href="https://jiangdaoli.cf/p/docker-compose/" target="_blank" rel="noopener"
>前文&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用github actions
&lt;details class="spoiler " id="spoiler-0">
&lt;summary>“点击展开示例actions”&lt;/summary>
&lt;p>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">on:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> branches:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> workflow_dispatch:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">env:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> REGISTRY: ghcr.io
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> IMAGE_NAME: ${{ github.repository }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">jobs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> build-and-push-image:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> runs-on: ubuntu-latest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> permissions:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> contents: read
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> packages: write
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> strategy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> matrix:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> node: [ &amp;#39;14&amp;#39; ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> steps:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Checkout repository
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: actions/checkout@v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Setup node
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: actions/setup-node@v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> node-version: ${{ matrix.node }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: npm install
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run: |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cd web #进入前端dockerfile目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> npm install
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Set up QEMU
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: docker/setup-qemu-action@v1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - uses: docker/setup-buildx-action@v1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> id: builder1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - uses: docker/setup-buildx-action@v1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> id: builder2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Log in to the Container registry
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: docker/login-action@v1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> registry: ${{ env.REGISTRY }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> username: ${{ github.actor }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> password: ${{ secrets.GITHUB_TOKEN }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 用于消毒标签，tag是此动作的重要功能之一，本示例没使用，请见文档
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Extract metadata (tags, labels) for Docker
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> id: meta1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: docker/metadata-action@v3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> images: ghcr.io/username/server # images地址
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Extract metadata (tags, labels) for Docker
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> id: meta2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: docker/metadata-action@v3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> images: ghcr.io/username/web # images地址
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Build and push Docker image 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: docker/build-push-action@v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> builder: ${{ steps.builder1.outputs.name }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> context: ./server # 服务端dockerfile目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> file: ./server/Dockerfile # 服务端dockerfile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push: true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> tags: ${{ steps.meta1.outputs.tags }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> labels: ${{ steps.meta1.outputs.labels }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cache-from: type=gha
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cache-to: type=gha,mode=max
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Build and push Docker image 2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: docker/build-push-action@v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> builder: ${{ steps.builder2.outputs.name }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> context: ./web # 前端dockerfile目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> file: ./web/Dockerfile # 前端dockerfile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push: true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> tags: ${{ steps.meta2.outputs.tags }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> labels: ${{ steps.meta2.outputs.labels }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cache-from: type=gha
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cache-to: type=gha,mode=max
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> deploy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> runs-on: ubuntu-latest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> needs: build-and-push-image
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> steps:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - uses: appleboy/ssh-action@master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> host: ${{ secrets.host }} #仓库设置中添加Secrets：HOST
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> username: root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> password: ${{ secrets.PASSWORD }} #仓库设置中添加Secrets：PASSWORD
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> port: 22
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> script: |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo $CR_PAT | docker login ghcr.io -u USERNAME --password-stdin # 用户名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> docker-compose -f docker-compose-nginx.yaml -f docker-compose-app.yaml pull # docker-compose名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> docker-compose -f docker-compose-nginx.yaml -f docker-compose-app.yaml up -d # docker-compose名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 此actions许多参数由github自动提供，无需添加，需修改的均已注释
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/details>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在服务器上完成&lt;a class="link" href="https://docs.github.com/cn/packages/working-with-a-github-packages-registry/working-with-the-container-registry#" target="_blank" rel="noopener"
>向 Container registry 验证&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>具体操作：打开/etc/profile&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">export CR_PAT=YOUR_TOKEN
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">source /etc/profile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo $CR_PAT | docker login ghcr.io -u USERNAME --password-stdin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>新建docker-compose-app.yaml和代理容器docker-compose-nginx.yaml,&lt;a class="link" href="https://github.com/buchdag/letsencrypt-nginx-proxy-companion-compose" target="_blank" rel="noopener"
>示例&lt;/a>。如有不懂，请多看几遍&lt;a class="link" href="https://github.com/nginx-proxy/acme-companion/tree/main/docs" target="_blank" rel="noopener"
>acme-companion&lt;/a>和上述示例文档。&lt;/li>
&lt;/ol>
&lt;p>最后，我前文的示例 或 &lt;a class="link" href="https://github.com/nginx-proxy/nginx-proxy/discussions/1755" target="_blank" rel="noopener"
>Issues中的实例&lt;/a>应该会有帮助。&lt;/p></description></item><item><title>docker和docker-compose</title><link>https://www.jiangdaoli.cf/p/docker-compose/</link><pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate><guid>https://www.jiangdaoli.cf/p/docker-compose/</guid><description>&lt;h1 id="docker">docker&lt;/h1>
&lt;p>&lt;a class="link" href="https://docs.docker.com/engine/install/debian/" target="_blank" rel="noopener"
>安装docker&lt;/a>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">#更新apt包索引
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sudo apt-get update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#安装包以允许apt通过 HTTPS 使用存储库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sudo apt-get install \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ca-certificates \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> curl \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> gnupg \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> lsb-release
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#添加Docker官方的GPG密钥
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#设置稳定存储库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $(lsb_release -cs) stable&amp;#34; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#安装最新版本的Docker Engine和containerd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sudo apt-get update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sudo apt-get install docker-ce docker-ce-cli containerd.io
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#hello-world 映像验证
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sudo docker run hello-world
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="dockerfile">Dockerfile&lt;/h2>
&lt;details class="spoiler " id="spoiler-0">
&lt;summary>“点击展开go语言示例”&lt;/summary>
&lt;p>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># 这个参考示例来自李文周大佬的bluebell项目
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">FROM golang:alpine AS builder
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 为我们的镜像设置必要的环境变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ENV GO111MODULE=on \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CGO_ENABLED=0 \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> GOOS=linux \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> GOARCH=amd64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 移动到工作目录：/build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WORKDIR /build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 复制项目中的 go.mod 和 go.sum文件并下载依赖信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY go.mod .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY go.sum .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN go mod download
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 将代码复制到容器中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY . .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 将我们的代码编译成二进制可执行文件 bluebell_app
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN go build -o bluebell_app .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">###################
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 接下来创建一个小镜像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">###################
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">FROM debian:stretch-slim
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY ./wait-for.sh /
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY ./templates /templates
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY ./static /static
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY ./conf /conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 从builder镜像中把/dist/app 拷贝到当前目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY --from=builder /build/bluebell_app /
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN set -eux; \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> apt-get update; \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> apt-get install -y \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --no-install-recommends \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> netcat; \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> chmod 755 wait-for.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 声明服务端口
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">EXPOSE 8084
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 需要运行的命令
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#ENTRYPOINT [&amp;#34;/bluebell_app&amp;#34;, &amp;#34;conf/config.yaml&amp;#34;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/details>
&lt;h2 id="基础知识参考">基础知识参考&lt;/h2>
&lt;p>以下简介节选自&lt;a class="link" href="https://docs.docker.com/get-started/" target="_blank" rel="noopener"
>docker文档&lt;/a>：&lt;/p>
&lt;ol>
&lt;li>**卷（volumes）**存储在由 Docker管理的主机文件系统（在 Linux 上的/var/lib/docker/volumes/ ）。卷完全由 Docker 管理，非 Docker 进程不应修改文件系统的这一部分。卷是在 Docker 中持久化数据的最佳方式。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># 将当前目录的相对路径挂载到/app目录中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> volumes:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - ./:/app
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="docker-compose">docker compose&lt;/h1>
&lt;p>&lt;a class="link" href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener"
>安装docker compose&lt;/a>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">#下载 Docker Compose 的当前稳定版本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sudo curl -L &amp;#34;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&amp;#34; -o /usr/local/bin/docker-compose
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#对二进制文件应用可执行权限
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo chmod +x /usr/local/bin/docker-compose
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#测试安装
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose --version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="docker-composeyaml">docker-compose.yaml&lt;/h2>
&lt;details class="spoiler " id="spoiler-1">
&lt;summary>“点击展开和折叠代码”&lt;/summary>
&lt;p>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">version: &amp;#39;3.7&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">services:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mysql5.7:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 镜像名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> image: &amp;#39;mysql:5.7&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 容器名(以后的控制都通过这个)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> container_name: mysql5.7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 重启策略
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> restart: always
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> environment:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 时区上海
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> TZ: Asia/Shanghai
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # root 密码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> MYSQL_ROOT_PASSWORD: root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 初始化数据库(后续的初始化sql会在这个库执行)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> MYSQL_DATABASE: nacos_config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 初始化用户(不能是root 会报错, 后续需要给新用户赋予权限)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> MYSQL_USER: nacos
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 用户密码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> MYSQL_PASSWORD: nacos
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 映射端口
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ports:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 3306:3306
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> volumes:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 数据挂载
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #- /root/mysql/data/:/var/lib/mysql/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 配置挂载
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #- /root/mysql/conf/:/etc/mysql/conf.d/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 初始化目录挂载，注意此处我只跑了这个挂载，只是为了说明其他配置不应该数据初始化
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - /root/mysql/init/:/docker-entrypoint-initdb.d/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> command:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 将mysql8.0默认密码策略 修改为 原先 策略 (mysql8.0对其默认策略做了更改 会导致密码无法匹配)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --default-authentication-plugin=mysql_native_password
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --character-set-server=utf8mb4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --collation-server=utf8mb4_general_ci
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --explicit_defaults_for_timestamp=true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --lower_case_table_names=1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> server:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> image: ghcr.io/USERNAME/server:master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> container_name: server
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ports:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 8082:8082
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> expose:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &amp;#34;8082&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> depends_on:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - mysql5.7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> restart: always
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> volumes:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &amp;#39;./data:/data/&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> web:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> image: ghcr.io/USERNAME/web:master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> container_name: web
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> depends_on:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - server
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> restart: always
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ports:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 3000:3000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> expose:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &amp;#34;3000&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> environment:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - VIRTUAL_HOST=example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - VIRTUAL_PORT=3000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - LETSENCRYPT_HOST=example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - LETSENCRYPT_EMAIL=mail@example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proxy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> external:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name: nginx-proxy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/details>
&lt;details class="spoiler " id="spoiler-2">
&lt;summary>“点击展开nginx-proxy代码”&lt;/summary>
&lt;p>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">version: &amp;#39;3&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">services:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> nginx-proxy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> image: jwilder/nginx-proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> container_name: nginx-proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ports:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &amp;#34;80:80&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &amp;#34;443:443&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> volumes:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - conf:/etc/nginx/conf.d
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - vhost:/etc/nginx/vhost.d
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - html:/usr/share/nginx/html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - dhparam:/etc/nginx/dhparam
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - certs:/etc/nginx/certs:ro
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - /var/run/docker.sock:/tmp/docker.sock:ro
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> restart: always
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - nginxproxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> labels:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &amp;#34;com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> letsencrypt:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> image: jrcs/letsencrypt-nginx-proxy-companion
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> container_name: nginx-proxy-le
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> depends_on:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - nginx-proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> volumes:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - vhost:/etc/nginx/vhost.d
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - html:/usr/share/nginx/html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - dhparam:/etc/nginx/dhparam:ro
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - certs:/etc/nginx/certs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - acme:/etc/acme.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - /var/run/docker.sock:/var/run/docker.sock:ro
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!-- # 由于LETSENCRYPT证书速率限制，可使用ZeroSSL--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!-- # 注释掉web服务environment中的：--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!-- - LETSENCRYPT_HOST=example.com--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!-- - LETSENCRYPT_EMAIL=mail@example.com--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!-- # 需添加如下environment--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!-- environment:--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!-- - ACME_CA_URI=https://acme.zerossl.com/v2/DV90--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!-- - ZEROSSL_API_KEY=--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> restart: always
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - nginxproxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">volumes:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> conf:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> vhost:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> html:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dhparam:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> certs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> acme:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> nginxproxy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> external:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name: nginx-proxy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/details>
&lt;h2 id="基础知识参考-1">基础知识参考&lt;/h2>
&lt;p>以下简介节选自&lt;a class="link" href="https://docs.docker.com/compose/" target="_blank" rel="noopener"
>docker compose文档&lt;/a>：&lt;/p>
&lt;ol>
&lt;li>Compose 中的&lt;strong>网络&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;p>Compose默认为您的应用程序设置单个网络。服务中的每个容器都加入默认网络。例如，假设您的应用程序是在一个名为myapp的目录，运行docker-compose up时会创建一个名为myapp_default的网络，服务中使用web和db的配置创建的容器会以web和db的名字加入myapp_default。&lt;/p>
&lt;p>但是，当你使用&lt;a class="link" href="https://docs.docker.com/compose/compose-file/compose-file-v3/#external-1" target="_blank" rel="noopener"
>external&lt;/a>（外部网络，例如你有2个或多个docker-compose.yml）时，Compose不会创建默认网络，你必须使用&lt;code>docker network create Your_Nerwork&lt;/code>预先创建网络。&lt;/p>
&lt;h1 id="常用命令">常用命令&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">Docker命令
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker run [可选参数] imagename #新建并启动容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　--name = &amp;#34;name&amp;#34; 容器取名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　-it 交互模式进入容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　-d 后台启动容器 注意：一般后台启动要有前台的应用，否则很可能被守护程序杀掉
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　-p ip:主机端口:容器端口 #指定端口映射
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">查看：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker search xxx #搜索dockerhub-镜像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker images [-a][-q] #列出本地主机的-镜像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -a 显示所有信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -q 显示所有id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker ps [-a][-q] #显示当前正在运行的容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　-a 显示当前运行的容器，并显示历史运行过的容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　-q 只显示运行容器的编号
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker logs 容器id #日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker top 容器id #查看容器中进程信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker inspect 容器id #查看容器的详细信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">操作：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker pull 镜像：版本号 #拉取-镜像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker start 容器id #启动容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker restart 容器id #重启容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker stop 容器id #停止容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker kill 容器id #强制停止容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker rm 容器id #删除停止状态的容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker rm -f 容器id #强制删除容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker rmi -f xxx #删除单个-镜像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker rmi -f $(docker images -aq) #删除所有-镜像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker stop $(docker ps -a -q) #停止所有容器运行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker rm $(docker ps -a -q) #删除所有容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker network rm $(docker network ls -q) #删除所有network
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker system prune --all --force --volumes #删除一切
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">exit 容器停止并退出
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ctrl+p+q 容器不停止退出
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker exec -it mysql /bin/bash #进入正在执行的mysql容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker inspect -f &amp;#39;{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}&amp;#39; container_name_or_id #查看容器ip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">从容器拷贝内容到主机：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker cp 容器id: 路径 主机目的路径 #此处不必进入容器，容器可以是关闭的。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">Docker-compose命令
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose up -d # 在后台启动服务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose pull # 拉取
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> docker-compose -f docker-compose.yml up -d # 指定docker-compose.yml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> docker-compose -f docker-compose.yml pull # 指定docker-compose.yml，后同
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">查看：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose ps # 查看正在运行中的容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose ps -a # 查看所有编排容器，包括已停止的容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose images # 列出Compose文件构建的镜像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose logs # 查看日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose logs [serviceName] # 查看某服务的日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose logs -f [serviceName] # 查看某服务的实时日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">操作：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose stop # 停止服务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose start # 启动已经存在的服务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose pause [serviceName] # 暂停服务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose unpause [serviceName] # 恢复服务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose restart [serviceName] # 重启服务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose rm # 删除所有（停止状态的）服务容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose down # 删除所有容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose down --remove-orphans # 删除orphans容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose config -q # 验证（docker-compose.yml）文件配置，当配置正确时，不输出任何内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose exec --index=1 [serviceName] sh # 进入某服务的第1个容器执行命令
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose --help # 帮助
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>常用命令</title><link>https://www.jiangdaoli.cf/p/ubuntu/</link><pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.jiangdaoli.cf/p/ubuntu/</guid><description>&lt;h1 id="git">git&lt;/h1>
&lt;h2 id="git命令">git命令&lt;/h2>
&lt;p>&lt;a class="link" href="https://training.github.com/downloads/zh_CN/github-git-cheat-sheet/" target="_blank" rel="noopener"
>官网git备忘表&lt;/a>比各种教程都易看&lt;/p>
&lt;h2 id="push脚本">push脚本&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">#!/bin/bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -e &amp;#34;\033[0;32mDeploying updates to GitHub...\033[0m&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Add changes to git.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git add .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Commit changes.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">msg=&amp;#34;rebuilding site `date`&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">if [ $# -eq 1 ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> then msg=&amp;#34;$1&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit -m &amp;#34;$msg&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Push source and build repos.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push origin master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="公开仓库fork为私有仓库">公开仓库fork为私有仓库&lt;/h2>
&lt;ol>
&lt;li>fork一个公开仓库&lt;/li>
&lt;li>使用github&lt;a class="link" href="https://github.com/new/import" target="_blank" rel="noopener"
>导入功能&lt;/a>，写fork仓库的地址，并创建私有仓库&lt;/li>
&lt;li>本地操作&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">git clone git@github.com:&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">your_username&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>/&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">your_repo&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>.git #克隆到本地
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote add upstream git@github.com:&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">original_owner&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>/&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">original_repo&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>.git #添加上游(源)仓库用于更新
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote set-url --push upstream DISABLE #禁用推送到上游(源)仓库
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>&lt;code>git remote -v&lt;/code>可以看到：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">origin git@github.com:&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">your_username&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>/&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">your_repo&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>.git (fetch)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">origin git@github.com:&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">your_username&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>/&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">your_repo&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>.git (push)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">upstream git@github.com:&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">original_owner&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>/&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">original_repo&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>.git (fetch)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">upstream DISABLE (push)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>拉取更新&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">git fetch upstream
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git merge upstream/master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="linux命令">Linux命令&lt;/h1>
&lt;h2 id="文件">文件&lt;/h2>
&lt;p>i 键可以对文件进行修改， &lt;code>Esc + :+ wq&lt;/code> 退出并保存修改之后的文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">sudo gedit ~/File //编辑
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">touch File //新建文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir -p Folder/a/src //新建文件夹
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo rm -r Folder //删除文件夹
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装包">安装包&lt;/h2>
&lt;ul>
&lt;li>apt&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">sudo apt update &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> apt upgrade //更新
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dpkg --list //显示所有软件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install 包名 //安装
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get remove 包名 //卸载不删除配置文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get --purge remove 包名 //软件及其配置文件一并删除
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>snap&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">sudo snap list //列出已经安装的snap包
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo snap install &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">snap&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> //安装一个snap包
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo snap refresh &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">snap&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> //更新一个snap包，如果后面不加包的名字更新所有的snap包
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo snap remove &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">snap&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> //删除一个snap包
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="端口">端口&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">sudo apt-get install lsof //安装lsof
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lsof -i:80 //查看80端口
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kill -9 pid //强制杀进程
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="脚本">脚本&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">local #用于声明局部变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">source
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">systemctl stop service # 停止一个服务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">systemctl daemon-reload # 重载所有修改过的配置文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">systemctl enable #将服务设置为每次开机启动
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">grep
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">set -eux #用于脚本开头设置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#-e 　若指令传回值不等于0，则立即退出shell。0表示没有错误
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#-u 　当执行时使用到未定义过的变量，则显示错误信息。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#-x 　执行指令后，会先显示该指令及所下的参数。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="脚本语言备忘录">脚本语言备忘录&lt;/h1>
&lt;h2 id="shell">shell&lt;/h2>
&lt;p>&lt;a class="link" href="http://www.imooc.com/wiki/shelllesson/shellvariable.html" target="_blank" rel="noopener"
>原文地址&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">name=&amp;#34;MyName&amp;#34; //定义变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo $name 或 echo ${name} //使用变量
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">val=`expr 2 + 2` #expr 是一款表达式计算工具，使用它能完成表达式的求值操作。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo &amp;#34;Total value : $val&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>特殊变量&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>$0&lt;/td>
&lt;td>当前脚本的文件名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$n&lt;/td>
&lt;td>传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$#&lt;/td>
&lt;td>传递给脚本或函数的参数个数总和&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$*&lt;/td>
&lt;td>传递给脚本或函数的所有参数，当被双引号 &amp;quot; &amp;quot; 包含时，所有的位置参数被看做一个字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$@&lt;/td>
&lt;td>传递给脚本或函数的所有参数，当被双引号 &amp;quot; &amp;quot; 包含时，每个位置参数被看做独立的字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$?&lt;/td>
&lt;td>上个命令的退出状态，或函数的返回值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$$&lt;/td>
&lt;td>当前 Shell 进程 ID。对于 Shell 脚本，就是这些脚本所在的进程 ID。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>测试符&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>-eq，equal&lt;/td>
&lt;td>等于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-ne，not equal&lt;/td>
&lt;td>不等于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-gt，greater than&lt;/td>
&lt;td>大于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-lt，lesser than&lt;/td>
&lt;td>小于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-ge，greater or equal&lt;/td>
&lt;td>大于或等于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-le，lesser or equal&lt;/td>
&lt;td>小于或等于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-z&lt;/td>
&lt;td>检测字符串长度是否为 0，为 0 返回 true。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-e&lt;/td>
&lt;td>file 检测文件（包括目录）是否存在，如果是，则返回 true。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-f&lt;/td>
&lt;td>file 检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>待续&lt;/p></description></item><item><title>环境配置和软件</title><link>https://www.jiangdaoli.cf/p/config/</link><pubDate>Sun, 18 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.jiangdaoli.cf/p/config/</guid><description>&lt;h1 id="部分电脑配置记录">部分电脑配置记录&lt;/h1>
&lt;h2 id="win10-config">win10 config&lt;/h2>
&lt;ul>
&lt;li>git&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">git config --global http.https://www.github.com.proxy socks5://127.0.0.1:port.socks
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global https.https://www.github.com.proxy socks5://127.0.0.1:port.socks
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>文件路径：&lt;code>C:\Users\90487\.gitconfig&lt;/code>，90487是我的用户名&lt;/p>
&lt;ul>
&lt;li>Terminal（临时使用）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">set http_proxy=http://127.0.0.1:port.http #临时命令行代理
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set https_proxy=http://127.0.0.1:port.http #临时命令行代理
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="vm-ubuntu-config">VM Ubuntu config&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>代理
Windows中使用&lt;code>ipconfig&lt;/code>查看&lt;code>VMware Network Adapter VMnet8&lt;/code>的ip地址，ubuntu中进入“设置”-“网络”-“proxy”，在&lt;code>Socks Host&lt;/code>里写入之前查到的&lt;strong>ip&lt;/strong>地址&lt;/p>
&lt;/li>
&lt;li>
&lt;p>git config&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">git config --global user.name &amp;#34;John Doe&amp;#34; #配置github账号用户名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global user.email johndoe@example.com #配置邮箱
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>git ssh 代理&lt;/li>
&lt;/ul>
&lt;p>创建~/.ssh/config 文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">Host github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> User git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ProxyCommand nc -v -x ip:port.socks %h %p #写自己ip
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>终端代理（临时使用）&lt;/p>
&lt;ul>
&lt;li>
&lt;p>方法一：直接在命令前加proxychains&lt;/p>
&lt;/li>
&lt;li>
&lt;p>方法二：直接在.bashrc最后加入：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">export http_proxy=&amp;#34;http://ip:port.http&amp;#34; #写自己ip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">export https_proxy=&amp;#34;http://ip:port.http&amp;#34; #写自己ip
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">source ~/.bashrc #使配置生效
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="ubuntu安装go">Ubuntu安装go&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">sudo apt install snap #安装snap，使用snap更易安装、更新
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">sudo snap install go --classic #安装go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">sudo vim /etc/profile #编辑profile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">export GOROOT=/snap/go #在最后一行添加
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">export PATH=$PATH:$GOROOT/bin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">source /etc/profile #保存
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">go version #验证
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">export GO111MODULE=on
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">export GOPROXY=https://goproxy.cn #设置 go get 为国内源（无代理）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="goland">Goland&lt;/h1>
&lt;h2 id="使用">使用&lt;/h2>
&lt;p>goland无限试用，方法适用&lt;strong>IDEA系列&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>goland中添加第三方插件仓库地址：https://plugins.zhile.io&lt;/li>
&lt;li>安装插件：IDE Eval Reset&lt;/li>
&lt;li>&lt;a class="link" href="https://plugins.zhile.io/files/ide-eval-resetter-2.1.14-d2fedb86.zip" target="_blank" rel="noopener"
>下载&lt;/a>&lt;/li>
&lt;li>直接把zip包拖进IDE的窗口来进行插件的安装&lt;/li>
&lt;li>Help -&amp;gt; Eval Reset 勾选Auto reset before per restart&lt;/li>
&lt;/ol>
&lt;p>&lt;a class="link" href="https://zhile.io/2020/11/18/jetbrains-eval-reset-da33a93d.html" target="_blank" rel="noopener"
>原文地址&lt;/a>，本段仅进行简述，使操作简明&lt;/p>
&lt;h2 id="不能输入中文ubuntu">不能输入中文（Ubuntu）&lt;/h2>
&lt;p>在goland.sh注释之后的首行添加&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">export XMODIFIERS=&amp;#34;@im=ibus&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">export GTK_IM_MODULE=&amp;#34;ibus&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">export QT_IM_MODULE=&amp;#34;ibus&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>goland.vmoptions添加&lt;code>-Drecreate.x11.input.method=true&lt;/code>&lt;/p>
&lt;h1 id="自用软件">自用软件&lt;/h1>
&lt;p>本文软件均为自用，本人无意推广任何软件，所以下载地址请自行查找，一般在google可找到官方，或者在52论坛搜搜看&lt;/p>
&lt;h2 id="win10优雅必备">win10优雅必备&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Wallpaper Engine　　　　　　#壁纸，steam购买&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Everything + uTools　　　　#文件快捷搜索及工具&lt;/p>
&lt;/li>
&lt;li>
&lt;p>quicker　　　　　　　　　　 #鼠标便捷操作神器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>DeskGo　　　　　　　　　　#腾讯出品的桌面软件格子&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Geek Uninstaller　　　　　　#卸载无残留&lt;/p>
&lt;/li>
&lt;li>
&lt;p>clover　　　　　　　　　　　#资源管理器多标签页&lt;/p>
&lt;/li>
&lt;li>
&lt;p>火绒　　　　　　　　　　　　#屏蔽弹窗&lt;/p>
&lt;/li>
&lt;li>
&lt;p>typora　　　　　　　　　　　#markdown记事本，据说notion在线笔记，我把博客当作在线笔记了&lt;/p>
&lt;/li>
&lt;li>
&lt;p>win10 microsoft store工具&lt;/p>
&lt;ul>
&lt;li>Windows Terminal　　　　　#命令行&lt;/li>
&lt;li>TranslucentTB　　　　　　　#任务栏透明&lt;/li>
&lt;li>EarTrumpet　　　　　　　　#音频管理&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="安卓app">安卓app&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>浏览器：Chrome、Kiwi、x浏览器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>影视：zd01.tv下载 + AdGuard　　# AdGuard设置复杂请自行研究，去除视频开头广告可在日志中找到广告，把这几个广告网站地址添加到自定义过滤&lt;/p>
&lt;/li>
&lt;li>
&lt;p>音乐：listen1　　　　　　　　# 并不完美，希望找到更好用的&lt;/p>
&lt;/li>
&lt;li>
&lt;p>小说：阅读　　　　　　　　　# 酷安评论区可以找书源&lt;/p>
&lt;/li>
&lt;li>
&lt;p>阅读：ReadEra、福昕PDF阅读器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>去除启动广告：跳过广告&lt;/p>
&lt;/li>
&lt;li>
&lt;p>手机控制&lt;/p>
&lt;ul>
&lt;li>MacroDroid、hamibot　　　#手机自动化&lt;/li>
&lt;li>Moonlight　　　　　　　　#局域网流畅投屏&lt;/li>
&lt;li>AirDroid和AirMirror　　　#手机远程控制手机&lt;/li>
&lt;li>向日葵远程控制&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>其他&lt;/p>
&lt;ul>
&lt;li>zarchiver　　　　　　　#文件管理和解压&lt;/li>
&lt;li>星空视频壁纸&lt;/li>
&lt;li>Sendapp #提取apk&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>hugo使用stack主题搭建博客及部署</title><link>https://www.jiangdaoli.cf/p/hugo-blog/</link><pubDate>Sat, 03 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.jiangdaoli.cf/p/hugo-blog/</guid><description>&lt;h1 id="准备">准备&lt;/h1>
&lt;p>1.Ubuntu&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">sudo apt update #更新
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>2.github账号&lt;/p>
&lt;p>3.git配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">git config --global user.name &amp;#34;John Doe&amp;#34; #配置github账号用户名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global user.email johndoe@example.com #配置邮箱
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>4.连接github&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">ssh-keygen -t ed25519 -C &amp;#34;your_email@example.com&amp;#34; #生成SSH Keys 此为新版
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ssh-keygen -t rsa -b 4096 -C &amp;#34;your_email@example.com&amp;#34; #此为常用版
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">cat ~/.ssh/id_ed25519.pub #复制
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>点击github右上角头像-&amp;gt; Settings -&amp;gt; SSH and GPG Keys -&amp;gt; New SSH key添加&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">ssh -T git@github.com #验证连接，输入yes
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a class="link" href="https://docs.github.com/cn/github/authenticating-to-github/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent" target="_blank" rel="noopener"
>官方文档&lt;/a>&lt;/p>
&lt;p>5.git ssh 代理设置&lt;/p>
&lt;p>非必要步骤，如果有一天ssh push网速极慢但https push正常，可尝试此操作&lt;/p>
&lt;p>创建~/.ssh/config 文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">Host github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> User git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ProxyCommand nc -v -x 127.0.0.1:10808 %h %p #请修改127.0.0.1:10808
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="安装">安装&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">snap install hugo --channel=extended #安装hugo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">hugo version #验证
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">hugo new site myblog #创建博客
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">git init #初始化
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">git remote add origin git@github.com:**** #连接远程仓库
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">git clone https://github.com/CaiJimmy/hugo-theme-stack/ #安装stack主题
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">rm config.toml &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> cp themes/hugo-theme-stack/exampleSite/config.yaml . #使用主题的配置文件
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>把myblog/themes/hugo-theme-stack/exampleSite/content内容移到myblog/content使用主题示例文章&lt;/p>
&lt;p>本地预览：
myblog下执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">hugo server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>浏览器打开：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">http://localhost:1313/ #目前本地运行不显示文章目录，估计是操作系统原因
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="部署">部署&lt;/h1>
&lt;p>注：我将介绍使用github托管源码自动化部署，如果您仅在本地存放源码，提交public文件夹即可，无需使用下列方法。&lt;/p>
&lt;p>1.虽然博客内容全都能看到，但我们可能不太希望公开源码，不开放源码使用github pages需要创建2个仓库:
创建 username.github.io.source 仓库存放源码可设为私人仓库，创建 username.github.io 仓库作为公开仓库&lt;/p>
&lt;p>点击github右上角头像-&amp;gt; Settings -&amp;gt; Developer Settings-&amp;gt; Personal access tokens -&amp;gt; Generate new token （Note随意，Select scopes全选,复制token，我们这里使用Personal tokens比Deploy keys更方便）&lt;/p>
&lt;p>找到源码仓库Settings-&amp;gt; Secrets -&amp;gt; New repository secret （Name写PERSONAL_TOKEN，Value粘贴token）&lt;/p>
&lt;p>2.创建github actions的workflows自动部署文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">mkdir -p .github/workflows &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> touch ~/myblog/.github/workflows/main.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>粘贴脚本：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">name: github pages
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">on:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> branches:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">jobs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> deploy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> runs-on: ubuntu-latest #可使用指定版本，例：runs-on: ubuntu-18.04
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> steps:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - uses: actions/checkout@v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> submodules: true # Fetch Hugo themes (true OR recursive)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Setup Hugo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: peaceiris/actions-hugo@v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> hugo-version: latest #可使用指定版本，例：hugo-version: &amp;#39;0.83.1&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> extended: true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run: hugo --gc --forceSyncStatic --minify --cleanDestinationDir
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Deploy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: peaceiris/actions-gh-pages@v3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> personal_token: ${{ secrets.PERSONAL_TOKEN }} # PERSONAL_TOKEN是源码仓库secrets的name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> external_repository: username/username.github.io # Pages 远程仓库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> publish_branch: master # 部署的分支
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> publish_dir: ./public
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> commit_message: ${{ github.event.head_commit.message }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #cname: www.example.com # 使用自定义域名
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>只需更改external_repository: username/username.github.io 为你的github账户名，&lt;a class="link" href="https://github.com/marketplace/actions/github-pages-action" target="_blank" rel="noopener"
>脚本详情&lt;/a>&lt;/p>
&lt;p>3.在myblog文件夹下创建push.sh&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">touch push.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>粘贴脚本：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">#!/bin/bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -e &amp;#34;\033[0;32mDeploying updates to GitHub...\033[0m&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Add changes to git.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git add .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Commit changes.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">msg=&amp;#34;rebuilding site `date`&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">if [ $# -eq 1 ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> then msg=&amp;#34;$1&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit -m &amp;#34;$msg&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Push source and build repos.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push origin master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在myblog下运行 sh push.sh命令&lt;/p>
&lt;p>到此已完成部署，之后任何更新如上运行push脚本即可&lt;/p>
&lt;h1 id="修改主题">修改主题&lt;/h1>
&lt;p>此处仅列举常见需修改内容，更多内容请看&lt;a class="link" href="https://docs.stack.jimmycai.com/v/zh-cn/configuration" target="_blank" rel="noopener"
>stack主题文档&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/rmdhnreza/rmdhnreza.my.id" target="_blank" rel="noopener"
>本博客修改样式来自rmdhnreza&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://yinhe.co/archives/20210401_hugo_theme_stack.html" target="_blank" rel="noopener"
>更多定制文章可以参考这里&lt;/a>&lt;/p>
&lt;h2 id="主题配置">主题配置&lt;/h2>
&lt;p>1.修改~/myblog/config.yaml&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">1 baseurl: https://username.github.io #改为自己的
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2 languageCode: zh-CN #中文编码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5 title: Example Site #博客名字
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">15 DefaultContentLanguage: zh-cn #中文
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">29 since: 2021
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">33 published: 2006-01-02 #日期格式
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">34 lastUpdated: 2006-01-02 #更新日期格式
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">37 emoji: 🍥 #头像角标
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">41 src: img/avatar.png #头像，myblog/themes/hugo-theme-stack/assets/img
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">135 name: &amp;#39;首页&amp;#39; #改中文左侧菜单home
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">155 startLevel: 1 #从文章1级标题使用文章目录
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>2.左侧菜单栏
~/myblog/content/page用于左侧菜单，请自定义&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">2 title: &amp;#39;关于&amp;#39; #中文左侧菜单about，后同
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>3.覆盖主题样式&lt;/p>
&lt;p>我使用了rmdhnreza(&lt;a class="link" href="https://github.com/rmdhnreza/rmdhnreza.my.id" target="_blank" rel="noopener"
>https://github.com/rmdhnreza/rmdhnreza.my.id&lt;/a>)修改的样式，直接在~/myblog下复制他的assets、layouts文件夹&lt;/p>
&lt;p>另外修改：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>~/myblog/assets/scss/variables.scss&lt;/p>
&lt;ul>
&lt;li>link-background-color: 0, 255, 255 链接背景颜色&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>注：浏览器可能缓存样式，可使用无痕模式&lt;/p>
&lt;h2 id="创建文章">创建文章&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">hugo new post/文件夹名/index.md #创建文章
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>写文章：&lt;/p>
&lt;p>1.front matter:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">title: hugo使用stack主题搭建博客及部署 #标题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">description: 搜索了搭建博客教程，仍花费我几天时间，本文旨在更全面简洁 #副标题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">date: 2021-07-04 #日期
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lastmod: 2021-07-27 #上次修改内容的日期
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">slug: hugo-blog #URL的尾部，用于文章地址
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">categories: #文章分类
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - blog
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>front matter仅列举本文使用，&lt;a class="link" href="https://gohugo.io/content-management/front-matter#readout" target="_blank" rel="noopener"
>hugo front matter官方文档&lt;/a>&lt;/p>
&lt;p>2.常见文章markdown语法：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code># 一级标题&lt;/code>&lt;br>
&lt;code>## 二级标题&lt;/code>&lt;br>
&lt;code>### 三级标题&lt;/code>&lt;br>
&lt;code>#### 四级标题&lt;/code>&lt;br>
&lt;code>##### 五级标题&lt;/code>&lt;br>
&lt;code>###### 六级标题&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>`单行代码` &lt;/code>&lt;br>
&lt;code>``&lt;/code> &lt;code>有`需用双反引号&lt;/code> &lt;code>``&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>```html&lt;/code>&lt;br>
&lt;code>多行代码&lt;/code>&lt;br>
&lt;code>```&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>[链接](https://)&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>\&lt;/code> 写在特殊符号前为转义；写在行尾为换行\&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>*斜体*&lt;/code>&lt;br>
&lt;code>**加粗**&lt;/code>&lt;br>
&lt;code>~~删除线~~&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>* 无序列表&lt;/code>&lt;br>
&lt;code>双空格* 子无序列表&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>![图片描述](本地图片.jpg)&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>表格&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">| Italics | Bold | Code |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| -------- | -------- | ------ |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| *italics* | **bold** | `code` |
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>{{&amp;lt; spoiler text=&amp;ldquo;点击展开和折叠代码&amp;rdquo; &amp;gt;}}&lt;br>
```html&lt;br>
code&lt;br>
```&lt;br>
{{&amp;lt; /spoiler &amp;gt;}}&lt;/li>
&lt;/ul>
&lt;h2 id="评论系统">评论系统&lt;/h2>
&lt;p>&lt;a class="link" href="https://waline.js.org/en/guide/get-started.html#leancloud-settings-database" target="_blank" rel="noopener"
>waline官方文档&lt;/a>写得非常清楚，您只需 LeanCloud设置 和 部署到Vercel ，拿到URL&lt;/p>
&lt;p>然后修改~/myblog/config.yaml&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">52 provider: waline #评论系统，本文示例使用waline
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">73 serverURL: https:// #评论系统URL用你自己的
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行sh push.sh即可&lt;/p>
&lt;h2 id="自定义域名">自定义域名&lt;/h2>
&lt;p>在~/myblog/config.yaml修改baseurl: &lt;code>https://username.github.io&lt;/code>&lt;/p>
&lt;p>在~/myblog/.github/workflows/main.yml最后一行取消注释并修改&lt;code>cname: www.example.com&lt;/code>&lt;/p>
&lt;p>执行sh push.sh即可&lt;/p>
&lt;p>启用https：&lt;a class="link" href="https://last2win.com/2020/02/21/github-pages-https/" target="_blank" rel="noopener"
>参考链接&lt;/a>&lt;/p>
&lt;p>没有域名？为了白嫖可在freenom和cloudflare进行申请域名和解析，这可能花费一些时间，如对此没有了解建议暂时跳过自定义域名。&lt;/p>
&lt;p>&lt;a class="link" href="URL" >freenom脚本自动续期参考后续文章&lt;/a>&lt;/p></description></item></channel></rss>