<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>计算机 on xiaoxian</title><link>https://www.jiangdaoli.cf/categories/computer/</link><description>Recent content in 计算机 on xiaoxian</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 04 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.jiangdaoli.cf/categories/computer/index.xml" rel="self" type="application/rss+xml"/><item><title>测试接口</title><link>https://www.jiangdaoli.cf/p/test/</link><pubDate>Thu, 04 Aug 2022 00:00:00 +0000</pubDate><guid>https://www.jiangdaoli.cf/p/test/</guid><description>&lt;p>&lt;a class="link" href="https://kalacloud.com/blog/postman-tutorial" target="_blank" rel="noopener"
>主要参考文章&lt;/a>&lt;/p>
&lt;h1 id="api">API&lt;/h1>
&lt;p>API的英文即 &lt;code>A&lt;/code>pplication &lt;code>P&lt;/code>rogramming &lt;code>I&lt;/code>nterface 首字母的缩写，直译过来的意思就是：程序之间的接口。我更倾向于把API理解为，程序之间的合约。有关 API 是什么及它的意义这里就不展开讲了。&lt;/p>
&lt;p>&lt;strong>chrome浏览器开发者工具&lt;/strong>&lt;/p>
&lt;p>勾选上谷歌开发者工具的preserve log，保留上一个页面接口调用信息，从而方便我们查看&lt;/p>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/0.jpg"
width="834"
height="293"
srcset="https://www.jiangdaoli.cf/p/test/0_hua9512b1a1e45ade4e3faab761d1fd8aa_86901_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/0_hua9512b1a1e45ade4e3faab761d1fd8aa_86901_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="284"
data-flex-basis="683px"
>&lt;/p>
&lt;h1 id="postman">Postman&lt;/h1>
&lt;p>&lt;strong>界面导航说明&lt;/strong>
&lt;img src="https://www.jiangdaoli.cf/p/test/1.png"
width="958"
height="505"
srcset="https://www.jiangdaoli.cf/p/test/1_hua5dba7d0290429ab5e2421ded386b7d2_112466_480x0_resize_box_3.png 480w, https://www.jiangdaoli.cf/p/test/1_hua5dba7d0290429ab5e2421ded386b7d2_112466_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="455px"
>&lt;/p>
&lt;p>&lt;strong>请求：&lt;/strong>&lt;/p>
&lt;p>params：get请求传参。&lt;/p>
&lt;p>Authrization：鉴权&lt;/p>
&lt;p>Headers：请求头&lt;/p>
&lt;p>　　accept:客户端接收的数据类型。&lt;/p>
&lt;p>　　content-type:客户端发送给服务器的数据类型&lt;/p>
&lt;p>　　user-agent:客户端的类型&lt;/p>
&lt;p>　　xmlhttprequest:异步请求&lt;/p>
&lt;p>Body：Post请求传参&lt;/p>
&lt;p>　　none：没有参数&lt;/p>
&lt;p>　　form-data：文件上传（包含键值对和文件上传）&lt;/p>
&lt;p>　　x-www-from-urlencodeed：表单请求（键值对）&lt;/p>
&lt;p>　　raw：使用原始数据格式请求（JSON，XML，HTML，Text，Javascript）&lt;/p>
&lt;p>　　binary：二进制文件上传。&lt;/p>
&lt;p>Pre-request-script：请求之前的脚本。&lt;/p>
&lt;p>Tests；请求之后的脚本。&lt;/p>
&lt;p>Setting：设置&lt;/p>
&lt;p>Cookies：用于自动管理Cookie的功能&lt;/p>
&lt;p>&lt;strong>响应：&lt;/strong>&lt;/p>
&lt;p>Body：返回的信息&lt;/p>
&lt;p>　　Pretty（各种格式查看返回数据）&lt;/p>
&lt;p>　　Raw（文本格式）&lt;/p>
&lt;p>　　Preview（网页）&lt;/p>
&lt;p>Cookie：响应Cookie&lt;/p>
&lt;p>token鉴权码：&lt;/p>
&lt;p>　　csrf_token：一般情况下有效期是7-15天。&lt;/p>
&lt;p>　　access_token：一般情况下有效期是10分钟-2小时&lt;/p>
&lt;p>Headers：响应头&lt;/p>
&lt;p>TestResults：测试结果&lt;/p>
&lt;p>200 响应码&lt;/p>
&lt;h1 id="get-请求">GET 请求&lt;/h1>
&lt;ol>
&lt;li>GET 请求基本操作&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/3.jpg"
width="780"
height="276"
srcset="https://www.jiangdaoli.cf/p/test/3_huea8564f558db9e40cdb712e1531d4db4_15474_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/3_huea8564f558db9e40cdb712e1531d4db4_15474_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="282"
data-flex-basis="678px"
>&lt;/p>
&lt;p>（1）点击主界面「+」号，新建一个请求页&lt;/p>
&lt;p>（2）选择 GET 请求命令&lt;/p>
&lt;p>（3）输入 API 地址&lt;/p>
&lt;p>在 GoRest API 设计中 GET 请求无需鉴权，所有我们直接点击「Send」即可远程调取服务器信息。&lt;/p>
&lt;p>如果我们只想看调取其中一位用户的信息应该怎么办呢？我们可以在 API URL 中带上参数。&lt;/p>
&lt;ol start="2">
&lt;li>带参数的 GET 请求&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/5.jpg"
width="780"
height="266"
srcset="https://www.jiangdaoli.cf/p/test/5_hu61bc7237f03831ddaeca34567e20c96d_16924_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/5_hu61bc7237f03831ddaeca34567e20c96d_16924_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="293"
data-flex-basis="703px"
>&lt;/p>
&lt;p>如果我们想查询 ID 为 2043 的用户信息，我们只需要在请求页面中的 Params(参数) 标签页的 KEY - VALUE 内填写对应的参数即可，之后 Postman 会自动在 API URL 中生成你填写的参数，使 URL 带上参数 GET 请求。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">https://gorest.co.in/public/v1/users?id=2043
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>设置完成后，点击「Send」&lt;/p>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/6.jpg"
width="780"
height="588"
srcset="https://www.jiangdaoli.cf/p/test/6_hua01f77d100f45c448c354a8248c0cdc6_27052_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/6_hua01f77d100f45c448c354a8248c0cdc6_27052_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>&lt;/p>
&lt;p>我们可以看到，返回值中仅包含我们请求的 user id 为 2043 的用户信息。&lt;/p>
&lt;ol start="3">
&lt;li>GET 请求中的多条件查询&lt;/li>
&lt;/ol>
&lt;p>有时，我们需要使用 API 进行多条件查询操作，比如想找 &lt;code>name&lt;/code> 值为 &lt;code>kalacloud.com&lt;/code> ，同时 &lt;code>gender&lt;/code> 值为 &lt;code>male&lt;/code> 的用户。（特别提示：此格式是通用写法，但最终要看 API 的开发者如何约定调用方式）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">BaseURL + ResourceName + ? + key1 = value1 + &amp;amp; + key 2 = value 2 ……
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>主 URL 之后使用 &lt;code>?&lt;/code> 连接参数，参数与参数之间使用 &lt;code>&amp;amp;&lt;/code> 连接符连接。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">https://gorest.co.in/public-api/users/?name=kalacloud.com&amp;amp;gender=male
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/7.jpg"
width="780"
height="279"
srcset="https://www.jiangdaoli.cf/p/test/7_hu069cf5c74c5591848496c4d99804f130_19196_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/7_hu069cf5c74c5591848496c4d99804f130_19196_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="279"
data-flex-basis="670px"
>&lt;/p>
&lt;p>当然，我们可以直接在 Postman 的 Params 中直接填写 KEY - VALUE&lt;/p>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/8.jpg"
width="780"
height="230"
srcset="https://www.jiangdaoli.cf/p/test/8_hu75397afa6c0d3767ce56a8662b2c88df_11487_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/8_hu75397afa6c0d3767ce56a8662b2c88df_11487_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="339"
data-flex-basis="813px"
>&lt;/p>
&lt;p>让 Postman 帮我们生成，然后点击「Send」&lt;/p>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/9.jpg"
width="780"
height="797"
srcset="https://www.jiangdaoli.cf/p/test/9_huadee4e48b5745e802653f0461771db4b_34515_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/9_huadee4e48b5745e802653f0461771db4b_34515_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="97"
data-flex-basis="234px"
>&lt;/p>
&lt;p>可以看到 API GET 调取了我们设定的两个 VALUE 值的 data 信息。&lt;/p>
&lt;p>特别提示，你可以点击右上角的「Bulk Edit」进行参数的批量编辑&lt;/p>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/10.jpg"
width="780"
height="366"
srcset="https://www.jiangdaoli.cf/p/test/10_hub64c0fcc57537599cc9a711fa7c58fa5_18468_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/10_hub64c0fcc57537599cc9a711fa7c58fa5_18468_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="213"
data-flex-basis="511px"
>&lt;/p>
&lt;h1 id="post-请求">POST 请求&lt;/h1>
&lt;p>&lt;strong>POST 方式一：模仿浏览器&lt;/strong>&lt;/p>
&lt;p>在发送一个get请求之后，postman会自动保存cookis，我们只需复制 Payload 的数据格式到 body ，复制 x-csrf-token 到 Headers ，发送这个 POST 请求&lt;/p>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/003.jpg"
width="923"
height="645"
srcset="https://www.jiangdaoli.cf/p/test/003_hub0105dd4f86ead28a533442657c21c31_222168_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/003_hub0105dd4f86ead28a533442657c21c31_222168_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="143"
data-flex-basis="343px"
>&lt;/p>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/605.jpg"
width="1023"
height="763"
srcset="https://www.jiangdaoli.cf/p/test/605_hu72141687809da2e9ab3ad09322a16397_193749_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/605_hu72141687809da2e9ab3ad09322a16397_193749_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="321px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.apifox.cn/help/app/best-practices/csrf-token" target="_blank" rel="noopener"
>自动方式可以参考&lt;/a>&lt;/p>
&lt;p>&lt;strong>POST 方式二：鉴权&lt;/strong>
在 Authorization 中添加鉴权方式和密钥，postman会自动添加到Headers，按照api写入所需body，发送这个 POST 请求&lt;/p>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/905.jpg"
width="1029"
height="424"
srcset="https://www.jiangdaoli.cf/p/test/905_hua2cd1a8058bf2fb52d6ae553c1da31ce_121459_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/905_hua2cd1a8058bf2fb52d6ae553c1da31ce_121459_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="582px"
>&lt;/p>
&lt;h1 id="用-postman-发送第一个-put-更新请求">用 Postman 发送第一个 PUT 更新请求&lt;/h1>
&lt;p>PUT 请求一般用于更新服务器已有资源，如果服务器中没有对应的资源，那么 PUT 会创建相应的资源（特别提醒：虽然 PUT 有创建新资源的功能，但是否能创建成功，最终取决于你调用的 API 是否支持此功能）&lt;/p>
&lt;p>打开你的 Postman 我们来创建一个 PUT 请求。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>点击「+」号，新建一个请求页&lt;/p>
&lt;/li>
&lt;li>
&lt;p>请求类型选择「PUT」&lt;/p>
&lt;/li>
&lt;li>
&lt;p>根据第6节我们使用 POST 请求创建的资源 ID 为 &lt;code>1475&lt;/code> ，又根据 GoRest API 的文档得知，修改资源的 API 地址为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">https://gorest.co.in/public/v1/users/{{ID}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>，所以我们要使用 PUT 修改 ID 为 1475 资源的请求地址应该写：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">https://gorest.co.in/public/v1/users/1475
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>选择在 &lt;code>Body&lt;/code> 标签中填写 JSON 格式的资源修改信息。我们将 &lt;code>1475&lt;/code> 中的邮箱由&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">JiangChuan@kalacloud.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改为 &lt;code>Hi@kalacloud.com&lt;/code>，所以我们在 Body 中填写以下代码。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;name&amp;#34;: &amp;#34;kalacloud&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;gender&amp;#34;: &amp;#34;Male&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;email&amp;#34;: &amp;#34;Hi@kalacloud.com&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;status&amp;#34;: &amp;#34;Active&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>选择 Auth 标签，进行 API 鉴权，鉴权方法详见本文第6节《使用 Postman 对 API 鉴权》&lt;/li>
&lt;li>点击 「Send」发送 PUT 请求&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/17.jpg"
width="780"
height="588"
srcset="https://www.jiangdaoli.cf/p/test/17_hueefed72c682fb492266139d2e0ca7c93_28056_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/17_hueefed72c682fb492266139d2e0ca7c93_28056_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>&lt;/p>
&lt;ul>
&lt;li>如上图所示，可以看到红4位置 响应代码返回 200 ，这说明 PUT 请求已经执行成功。&lt;/li>
&lt;li>返回的 Body 信息中，email 字段已经更新为 &lt;code>Hi@kalacloud.com&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="用-postman-发送第一个-patch-更新请求">用 Postman 发送第一个 PATCH 更新请求&lt;/h1>
&lt;p>PATCH 请求一般用于服务器资源的部分更新，它相对于 PUT 提交的数据更少，不用提整个数据，只需要提交需要修改的字段即可。有关 PUT 和 PATCH 的更多区别，可查看本文第9节。&lt;/p>
&lt;p>打开你的 Postman 我们来创建一个 PATCH 请求。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>点击「+」号，新建一个请求页&lt;/p>
&lt;/li>
&lt;li>
&lt;p>请求类型选择「PATCH」&lt;/p>
&lt;/li>
&lt;li>
&lt;p>根据第6节我们使用 POST 请求创建的资源 ID 为 &lt;code>1475&lt;/code> ，又根据 GoRest API 的文档得知，修改资源的 API 地址为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">https://gorest.co.in/public/v1/users/{{ID}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>，所以我们要使用 PATCH 修改 ID 为 1475 资源的请求地址应该写，到这里都和 PUT 请求修改资源的方法一样。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">https://gorest.co.in/public/v1/users/1475
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>选择在 &lt;code>Body&lt;/code> 标签中填写 JSON 格式的资源修改信息。上一节我们已经将 ID 为 &lt;code>1475&lt;/code> 资源的邮箱改为 &lt;code>Hi@kalacloud.com&lt;/code> ，接着我们用 PATCH 请求把这个邮箱改为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">HelloWord@kalacloud.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;email&amp;#34;:&amp;#34;HelloWord@kalacloud.com&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>选择 Auth 标签，进行 API 鉴权，鉴权方法详见本文第6节《使用 Postman 对 API 鉴权》&lt;/li>
&lt;li>点击 「Send」发送 PATCH 请求&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/18.jpg"
width="780"
height="588"
srcset="https://www.jiangdaoli.cf/p/test/18_hueafacd55cb3e243dcca7f16297d3cd9e_27788_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/18_hueafacd55cb3e243dcca7f16297d3cd9e_27788_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如上图所示，可以看到红4位置 响应代码返回 200 ，这说明 PATCH 请求已经执行成功。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>返回的 Body 信息中，email 字段已经更新为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">HelloWord@kalacloud.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h1 id="put-和-patch-的区别">PUT 和 PATCH 的区别&lt;/h1>
&lt;p>在 HTTP 协议中，PUT 和 PATCH 都是用于更新服务器资源的命令，但他们有着不同的格式和用途。&lt;/p>
&lt;p>PUT 请求：一般用于更新服务器已有资源，如果服务器中没有对应的资源，那么 PUT 会创建相应的资源（特别提醒：虽然 PUT 有创建新资源的功能，但是否能创建最终取决于你调用的 API 是否支持此功能）&lt;/p>
&lt;p>PATCH 请求：用于局部更新服务器现有资源，它不用像 PUT 更新资源中的一点点也要提交所有字段信息，PATCH 更新哪个字段就提交哪个字段的更新信息即可。&lt;/p>
&lt;p>&lt;code>举例说明PUT 和 PATCH 的区别：&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/19.jpg"
width="780"
height="263"
srcset="https://www.jiangdaoli.cf/p/test/19_huda2a1c0ebe4bcfb14216027fe2f1ab79_13723_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/19_huda2a1c0ebe4bcfb14216027fe2f1ab79_13723_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="296"
data-flex-basis="711px"
>&lt;/p>
&lt;p>同样是更新资源中的 Email 信息，PUT 需要带上资源中的所有信息，然后在更新&lt;code>（上图）&lt;/code>&lt;/p>
&lt;p>而 PATCH 则仅需要提交更新部分，即仅提交邮箱信息即可&lt;code>（下图）&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/20.jpg"
width="780"
height="269"
srcset="https://www.jiangdaoli.cf/p/test/20_hu4966b7454a7afa23a140f0b93ed970ed_13804_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/20_hu4966b7454a7afa23a140f0b93ed970ed_13804_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="289"
data-flex-basis="695px"
>&lt;/p>
&lt;p>那么，如果 PUT 像 PATCH 一样仅提交资源的局部信息会发生什么呢？会 400 报错。&lt;/p>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/21.jpg"
width="780"
height="491"
srcset="https://www.jiangdaoli.cf/p/test/21_huf83142ee0bab4f71dc642b8adcfa23ad_24623_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/21_huf83142ee0bab4f71dc642b8adcfa23ad_24623_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="158"
data-flex-basis="381px"
>&lt;/p>
&lt;p>PUT 不论修改多少，必须把修改资源的全部字段写全，否则会 400 报错。&lt;/p>
&lt;h1 id="用-postman-发送第一个-delete-删除请求">用 Postman 发送第一个 DELETE 删除请求&lt;/h1>
&lt;p>我们在上文讲了获取(GET)，创建(POST)，更新(PUT / PATCH) 请求，接着我们来说说删除(DELETE) 请求。顾名思义，DELETE 请求执行可删除整个资源。我们来直接实践一次你就明白了。&lt;/p>
&lt;p>打开你的 Postman ，跟随本教程一起创建一个 DELETE 请求。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>点击「+」号，新建一个请求页&lt;/p>
&lt;/li>
&lt;li>
&lt;p>请求类型选择「DELETE」&lt;/p>
&lt;/li>
&lt;li>
&lt;p>我们来把上文刚刚创建的 ID 为 &lt;code>1475&lt;/code> 的资源彻底删掉。根据 GoRest API 的文档得知，删除资源的 API 请求地址为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">https://gorest.co.in/public/v1/users/{{ID}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>，所以我们要使用 &lt;code>PATCH&lt;/code> 删除 ID 为 1475 资源的请求地址应该写：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">https://gorest.co.in/public/v1/users/1475
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>选择 Auth 标签，进行 API 鉴权，鉴权方法详见本文第6节《使用 Postman 对 API 鉴权》&lt;/li>
&lt;li>点击 「Send」发送 DELETE 请求，删除对应的资源。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/22.jpg"
width="780"
height="393"
srcset="https://www.jiangdaoli.cf/p/test/22_hua865477ba4d92d0fcb103f74bff262bd_20907_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/22_hua865477ba4d92d0fcb103f74bff262bd_20907_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="476px"
>&lt;/p>
&lt;p>如上图所示，提交 DELETE 请求后，响应代码为 204 ，返回的 body 为空，删除成功。&lt;/p>
&lt;p>特别提示：在 GoRest 的文档说明中，特别说了 DELETE 删除返回值的状态。&lt;/p>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/23.jpg"
width="780"
height="107"
srcset="https://www.jiangdaoli.cf/p/test/23_hu5a444ecc2cd619d231b5e2d91f409217_12916_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/23_hu5a444ecc2cd619d231b5e2d91f409217_12916_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="728"
data-flex-basis="1749px"
>&lt;/p>
&lt;p>API 返回状态具体是怎么样的，还要看 API 的开发者是如何约定的，并非只有返回 200 才是成功的。&lt;/p>
&lt;h1 id="postman-中的全局变量环境变量集合变量的设置">Postman 中的全局变量、环境变量、集合变量的设置&lt;/h1>
&lt;ol>
&lt;li>Postman 设置变量的意义&lt;/li>
&lt;/ol>
&lt;p>Postman 里有多种变量，我们可以把某些重要的值抽象出来变成变量，方便我们做场景 / 条件切换。比如，我们可以把 baseURL 抽出来，在环境变量里设置「生产环境变量」和「测试环境变量」，之后，我们只需要切换标签即可快速将数据从一个环境切换到另一个环境中，非常方便。&lt;/p>
&lt;ol start="2">
&lt;li>Postman 常用的三种变量形式&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>全局变量：全局变量一旦声明，即可应用到 Postman 中所有测试的 API 中。任何请求都可以直接使用全局变量，它的作用域是全局的。&lt;/li>
&lt;li>环境变量：Postman 的环境变量可以理解为一组选项，当这组环境变量选项被选中时，才会生效，特别适合「生产环境」和「测试环境」之间的切换等应用场景。&lt;/li>
&lt;li>集合变量：集合变量是针对集合（Collections）生效的，一个集合下可能有 N 条 API 请求，集合变量可以一次修改集合下的所有变量数值。&lt;/li>
&lt;/ul>
&lt;p>以上三种变量的作用域从大到小为 全局 集合 环境，当三个变量形式同时作用于一个 API 测试条时，Postman 会优先使用最小作用域变量。&lt;/p>
&lt;ol start="3">
&lt;li>如何在 Postman 设置全局变量与环境变量&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/24.jpg"
width="780"
height="339"
srcset="https://www.jiangdaoli.cf/p/test/24_hu3f46bdba652759e817d03a30c2f3c0fe_20545_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/24_hu3f46bdba652759e817d03a30c2f3c0fe_20545_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="230"
data-flex-basis="552px"
>&lt;/p>
&lt;ul>
&lt;li>新建一个请求页，点击右上角的「小眼睛」进入变量设置页。&lt;/li>
&lt;li>页面上方为「环境变量」，我们点击编辑设置环境变量名为「卡拉云_API 测试环境」&lt;/li>
&lt;li>VARIABLE 设置为 &lt;code>baseURL&lt;/code>，INITIAL VALUE 设置为 &lt;code>https://gorest.co.in&lt;/code> ，保存之后我们就可以使用 &lt;code>{{baseURL}}&lt;/code> 变量来替代 API URL 了。&lt;/li>
&lt;li>页面下方为「全局变量」，VARIABLE 设置为 &lt;code>kalacloud_id&lt;/code>，INITIAL VALUE 设置为 &lt;code>2312&lt;/code> (2312 为 GoRest 中的一个已存在的用户信息 ID)，保存后我们就可以使用 &lt;code>{{kalacloud_id}}&lt;/code> 变量来替代 ID 值了。&lt;/li>
&lt;/ul>
&lt;p>我们来一起测一下刚刚设置好的「全局变量」和「环境变量」是否生效。&lt;/p>
&lt;ul>
&lt;li>新建一个 GET 请求页，地址栏填入：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{{baseURL}}/public/v1/users?id={{kalacloud_id}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>点击「Send」&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/25.jpg"
width="780"
height="802"
srcset="https://www.jiangdaoli.cf/p/test/25_hu532d10b5292918f32cc50bde7cdeca2c_37000_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/25_hu532d10b5292918f32cc50bde7cdeca2c_37000_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="97"
data-flex-basis="233px"
>&lt;/p>
&lt;p>返回响应代码为 200 说明请求成功，返回的 Body 信息是 ID 为 &lt;code>2312&lt;/code> 的用户信息，说明全局和环境变量已生效。&lt;/p>
&lt;ol start="4">
&lt;li>如何在 Postman 设置集合变量&lt;/li>
&lt;/ol>
&lt;p>集合变量是指应用在整个集合所有请求中的变量，集合变量优先与其他变量应用与请求，也就是说如果有集合变量，那么其他变量与集合变量相冲突的化，优先执行集合变量。&lt;/p>
&lt;p>集合变量很适合临时修改整个集合中的变量，来针对集合进行测试。&lt;/p>
&lt;p>打开你的 Postman，我们一起操作一遍。&lt;/p>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/26.jpg"
width="780"
height="275"
srcset="https://www.jiangdaoli.cf/p/test/26_hu79d68642b788fbbc24059bc3291e54c3_19910_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/26_hu79d68642b788fbbc24059bc3291e54c3_19910_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="283"
data-flex-basis="680px"
>&lt;/p>
&lt;ul>
&lt;li>选中一个集合，点击集合标题右侧「&amp;hellip;」选择编辑。&lt;/li>
&lt;li>进入集合设置页，选择 Variables 设置集合变量&lt;/li>
&lt;li>此时，整个集合下所有请求页，都应用了此集合变量。&lt;/li>
&lt;/ul>
&lt;h1 id="如何使用-postman-pre-request-scripts-预请求脚本">如何使用 Postman &lt;code>Pre-request scripts&lt;/code> 预请求脚本&lt;/h1>
&lt;p>Pre-request scripts 预请求脚本是在 API 请求之前执行的脚本，我们可以临时更改请求的某些变量。一般预请求脚本有这么两种常见的应用场景。(1)设置动态请求头信息。 (2)设置动态请求参数信息。比如，当我们要请求一个与时间有关的资源时，我们可以在预请求脚本中添加 &lt;code>timestamp&lt;/code> 字段，这是一个动态值，我们可以通过前置请求脚本来实现。&lt;/p>
&lt;p>&lt;code>举例说明：&lt;/code>比如我们要在 header 中包含一个时间戳，我们可以这样操作&lt;/p>
&lt;ul>
&lt;li>在 Pre-request scripts 中添加获取时间戳的代码&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">pm.environment.set(&amp;#34;TimeStampHeader&amp;#34;,new Date());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/27.jpg"
width="780"
height="331"
srcset="https://www.jiangdaoli.cf/p/test/27_hu8d24557a50ac1abeee8fc4533f535bdb_18505_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/27_hu8d24557a50ac1abeee8fc4533f535bdb_18505_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="235"
data-flex-basis="565px"
>&lt;/p>
&lt;ul>
&lt;li>在 header 中添加预脚本中的变量 &lt;code>TimeStampHeader&lt;/code> 当请求时，Postman 会先执行预脚本获取时间戳，然后再将时间戳赋予到 header 中 timestamp 值中。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/28.jpg"
width="780"
height="312"
srcset="https://www.jiangdaoli.cf/p/test/28_huc7645f22b2c0495ea5ca0e9d9f854f5c_15945_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/28_huc7645f22b2c0495ea5ca0e9d9f854f5c_15945_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="250"
data-flex-basis="600px"
>&lt;/p>
&lt;ul>
&lt;li>接着我们来执行这条 GET 请求，打开控制控制台，在控制台中，可以看到 Request Headers 中包含我们刚刚设置的时间戳 「timestamp」特别提示：有关控制台的讲解，在本教程第14节。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/29.jpg"
width="780"
height="583"
srcset="https://www.jiangdaoli.cf/p/test/29_huae5b01fcbe01a7531db07d1193bc4403_30930_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/29_huae5b01fcbe01a7531db07d1193bc4403_30930_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="321px"
>&lt;/p>
&lt;p>&lt;code>附：常用的 Pre-request scripts ：&lt;/code>&lt;/p>
&lt;p>&lt;code>获取变量&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">//通用语法
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">postman.getGlobalVariable(&amp;#34;key&amp;#34;); //获取全局变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">postman.getEnvironmentVariable(&amp;#34;key&amp;#34;); //获取环境变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//postman native app 特有语法
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pm.globals.get(&amp;#34;key&amp;#34;); //获取全局变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pm.environment.get(&amp;#34;key&amp;#34;); //获取环境变量
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>设置变量&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">//通用语法
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">postman.setGlobalVariable(&amp;#34;key&amp;#34;,&amp;#34;value&amp;#34;); //设置全局变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">postman.setEnvironmentVariable(&amp;#34;key&amp;#34;,&amp;#34;value&amp;#34;); //设置环境变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//postman native app 特有语法
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pm.globals.get(&amp;#34;key&amp;#34;,&amp;#34;value&amp;#34;); //设置全局变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pm.environment.get(&amp;#34;key&amp;#34;,&amp;#34;value&amp;#34;); //设置环境变量
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>清除变量&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">//通用语法
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">postman.clearGlobalVariable(&amp;#34;key&amp;#34;); //清除全局变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">postman.clearEnvironmentVariable(&amp;#34;key&amp;#34;); //清除环境变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//postman native app 特有语法
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pm.globals.unset(&amp;#34;key&amp;#34;); //清除全局变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pm.environment.unset(&amp;#34;key&amp;#34;); //清除环境变量
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>将数组、嵌套对象存储到全局&amp;amp;环境变量中&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">//将数组储存到环境变量中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var array = [1, 2, 3, 4];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">postman.setEnvironmentVariable(&amp;#34;array&amp;#34;, JSON.stringify(array));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//将嵌套对象储存到环境变量中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var obj = { a: [1, 2, 3, 4], b: { c: &amp;#39;val&amp;#39; } };
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">postman.setEnvironmentVariable(&amp;#34;obj&amp;#34;, JSON.stringify(obj));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//从环境变量中获取数组对象
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var array = JSON.parse(postman.getEnvironmentVariable(&amp;#34;array&amp;#34;));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//从环境变量中获取嵌套对象/json对象
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var obj = JSON.parse(postman.getEnvironmentVariable(&amp;#34;obj&amp;#34;));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="如何创建-postman-tests-测试脚本---postman-断言功能">如何创建 Postman Tests 测试脚本 - Postman 断言功能&lt;/h1>
&lt;p>在 Postman 中 Pre-request 和 Tests 是两兄弟，一个是在调用前执行（Pre-request），一个是在调用后执行（Tests），我们可以在 Tests 中使用 JavaScript 校验代码协助我们验证结果，可以说 Tests 是 Postman 的断言功能&lt;/p>
&lt;ol>
&lt;li>&lt;code>Postman Tests 断言的实际应用&lt;/code>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;code>Postman 状态类断言&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/30.jpg"
width="780"
height="425"
srcset="https://www.jiangdaoli.cf/p/test/30_hu6d4c59ad85bc4762a1650b211ae988f8_25225_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/30_hu6d4c59ad85bc4762a1650b211ae988f8_25225_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="183"
data-flex-basis="440px"
>&lt;/p>
&lt;p>1.我们首先创建一个 GET 请求，然后点击 Postman 中 Tests 标签，进入断言设置。&lt;/p>
&lt;p>2.我们可以在右侧已经预设好的断言代码，我们先点击「Status code: Code is 200」，可以看到预设的代码直接写入编辑框。这段代码的意思是，如果执行调用，服务器返回响应代码为 &lt;code>200&lt;/code> 时，判断为 &lt;code>PASS&lt;/code> 即调用成功。&lt;/p>
&lt;p>3.点击「Send」执行 GET 请求，返回的断言可以在 Test Results 中看到结果。&lt;/p>
&lt;p>4.绿色的 PASS，说明服务器返回的响应代码为 200 ，调用成功。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Postman 结果比较类断言&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>我们再添加一条带有变量的 JavaScript 断言设置，比较预期结果和实际返回结果之间是否一致。&lt;/p>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/31.jpg"
width="780"
height="389"
srcset="https://www.jiangdaoli.cf/p/test/31_hubc556dbf787462ceaff1b4aa65111ce5_18017_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/31_hubc556dbf787462ceaff1b4aa65111ce5_18017_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="481px"
>&lt;/p>
&lt;p>我们刚刚 GET 请求了 ID 2312 的用户信息，其中 &lt;code>name&lt;/code> 的值为 &lt;code>kalacloud&lt;/code>&lt;/p>
&lt;p>那么我们接下来写一个 JS 判断预期与返回结果是否一致。即预期为 &lt;code>name&lt;/code> 的值为「kalacloud」，写断言自动判断返回结果的&lt;code>name&lt;/code>值是否也是「kalacloud」&lt;/p>
&lt;p>1.在 Tests 选项卡右侧选择「Response body:JSON value check」，我们来检测 &lt;code>ID&lt;/code> 为 &lt;code>2312&lt;/code> 的返回值中，&lt;code>name&lt;/code> 的值是否为 &lt;code>kalacloud&lt;/code>&lt;/p>
&lt;p>2.我们将「Your Test Name」替换为「检查 ID 为 2312 的 name 返回值为 kalacloud」让这条测试的名字直接反应出我们想测试的内容。&lt;/p>
&lt;p>3.使用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">jsonData.data[0].name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>代替&lt;code>jsonData.value&lt;/code> ，即检测第一个返回值中的 &lt;code>name&lt;/code> 的 &lt;code>value&lt;/code>&lt;/p>
&lt;p>4.检测返回值：在 &lt;code>to.eql()&lt;/code> 中输入待检测值 &lt;code>&amp;quot;kalacloud&amp;quot;&lt;/code>，即需要检测的 text。&lt;/p>
&lt;p>5.代码如下，你可以复制并根据你的情况简单修改，然后在 Postman 中，跟随教程一起测试。&lt;/p>
&lt;p>&lt;code>特别注意：&lt;/code>这里的 &lt;code>ID = 2312&lt;/code> 是我这里的情况，你需要根据你的情况进行相应修改。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">pm.test(&amp;#34;Status code is 200&amp;#34;, function () {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pm.response.to.have.status(200);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pm.test(&amp;#34;检查 ID 为 2312 的 name 返回值为 kalacloud&amp;#34;, function () {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var jsonData = pm.response.json();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pm.expect(jsonData.data[0].name).to.eql(&amp;#34;kalacloud&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/32.jpg"
width="780"
height="436"
srcset="https://www.jiangdaoli.cf/p/test/32_hu47217341b9871beaf84079c07f12c825_29010_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/32_hu47217341b9871beaf84079c07f12c825_29010_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="429px"
>&lt;/p>
&lt;h1 id="如何在-postman-中使用控制台">如何在 Postman 中使用控制台&lt;/h1>
&lt;p>控制台可以非常直观的显示当前调用的一系列信息，我们可以在「菜单 → view → Show Postman Console」或者点击 Postman 左下角的「Console」图标，打开控制台。&lt;/p>
&lt;p>我们可以在 Tests 测试脚本中加入 &lt;code>console.log&lt;/code> 来显示我们需要在控制台显示的调用信息。&lt;/p>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/33.jpg"
width="780"
height="806"
srcset="https://www.jiangdaoli.cf/p/test/33_hu3eb35c9a910b1043d5774817ccd70a83_40816_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/33_hu3eb35c9a910b1043d5774817ccd70a83_40816_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="96"
data-flex-basis="232px"
>&lt;/p>
&lt;p>如上图，我们在 Test 脚本中加入以下代码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">console.log(&amp;#34;本次测试 id 值为&amp;#34;,pm.variables.get(&amp;#34;kalacloud_id&amp;#34;));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以显示隐藏在变量下面的具体变量值，方便我们测试时，进行相应的判断。&lt;/p>
&lt;h1 id="如何使用-runner-批量执行测试批量更换变量测试">如何使用 Runner 批量执行测试，批量更换变量测试&lt;/h1>
&lt;p>当我们有一组 API 且这一组之间相互关联的关系，使用手动测试效率非常低。这时，我们就要用到 Postman 的批量执行（Runner）功能，Runner 不仅可以批量执行 API 调用，还可以批量更换变量。掌握此方法，大幅度提升 API 测试效率。&lt;/p>
&lt;p>打开你的 Postman ，跟随本教程一起操作一遍吧。&lt;/p>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/34.jpg"
width="774"
height="440"
srcset="https://www.jiangdaoli.cf/p/test/34_huc68b28d4dd28a1b9f68975346c2e3229_24137_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/34_huc68b28d4dd28a1b9f68975346c2e3229_24137_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="422px"
>&lt;/p>
&lt;ul>
&lt;li>本次批量 API 测试，我们先导入一个 CSV 文件，文件中包含四组等待新建的用户信息，将 CSV 文件导入 Runner 中待用。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/35.jpg"
width="780"
height="289"
srcset="https://www.jiangdaoli.cf/p/test/35_hu6db0e7d82d4a94829a1ccc5dcf1f991c_18048_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/35_hu6db0e7d82d4a94829a1ccc5dcf1f991c_18048_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="269"
data-flex-basis="647px"
>&lt;/p>
&lt;ul>
&lt;li>新建 POST 调用页，在 Body 里写上创建用户所需信息，所有值使用变量替代，这些变量将从 CSV 中读取。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/36.jpg"
width="780"
height="259"
srcset="https://www.jiangdaoli.cf/p/test/36_hu2f772fbf6a2081459114be20dbd25c84_17021_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/36_hu2f772fbf6a2081459114be20dbd25c84_17021_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="301"
data-flex-basis="722px"
>&lt;/p>
&lt;ul>
&lt;li>新建 GET 调用页，使用 &lt;code>email&lt;/code> 作为查询 KEY 进行查询，如果上一步 POST 执行成功，那么 GET 就能成功查询到新建用户对应的 email，查询到表示 POST 创建成功。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/37.jpg"
width="780"
height="266"
srcset="https://www.jiangdaoli.cf/p/test/37_hu0865bc58493d116029bf159eebe8e135_19034_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/37_hu0865bc58493d116029bf159eebe8e135_19034_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="293"
data-flex-basis="703px"
>&lt;/p>
&lt;ul>
&lt;li>在「卡拉云_kalacloud.com_批量测试」这个集合中设置 Tests 中设置全局断言，每当一个调用执行完毕时，进行 Tests 一次判断。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">pm.test(&amp;#34;Status code is 200&amp;#34;, function () {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pm.response.to.have.status(200);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/38.jpg"
width="780"
height="376"
srcset="https://www.jiangdaoli.cf/p/test/38_hu3bcce46d83762d09643fbe1c6435ef67_21759_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/38_hu3bcce46d83762d09643fbe1c6435ef67_21759_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="207"
data-flex-basis="497px"
>&lt;/p>
&lt;ul>
&lt;li>打开「卡拉云_kalacloud.com_批量测试」合集的「Run Collection」的设置页&lt;/li>
&lt;li>Iterations：这是测试组，我们 CSV 文件中有 4 组测试条目&lt;/li>
&lt;li>Delay：延迟，一般填 2000 毫秒，太密集的请求，容易被服务器拒绝&lt;/li>
&lt;li>Data：这里选择我们刚刚的 CSV 文件：kalacloud_users.csv 导入测试数据&lt;/li>
&lt;li>点击 RUN 蓝色按钮开始执行批量测试&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/test/39.jpg"
width="780"
height="677"
srcset="https://www.jiangdaoli.cf/p/test/39_hu55767ebc7fa9a347e2a26860b454c923_28108_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/test/39_hu55767ebc7fa9a347e2a26860b454c923_28108_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="115"
data-flex-basis="276px"
>&lt;/p>
&lt;p>从上图可以看到，Postman 按顺序提交了 POST 请求和 GET 请求，并连续测试了从 CSV 文件导入的 4 组数据。一键批量测试，相当高效。&lt;/p></description></item><item><title>flutter基础备忘录</title><link>https://www.jiangdaoli.cf/p/flutter/</link><pubDate>Sat, 30 Apr 2022 00:00:00 +0000</pubDate><guid>https://www.jiangdaoli.cf/p/flutter/</guid><description>&lt;h1 id="安装">安装&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>配置 JDK、安装配置Android Studio&lt;/p>
&lt;/li>
&lt;li>
&lt;p>flutter(windows)
&lt;a class="link" href="https://docs.flutter.dev/get-started/install/windows" target="_blank" rel="noopener"
>flutter安装&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">set PUB_HOSTED_URL=&amp;#34;https://mirrors.tuna.tsinghua.edu.cn/dart-pub&amp;#34; #配置国内镜像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set FLUTTER_STORAGE_BASE_URL=&amp;#34;https://mirrors.tuna.tsinghua.edu.cn/flutter&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>安装遇坑&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">//配置build.gradle(project:android)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">allprojects {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> repositories {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> google()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> jcenter()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> maven { url &amp;#34;https://storage.googleapis.com/download.flutter.io&amp;#34; }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="更新">更新&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">flutter upgrade
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">flutter doctor
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="创建-flutter-项目">创建 Flutter 项目&lt;/h1>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/flutter/1.jpg"
width="1317"
height="897"
srcset="https://www.jiangdaoli.cf/p/flutter/1_huff754efb2c95fdbde3860fe3076e21cb_150899_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/flutter/1_huff754efb2c95fdbde3860fe3076e21cb_150899_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="352px"
>&lt;/p>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/flutter/2.jpg"
width="1279"
height="903"
srcset="https://www.jiangdaoli.cf/p/flutter/2_hucf4eac703c21ad8fecf4d8297c8a4909_91996_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/flutter/2_hucf4eac703c21ad8fecf4d8297c8a4909_91996_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="339px"
>&lt;/p>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/flutter/3.jpg"
width="1234"
height="897"
srcset="https://www.jiangdaoli.cf/p/flutter/3_huf5771a4378f496e08370a30e6aea2a57_268237_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/flutter/3_huf5771a4378f496e08370a30e6aea2a57_268237_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="330px"
>&lt;/p>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/flutter/4.jpg"
width="1738"
height="975"
srcset="https://www.jiangdaoli.cf/p/flutter/4_hu749a3588d7f75328d4ce8cfeb04f0fea_609718_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/flutter/4_hu749a3588d7f75328d4ce8cfeb04f0fea_609718_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="427px"
>&lt;/p>
&lt;h1 id="dart">dart&lt;/h1>
&lt;h2 id="变量">变量&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># 创建一个变量并将其初始化
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var name = &amp;#39;Bob&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 指定类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">String name = &amp;#39;Bob&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 如果对象(name)不局限于单一的类型(String),可以将其指定为 Object（或 dynamic）类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Object name = &amp;#39;Bob&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">? 可空类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">int? a=123; // int? 表示a是一个可空类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">! 类型断言
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">a! // a不为空
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="常量">常量&lt;/h2>
&lt;ul>
&lt;li>final 和 const&lt;/li>
&lt;/ul>
&lt;p>final在被使用到的时候才会进行初始化, 如果只是被定义, 而没有被使用到, 那么这个变量一直没有被初始化 (&amp;lsquo;懒加载&amp;rsquo;); 而const修饰的变量, 一经定义就会在编译期间对其进行初始化&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">final name = &amp;#39;Bob&amp;#39;; // Without a type annotation
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">final String nickname = &amp;#39;Bobby&amp;#39;;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="类型">类型&lt;/h2>
&lt;ul>
&lt;li>内置类型&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">int 整数值
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">double 浮点数字
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">String 字符串
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bool 布尔类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">List 集合类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set 无序集合
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Map 字典型
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="不常用类型">不常用类型&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://dart.dev/guides/language/language-tour#enumerated-types" target="_blank" rel="noopener"
>enum&lt;/a>　　枚举类型,用于表示固定数量的常量值。在switch语句中运行良好。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Object　对象类型，允许任何类型。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://dart.dev/guides/language/effective-dart/design#avoid-using-dynamic-unless-you-want-to-disable-static-checking" target="_blank" rel="noopener"
>dynamic&lt;/a>　动态类型，不仅接受所有对象，而且还允许所有操作&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">void main() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dynamic foo=&amp;#34;bar&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(foo);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> foo=123;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(foo);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Set　无序集合，主要的功能就是去除数组重复内容&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">void main(){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> List myList=[&amp;#39;香蕉&amp;#39;,&amp;#39;苹果&amp;#39;,&amp;#39;西瓜&amp;#39;,&amp;#39;香蕉&amp;#39;,&amp;#39;苹果&amp;#39;,&amp;#39;香蕉&amp;#39;,&amp;#39;苹果&amp;#39;];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var s=new Set();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s.addAll(myList);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(s);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(s.toList());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="几乎不用的类型">几乎不用的类型&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>runes 暴露了字符串的 Unicode 代码点（Unicode 为每个字母、数字和符号定义了一个唯一的数值）。例如，用于表情符号，(😆) 是&lt;code>\u{1f606}&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Symbol 表示标识符，例如&lt;code>#&lt;/code>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">void main() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert(Symbol(&amp;#39;bar&amp;#39;)==#bar);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="类型转换">类型转换&lt;/h3>
&lt;ul>
&lt;li>String -&amp;gt; int&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">myint = int.parse(myString);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>String -&amp;gt; double&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">mydouble = double.parse(myString);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>int -&amp;gt; String&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">myString = myint.toString();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>double -&amp;gt; String&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">myString = 3.14159.toStringAsFixed(2);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// myString = &amp;#39;3.14&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>将 list &lt;a class="link" href="https://dart.dev/codelabs/iterables#mapping" target="_blank" rel="noopener"
>映射&lt;/a>为 widget List&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">MyList.map((item) =&amp;gt; SomeWidget(item)).toList();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="函数">函数&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">bool isNoble(int atomicNumber) { // bool:返回类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return _nobleGases[atomicNumber] != null;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>箭头函数 =&amp;gt;&lt;/p>
&lt;p>&lt;code>=&amp;gt; expr&lt;/code> 是 &lt;code>{ return expr; }&lt;/code>的简写&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="参数">参数&lt;/h3>
&lt;ul>
&lt;li>命名参数（可传可不传）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"> String printUserInfo(String username, {int age = 0, String sex = &amp;#39;男&amp;#39;}) {//行参，用大括号
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (age != 0) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return &amp;#34;姓名:$username---性别:$sex--年龄:$age&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return &amp;#34;姓名:$username---性别:$sex--年龄保密&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(printUserInfo(&amp;#39;张三&amp;#39;)); //实参
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(printUserInfo(&amp;#39;张三&amp;#39;, age: 20, sex: &amp;#39;未知&amp;#39;)); //实参,命名参数的实参必须传入参数名age: sex:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>位置参数（可传可不传）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"> String printUserInfo(String username,[String sex=&amp;#39;男&amp;#39;,int age=0]){ //行参，用中括号
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(age!=0){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return &amp;#34;姓名:$username---性别:$sex--年龄:$age&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return &amp;#34;姓名:$username---性别:$sex--年龄保密&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(printUserInfo(&amp;#39;张三&amp;#39;)); //实参
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(printUserInfo(&amp;#39;小李&amp;#39;,&amp;#39;女&amp;#39;,30)); //实参
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="运算符">运算符&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>算术运算符&lt;/p>
&lt;p>&lt;code>+&lt;/code>(加)　　&lt;code>–&lt;/code>(减)　　&lt;code>-&lt;/code>(负)　　&lt;code>*&lt;/code>(乘)　　&lt;code>/&lt;/code>(除)　　&lt;code>~/&lt;/code>(取整)　　&lt;code>%&lt;/code>（取余）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>关系运算符&lt;/p>
&lt;p>&lt;code>==&lt;/code>　　&lt;code>！=&lt;/code>　　&lt;code>&amp;gt;&lt;/code>　　&lt;code>&amp;lt;&lt;/code>　　&lt;code>&amp;gt;=&lt;/code>　　&lt;code>&amp;lt;=&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>逻辑运算符&lt;/p>
&lt;p>&lt;code>!&lt;/code>(取反)　　&lt;code>&amp;amp;&amp;amp;&lt;/code>(与)　　&lt;code>||&lt;/code>(或)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>赋值运算符&lt;/p>
&lt;p>基础赋值运算符　　&lt;code>=&lt;/code>　　&lt;code>??=&lt;/code>(为 null 的变量赋值)&lt;/p>
&lt;p>复合赋值运算符　　&lt;code>+=&lt;/code>　　&lt;code>-=&lt;/code>　　&lt;code>*=&lt;/code>　　&lt;code>/=&lt;/code>　　&lt;code>%=&lt;/code>　　&lt;code>~/=&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其他运算符
&lt;code>()&lt;/code>　　使用一个方法&lt;/p>
&lt;p>&lt;code>[]&lt;/code>　　访问 List&lt;/p>
&lt;p>&lt;code>?[]&lt;/code>　　访问 List,左侧可以为null&lt;/p>
&lt;p>&lt;code>.&lt;/code>　　访问成员&lt;/p>
&lt;p>&lt;code>?.&lt;/code>　　访问成员,左侧可以为null&lt;/p>
&lt;/li>
&lt;li>
&lt;p>if-else的表达式：&lt;/p>
&lt;ul>
&lt;li>condition &lt;code>?&lt;/code> expr1 &lt;code>:&lt;/code> expr2&lt;/li>
&lt;/ul>
&lt;p>如果条件为真，则计算expr1（并返回其值）；否则，计算并返回expr2的值。&lt;/p>
&lt;ul>
&lt;li>expr1 &lt;code>??&lt;/code> expr2&lt;/li>
&lt;/ul>
&lt;p>如果expr1不为 null，则返回其值；否则，计算并返回expr2的值。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="类">类&lt;/h2>
&lt;h3 id="方法">方法&lt;/h3>
&lt;h4 id="实例方法">实例方法&lt;/h4>
&lt;p>实例方法可以访问实例变量和 this&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">import &amp;#39;dart:math&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class Point {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final double x;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final double y;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Point(this.x, this.y);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> double distanceTo(Point other) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var dx = x - other.x;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var dy = y - other.y;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return sqrt(dx * dx + dy * dy);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="get-和-set">get 和 set&lt;/h5>
&lt;p>特殊方法:实例对象的每一个属性都有一个隐式的 Getter 方法，非 final 属性还会有一个 Setter 方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class Rectangle {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> double left, top, width, height;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Rectangle(this.left, this.top, this.width, this.height);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Define two calculated properties: right and bottom.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> double get right =&amp;gt; left + width;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> set right(double value) =&amp;gt; left = value - width;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> double get bottom =&amp;gt; top + height;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> set bottom(double value) =&amp;gt; top = value - height;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="抽象类抽象方法">抽象类、抽象方法&lt;/h4>
&lt;p>抽象类常用于定义接口，抽象类常常会包含抽象方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">abstract class Doer {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Define instance variables and methods...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void doSomething(); // Define an abstract method.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class EffectiveDoer extends Doer {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void doSomething() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Provide an implementation, so the method is not abstract here...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="构造函数">构造函数&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>实例化类时会被自动触发&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一般用于初始化操作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>没有返回值&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="普通构造函数">普通构造函数&lt;/h4>
&lt;p>构造函数方法名和类名相同&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class Point {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> num x, y;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Point(num x, num y) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // There&amp;#39;s a better way to do this, stay tuned.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.x = x;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.y = y;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>简化形式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class Point {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> num x, y;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Syntactic sugar for setting x and y
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // before the constructor body runs.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Point(this.x, this.y);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="命名构造函数">命名构造函数&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class Point {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> num x, y;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Point(this.x, this.y);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 命名构造函数，新增代码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Point.origin() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> x = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> y = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>请记住，命名构造函数不可继承，如果子类想要有 和父类一样的命名构造函数，那就写个同名的（通常也会在子类的命名构造函数里，调用父类的同名命名构造函数）&lt;/p>
&lt;h4 id="调用父类构造函数">调用父类构造函数&lt;/h4>
&lt;p>如果你的类，继承于父类，那么子类的构造函数，势必要调用父类的构造函数，这时候就要分两种情况：&lt;/p>
&lt;ul>
&lt;li>Dart语言帮你调用父类的无参数构造函数&lt;/li>
&lt;li>代码中显式调用父类的构造函数&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>默认调用调用父类的无参数构造函数&lt;/li>
&lt;/ol>
&lt;p>如果你没有显式调用父类的构造函数，并且父类有一个无参数构造函数，那么Dart就会帮你在子类的构造函数方法体的最前面，调用父类的无参数构造函数。当然，后面我们会说道，构造函数分成好几部分来初始化成员变量，调用的顺序如下：&lt;/p>
&lt;ul>
&lt;li>初始化列表&lt;/li>
&lt;li>父类的无参数构造函数&lt;/li>
&lt;li>子类的无参数构造函数&lt;/li>
&lt;/ul>
&lt;p>当然，如果父类没有无参数构造函数，或者Dart这种隐式调用无法满足你的要求，那就需要显式调用父类的构造函数了&lt;/p>
&lt;ol start="2">
&lt;li>显式调用父类构造函数&lt;/li>
&lt;/ol>
&lt;p>显式调用父类构造函数，应该在初始化列表中完成&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class Person {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> String firstName;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Person.fromJson(Map data) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#39;in Person&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class Employee extends Person {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Person does not have a default constructor;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // you must call super.fromJson(data).
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Employee.fromJson(Map data) : super.fromJson(data) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#39;in Employee&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">main() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var emp = new Employee.fromJson({});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Prints:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // in Person
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // in Employee
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>初始化列表就是构造函数名的冒号后面，打括号前面的部分。&lt;/p>
&lt;h4 id="初始化列表">初始化列表&lt;/h4>
&lt;p>初始化列表的执行顺序，在整个构造函数的最前面，它除了可以调用父类的构造函数，还可以在构造函数方法体之前，初始化一些成员变量。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">// Initializer list sets instance variables before
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// the constructor body runs.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Point.fromJson(Map&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">String&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="na">num&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> json)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> : x = json[&amp;#39;x&amp;#39;],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> y = json[&amp;#39;y&amp;#39;] {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#39;In Point.fromJson(): ($x, $y)&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>尤其是初始化那些final修饰的成员变量时，初始化列表很有用，因为在方法体中，不能给final修饰的成员变量赋值，因为&lt;strong>在执行方法体的时候，final修饰的成员变量已经不能变了&lt;/strong>。这个地方很多人犯错。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">import &amp;#39;dart:math&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class Point {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final num x;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final num y;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final num distanceFromOrigin;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Point(x, y)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> : x = x,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> y = y,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> distanceFromOrigin = sqrt(x * x + y * y);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">main() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var p = new Point(2, 3);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(p.distanceFromOrigin);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="重定向构造函数">重定向构造函数&lt;/h4>
&lt;p>定义构造函数的时候，除了一个普通构造函数，还可以有若干命名构造函数，这些构造函数之间，有时候会有一些相同的逻辑，如果分别书写在各个构造函数中，会有些多余，所以构造函数可以传递。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class Point {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> num x, y;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // The main constructor for this class.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Point(this.x, this.y);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Delegates to the main constructor.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Point.alongXAxis(num x) : this(x, 0);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传递构造函数，没有方法体，会在初始化列表中，调用另一个构造函数。&lt;/p>
&lt;h4 id="常量构造函数">常量构造函数&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class ImmutablePoint {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> static final ImmutablePoint origin =
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> const ImmutablePoint(0, 0);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final num x, y;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> const ImmutablePoint(this.x, this.y);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你的类，创建的对象永远不会改变，你可以在编译期就创建这个常量实例，并且定义一个常量构造函数，并且确保所有的成员变量都是final的。&lt;/p>
&lt;h4 id="工厂构造函数">工厂构造函数&lt;/h4>
&lt;p>有时候可能有一种需求，并不需要每次都创建新的类实例，而是每一种情况，只需要一个实例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class Logger {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final String name;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bool mute = false;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // _cache is library-private, thanks to
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // the _ in front of its name.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> static final Map&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">String&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="na">Logger&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> _cache =
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">String&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="na">Logger&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>{};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> factory Logger(String name) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (_cache.containsKey(name)) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return _cache[name];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final logger = Logger._internal(name);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> _cache[name] = logger;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return logger;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Logger._internal(this.name);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void log(String msg) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (!mute) print(msg);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">main() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var logger = Logger(&amp;#39;UI&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> logger.log(&amp;#39;Button clicked&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>工厂构造函数，没有权利访问this&lt;/p>
&lt;/blockquote>
&lt;p>上例的意思是，类中又一个静态缓存&lt;code>_cache&lt;/code>保存着一些Logger类实例，创建实例时，给工厂构造函数传递的name，如果在缓存中已经存在，就用缓存中现成的实例，如果没有，就新建一个实例，并且也放到缓存中。&lt;/p>
&lt;p>如此这般，我们可以创建名字为UI / SYS / API 等的实例，然后在debug的时候，如果设置名字为UI的Logger实例的mute为true，就不会打印UI相关的log，而不影响其它两个名字的log。&lt;/p>
&lt;h3 id="扩展类和扩展方法">扩展类和扩展方法&lt;/h3>
&lt;h4 id="扩展类">扩展类&lt;/h4>
&lt;p>&lt;img src="https://www.jiangdaoli.cf/p/flutter/5.jpg"
width="1233"
height="641"
srcset="https://www.jiangdaoli.cf/p/flutter/5_hu572765b138c1f7437a19c6cea77cac10_136967_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/flutter/5_hu572765b138c1f7437a19c6cea77cac10_136967_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="461px"
>&lt;/p>
&lt;h4 id="扩展方法">扩展方法&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">extension FancyNum on num {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> num plus(num other) =&amp;gt; this + other;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> num times(num other) =&amp;gt; this * other;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">print(5.plus(3)); // Equal to &amp;#34;5 + 3&amp;#34;.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">print(5.times(8)); // Equal to &amp;#34;5 * 8&amp;#34;.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">print(2.plus(1).times(3)); // Equal to &amp;#34;(2 + 1) * 3&amp;#34;.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="泛型">泛型&lt;/h2>
&lt;p>泛型常用于需要要求类型安全的情况，可以减少代码重复。
&lt;img src="https://www.jiangdaoli.cf/p/flutter/fanxing.jpg"
width="1122"
height="449"
srcset="https://www.jiangdaoli.cf/p/flutter/fanxing_hu6d02cad28d2736a6e42659b75fd941e7_62001_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/flutter/fanxing_hu6d02cad28d2736a6e42659b75fd941e7_62001_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="249"
data-flex-basis="599px"
>&lt;/p>
&lt;p>@override 注解来表示你重写了一个成员
&lt;img src="https://www.jiangdaoli.cf/p/flutter/override.jpg"
width="1173"
height="659"
srcset="https://www.jiangdaoli.cf/p/flutter/override_huf3ae0c28a53250be072483b49c760168_125842_480x0_resize_q75_box.jpg 480w, https://www.jiangdaoli.cf/p/flutter/override_huf3ae0c28a53250be072483b49c760168_125842_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="427px"
>&lt;/p>
&lt;h2 id="异步">异步&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">// 示例：等待返回自己ip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import &amp;#39;package:http/http.dart&amp;#39;as http;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import &amp;#39;dart:convert&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Future getIPAddress() async {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final url =&amp;#39;https://httpbin.org/ip&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var response = await http.get(Uri.parse(url));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> String ip = json.decode(response.body)[&amp;#39;origin&amp;#39;];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ip;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">void main() async {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final ip = await getIPAddress();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(ip);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="flutter">flutter&lt;/h1>
&lt;p>double width = MediaQuery.of(context).size.width; 屏幕宽度&lt;/p>
&lt;p>double height = MediaQuery.of(context).size.height; 屏幕高度&lt;/p></description></item><item><title>freenom自动续期（废弃）</title><link>https://www.jiangdaoli.cf/p/freenom/</link><pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.jiangdaoli.cf/p/freenom/</guid><description>&lt;h1 id="本github-actions方法已于2022-07-15完全被封请去仓库看文档">本github actions方法已于2022-07-15完全被封，请去仓库看文档&lt;/h1>
&lt;h1 id="freenom自动续期">freenom自动续期&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>Fork &lt;a class="link" href="https://github.com/luolongfei/freenom" target="_blank" rel="noopener"
>luolongfei大佬的freenom库&lt;/a>，再添加以下workflow：
&lt;details class="spoiler " id="spoiler-0">
&lt;summary>“点击展开完整代码”&lt;/summary>
&lt;p>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># 1、Fork 本仓库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 2、在你 Fork 的本仓库下的 Settings &amp;gt; Secrets 画面追加以下几个 secret 变量：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># FREENOM_USERNAME、FREENOM_PASSWORD、MULTIPLE_ACCOUNTS、MAIL_USERNAME、MAIL_PASSWORD、TO、MAIL_ENABLE、TELEGRAM_CHAT_ID、
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># TELEGRAM_BOT_TOKEN、TELEGRAM_BOT_ENABLE、NOTICE_FREQ
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># （注：此处列出了所有可用变量，你只用追加你需要用到的变量，变量的具体含义请参考本项目的 .env 文件中的说明，一般情况下，.env 文件中的某些
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 项存在默认值，如果默认值满足你的需求则可不追加到 Secrets，它们会保持默认）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 下面定时任务中的时间是世界时间，每天 10:00（本示例已改为2:00） 执行，由于创建虚拟环境会消耗时间，故任务会延迟 30 秒左右执行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># @Author of yml configuration file: RouRouX &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">https:&lt;/span>&lt;span class="err">//&lt;/span>&lt;span class="na">github&lt;/span>&lt;span class="err">.&lt;/span>&lt;span class="na">com&lt;/span>&lt;span class="err">/&lt;/span>&lt;span class="na">RouRouX&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="err">&amp;amp;&lt;/span> mybsdc &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">mybsdc&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="na">gmail&lt;/span>&lt;span class="err">.&lt;/span>&lt;span class="na">com&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">###### end 说明 ######
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">name: Run it on action
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">on:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> branches:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> schedule:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - cron: 00 02 * * *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> workflow_dispatch:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">jobs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run-it:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> runs-on: ubuntu-18.04
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name: Run it on action
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> steps:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Checkout master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: actions/checkout@v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Setup PHP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: shivammathur/setup-php@v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> php-version: &amp;#39;7.2&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Setting
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run: |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo &amp;#39;Renew freenom domain name automatically.&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo &amp;#39;@Author of yml configuration file: RouRouX &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">https:&lt;/span>&lt;span class="err">//&lt;/span>&lt;span class="na">github&lt;/span>&lt;span class="err">.&lt;/span>&lt;span class="na">com&lt;/span>&lt;span class="err">/&lt;/span>&lt;span class="na">RouRouX&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="err">&amp;amp;&lt;/span> mybsdc &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">mybsdc&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="na">gmail&lt;/span>&lt;span class="err">.&lt;/span>&lt;span class="na">com&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo &amp;#39;@Url: https://github.com/luolongfei/freenom&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cp .env.example .env
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [[ (&amp;#39;${{ secrets.FREENOM_USERNAME }}&amp;#39; == &amp;#39;&amp;#39; || &amp;#39;${{ secrets.FREENOM_PASSWORD }}&amp;#39; == &amp;#39;&amp;#39;) &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> &amp;#39;${{ secrets.MULTIPLE_ACCOUNTS }}&amp;#39; == &amp;#39;&amp;#39; ]]; then echo &amp;#39;你在 Github 的当前项目的 Settings &amp;gt; Secrets 画面没有设置任何与账户信息相关的 secret 值，无法正常运行，请添加新的 secret 值，设置 FREENOM_USERNAME 与 FREENOM_PASSWORD，或者设置 MULTIPLE_ACCOUNTS，以及 .env 文件中其它必要项，各项的具体含义与格式参考本项目 .env 文件中的说明。&amp;#39;; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.FREENOM_USERNAME }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^FREENOM_USERNAME=.*$/FREENOM_USERNAME=&amp;#39;${{ secrets.FREENOM_USERNAME }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.FREENOM_PASSWORD }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^FREENOM_PASSWORD=.*$/FREENOM_PASSWORD=&amp;#39;${{ secrets.FREENOM_PASSWORD }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.MULTIPLE_ACCOUNTS }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^MULTIPLE_ACCOUNTS=.*$/MULTIPLE_ACCOUNTS=&amp;#39;${{ secrets.MULTIPLE_ACCOUNTS }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.MAIL_USERNAME }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^MAIL_USERNAME=.*$/MAIL_USERNAME=&amp;#39;${{ secrets.MAIL_USERNAME }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.MAIL_PASSWORD }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^MAIL_PASSWORD=.*$/MAIL_PASSWORD=&amp;#39;${{ secrets.MAIL_PASSWORD }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.TO }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^TO=.*$/TO=&amp;#39;${{ secrets.TO }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.MAIL_ENABLE }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^MAIL_ENABLE=.*$/MAIL_ENABLE=&amp;#39;${{ secrets.MAIL_ENABLE }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.TELEGRAM_CHAT_ID }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^TELEGRAM_CHAT_ID=.*$/TELEGRAM_CHAT_ID=&amp;#39;${{ secrets.TELEGRAM_CHAT_ID }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.TELEGRAM_BOT_TOKEN }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^TELEGRAM_BOT_TOKEN=.*$/TELEGRAM_BOT_TOKEN=&amp;#39;${{ secrets.TELEGRAM_BOT_TOKEN }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.TELEGRAM_BOT_ENABLE }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^TELEGRAM_BOT_ENABLE=.*$/TELEGRAM_BOT_ENABLE=&amp;#39;${{ secrets.TELEGRAM_BOT_ENABLE }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.NOTICE_FREQ }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^NOTICE_FREQ=.*$/NOTICE_FREQ=&amp;#39;${{ secrets.NOTICE_FREQ }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sed -i &amp;#34;s/^ON_GITHUB_ACTIONS=.*$/ON_GITHUB_ACTIONS=true/&amp;#34; .env
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Run
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run: |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> php run
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 以下为保活所需step
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: curl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> id: enable_workflow
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> env:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> REST_TOKEN: ${{ secrets.REST_TOKEN }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> API_ADDRESS: ${{ secrets.API_ADDRESS }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run: |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo &amp;#34;Enable Workflow Start...&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> curl -X PUT -H &amp;#34;Authorization: token $REST_TOKEN&amp;#34; &amp;#34;$API_ADDRESS&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo &amp;#34;Finished&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/details>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在你 Fork 的本仓库下的 &lt;code>Settings&lt;/code> -&amp;gt; &lt;code>Secrets&lt;/code> 页面追加以下几个&lt;code>secret&lt;/code>秘密环境变量&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">变量名&lt;/th>
&lt;th style="text-align:center">含义&lt;/th>
&lt;th style="text-align:center">默认值&lt;/th>
&lt;th style="text-align:center">是否必须&lt;/th>
&lt;th style="text-align:center">备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">FREENOM_USERNAME&lt;/td>
&lt;td style="text-align:center">freenom 账户&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">只支持邮箱账户，不支持也不打算支持第三方社交账户登录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">FREENOM_PASSWORD&lt;/td>
&lt;td style="text-align:center">freenom 密码&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">某些特殊字符可能需要转义，在&lt;code>Github actions&lt;/code>环境，请在除字母数字以外的字符前加上“\”，否则可能无法正确读取密码，此举是防止某些字符在&lt;code>shell&lt;/code>命令行被解析，举个例子，比如我密码是&lt;code>fei.,:!~@#$%^&amp;amp;*?233-_abcd^$$&lt;/code>，那么写到秘密变量时就应写为&lt;code>fei\.\,\:\!\~\@\#\$\%\^\&amp;amp;\*\?233\-\_abcd\^\$\$&lt;/code>。而在普通&lt;code>VPS&lt;/code>环境，则只用在密码中的“#”或单双引号前加“\”，请参考&lt;code>.env.example&lt;/code>文件内的注释，应该没人会设置那么变态的密码吧&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">MULTIPLE_ACCOUNTS&lt;/td>
&lt;td style="text-align:center">多账户支持&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">多个账户和密码的格式必须是“&lt;code>&amp;lt;账户1&amp;gt;@&amp;lt;密码1&amp;gt;|&amp;lt;账户2&amp;gt;@&amp;lt;密码2&amp;gt;|&amp;lt;账户3&amp;gt;@&amp;lt;密码3&amp;gt;&lt;/code>”，如果设置了多账户，上面的&lt;code>FREENOM_USERNAME&lt;/code>和&lt;code>FREENOM_PASSWORD&lt;/code>可不设置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">MAIL_USERNAME&lt;/td>
&lt;td style="text-align:center">机器人邮箱账户&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">支持&lt;code>Gmail&lt;/code>、&lt;code>QQ邮箱&lt;/code>以及&lt;code>163邮箱&lt;/code>，尽可能使用&lt;code>163邮箱&lt;/code>或者&lt;code>QQ邮箱&lt;/code>，而非之前推荐的&lt;code>Gmail&lt;/code>。因为谷歌的安全机制，每次在新设备登录 &lt;code>Gmail&lt;/code> 都会先被限制，需要手动解除限制才行，而&lt;code>Github Actions&lt;/code>每次创建的虚拟环境都会分配一个新的设备&lt;code>IP&lt;/code>，相当于每次都是从新设备登录&lt;code>Gmail&lt;/code>，而我们不可能每次都去手动为&lt;code>Gmail&lt;/code>解除登录限制，所以这种机制会导致无法发出通知邮件。具体的配置方法参考「 &lt;a class="link" href="#--%e9%85%8d%e7%bd%ae%e5%8f%91%e4%bf%a1%e9%82%ae%e7%ae%b1" >配置发信邮箱&lt;/a> 」&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">MAIL_PASSWORD&lt;/td>
&lt;td style="text-align:center">机器人邮箱密码&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">&lt;code>Gmail&lt;/code>填密码，&lt;code>QQ邮箱&lt;/code>或&lt;code>163邮箱&lt;/code>填授权码&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">TO&lt;/td>
&lt;td style="text-align:center">接收通知的邮箱&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">你自己最常用的邮箱，推荐使用&lt;code>QQ邮箱&lt;/code>，用来接收机器人邮箱发出的域名相关邮件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">MAIL_ENABLE&lt;/td>
&lt;td style="text-align:center">是否启用邮件推送功能&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">&lt;code>true&lt;/code>：启用&lt;!-- raw HTML omitted -->&lt;code>false&lt;/code>：不启用&lt;!-- raw HTML omitted -->默认启用，如果设为&lt;code>false&lt;/code>，不启用邮件推送功能，则上面的&lt;code>MAIL_USERNAME&lt;/code>、&lt;code>MAIL_PASSWORD&lt;/code>、&lt;code>TO&lt;/code>变量变为非必须，可不设置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">TELEGRAM_CHAT_ID&lt;/td>
&lt;td style="text-align:center">你的&lt;code>chat_id&lt;/code>&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">通过发送&lt;code>/start&lt;/code>给&lt;code>@userinfobot&lt;/code>可以获取自己的&lt;code>id&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">TELEGRAM_BOT_TOKEN&lt;/td>
&lt;td style="text-align:center">你的&lt;code>Telegram bot&lt;/code>的&lt;code>token&lt;/code>&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">TELEGRAM_BOT_ENABLE&lt;/td>
&lt;td style="text-align:center">是否启用&lt;code>Telegram Bot&lt;/code>推送功能&lt;/td>
&lt;td style="text-align:center">false&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">&lt;code>true&lt;/code>：启用&lt;!-- raw HTML omitted -->&lt;code>false&lt;/code>：不启用&lt;!-- raw HTML omitted -->默认不启用，如果设为&lt;code>true&lt;/code>，则必须设置上面的&lt;code>TELEGRAM_CHAT_ID&lt;/code>和&lt;code>TELEGRAM_BOT_TOKEN&lt;/code>变量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">NOTICE_FREQ&lt;/td>
&lt;td style="text-align:center">通知频率&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">&lt;code>0&lt;/code>：仅当有续期操作的时候&lt;!-- raw HTML omitted -->&lt;code>1&lt;/code>：每次执行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">REST_TOKEN&lt;/td>
&lt;td style="text-align:center">如后文所示&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">保活所需&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">API_ADDRESS&lt;/td>
&lt;td style="text-align:center">如后文所示&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">保活所需&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ol>
&lt;p>（注：你只用关注上面表格中的必须项，非必须项可不设置，将保持默认值。更多相关变量的含义、格式以及默认值，请参考本项目的&lt;code>.env.example&lt;/code>文件内的注释）&lt;/p>
&lt;ol start="3">
&lt;li>启用 Actions ，完成。&lt;/li>
&lt;/ol>
&lt;h1 id="保活">保活&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>Fork &lt;a class="link" href="https://github.com/zhzhzhy/Workflow-Keep-Alive" target="_blank" rel="noopener"
>zhzhzhy/Workflow-Keep-Alive库&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建 sercets ：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">变量名&lt;/th>
&lt;th style="text-align:center">值&lt;/th>
&lt;th style="text-align:center">备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">REST_TOKEN&lt;/td>
&lt;td style="text-align:center">个人访问令牌（Personal access tokens）&lt;/td>
&lt;td style="text-align:center">个人资料照片-&amp;gt;设置-&amp;gt;Developer settings&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">API_ADDRESS&lt;/td>
&lt;td style="text-align:center">&lt;code>https://api.github.com/repos/{owner}/{target-repo}/actions/workflows/enable_workflow/enable&lt;/code>&lt;/td>
&lt;td style="text-align:center">修改{owner}/{target-repo}&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>运行 github action。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>相互唤醒，再次在目标 repo 的工作流程中执行上述步骤，并添加所需 Github Action step（此步骤已标注请回看）。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="附">附&lt;/h1>
&lt;p>&lt;a class="link" href="https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions" target="_blank" rel="noopener"
>github workflow 语法文档&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://crontab.guru/examples.html" target="_blank" rel="noopener"
>修改定时任务 —— Cron示例&lt;/a>&lt;/p></description></item><item><title>docker自动化部署</title><link>https://www.jiangdaoli.cf/p/auto-deploy/</link><pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.jiangdaoli.cf/p/auto-deploy/</guid><description>&lt;h1 id="actions部署前后端分离项目">actions部署前后端分离项目&lt;/h1>
&lt;p>&lt;a class="link" href="https://dev.to/2nit/rails-cd-with-docker-github-actions-and-vps-4hi4" target="_blank" rel="noopener"
>参考文章&lt;/a>&lt;/p>
&lt;p>本文使用github actions + docker compose部署到github container registry（这适用于中小型项目） 附：&lt;a class="link" href="https://cloudonaut.io/amazon-ecr-vs-docker-hub-vs-github-container-registry/" target="_blank" rel="noopener"
>容器注册平台对比&lt;/a>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>准备好你的dockerfile，如无docker和docker-compose基础请先看文档和&lt;a class="link" href="https://jiangdaoli.cf/p/docker-compose/" target="_blank" rel="noopener"
>前文&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用github actions
&lt;details class="spoiler " id="spoiler-0">
&lt;summary>“点击展开示例actions”&lt;/summary>
&lt;p>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">on:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> branches:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> workflow_dispatch:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">env:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> REGISTRY: ghcr.io
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> IMAGE_NAME: ${{ github.repository }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">jobs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> build-and-push-image:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> runs-on: ubuntu-latest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> permissions:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> contents: read
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> packages: write
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> strategy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> matrix:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> node: [ &amp;#39;14&amp;#39; ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> steps:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Checkout repository
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: actions/checkout@v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Setup node
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: actions/setup-node@v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> node-version: ${{ matrix.node }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: npm install
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run: |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cd web #进入前端dockerfile目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> npm install
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Set up QEMU
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: docker/setup-qemu-action@v1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - uses: docker/setup-buildx-action@v1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> id: builder1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - uses: docker/setup-buildx-action@v1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> id: builder2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Log in to the Container registry
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: docker/login-action@v1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> registry: ${{ env.REGISTRY }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> username: ${{ github.actor }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> password: ${{ secrets.GITHUB_TOKEN }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 用于消毒标签，tag是此动作的重要功能之一，本示例没使用，请见文档
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Extract metadata (tags, labels) for Docker
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> id: meta1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: docker/metadata-action@v3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> images: ghcr.io/username/server # images地址
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Extract metadata (tags, labels) for Docker
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> id: meta2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: docker/metadata-action@v3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> images: ghcr.io/username/web # images地址
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Build and push Docker image 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: docker/build-push-action@v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> builder: ${{ steps.builder1.outputs.name }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> context: ./server # 服务端dockerfile目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> file: ./server/Dockerfile # 服务端dockerfile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push: true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> tags: ${{ steps.meta1.outputs.tags }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> labels: ${{ steps.meta1.outputs.labels }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cache-from: type=gha
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cache-to: type=gha,mode=max
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Build and push Docker image 2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: docker/build-push-action@v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> builder: ${{ steps.builder2.outputs.name }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> context: ./web # 前端dockerfile目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> file: ./web/Dockerfile # 前端dockerfile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push: true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> tags: ${{ steps.meta2.outputs.tags }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> labels: ${{ steps.meta2.outputs.labels }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cache-from: type=gha
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cache-to: type=gha,mode=max
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> deploy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> runs-on: ubuntu-latest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> needs: build-and-push-image
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> steps:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - uses: appleboy/ssh-action@master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> host: ${{ secrets.host }} #仓库设置中添加Secrets：HOST
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> username: root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> password: ${{ secrets.PASSWORD }} #仓库设置中添加Secrets：PASSWORD
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> port: 22
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> script: |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo $CR_PAT | docker login ghcr.io -u USERNAME --password-stdin # 用户名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> docker-compose -f docker-compose-nginx.yaml -f docker-compose-app.yaml pull # docker-compose名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> docker-compose -f docker-compose-nginx.yaml -f docker-compose-app.yaml up -d # docker-compose名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 此actions许多参数由github自动提供，无需添加，需修改的均已注释
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/details>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在服务器上完成&lt;a class="link" href="https://docs.github.com/cn/packages/working-with-a-github-packages-registry/working-with-the-container-registry#" target="_blank" rel="noopener"
>向 Container registry 验证&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>具体操作：打开/etc/profile&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">export CR_PAT=YOUR_TOKEN
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">source /etc/profile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo $CR_PAT | docker login ghcr.io -u USERNAME --password-stdin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>新建docker-compose-app.yaml和代理容器docker-compose-nginx.yaml,&lt;a class="link" href="https://github.com/buchdag/letsencrypt-nginx-proxy-companion-compose" target="_blank" rel="noopener"
>示例文档&lt;/a>。如有不懂，请多看几遍&lt;a class="link" href="https://github.com/nginx-proxy/acme-companion/tree/main/docs" target="_blank" rel="noopener"
>acme-companion&lt;/a>和示例文档。最后，&lt;a class="link" href="https://github.com/nginx-proxy/nginx-proxy/discussions/1755" target="_blank" rel="noopener"
>Issues中的实例&lt;/a>可能会有帮助。&lt;/li>
&lt;/ol></description></item><item><title>docker和docker-compose</title><link>https://www.jiangdaoli.cf/p/docker-compose/</link><pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate><guid>https://www.jiangdaoli.cf/p/docker-compose/</guid><description>&lt;h1 id="docker">docker&lt;/h1>
&lt;p>&lt;a class="link" href="https://docs.docker.com/engine/install/debian/" target="_blank" rel="noopener"
>安装docker&lt;/a>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">#更新apt包索引
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sudo apt-get update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#安装包以允许apt通过 HTTPS 使用存储库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sudo apt-get install \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ca-certificates \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> curl \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> gnupg \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> lsb-release
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#添加Docker官方的GPG密钥
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#设置稳定存储库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $(lsb_release -cs) stable&amp;#34; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#安装最新版本的Docker Engine和containerd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sudo apt-get update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sudo apt-get install docker-ce docker-ce-cli containerd.io
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#hello-world 映像验证
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sudo docker run hello-world
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># 使用脚本安装
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> curl -fsSL https://get.docker.com -o get-docker.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sudo sh get-docker.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="dockerfile">Dockerfile&lt;/h2>
&lt;details class="spoiler " id="spoiler-0">
&lt;summary>“点击展开go语言示例”&lt;/summary>
&lt;p>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># 这个参考示例来自李文周大佬的bluebell项目
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">FROM golang:alpine AS builder
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 为我们的镜像设置必要的环境变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ENV GO111MODULE=on \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CGO_ENABLED=0 \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> GOOS=linux \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> GOARCH=amd64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 移动到工作目录：/build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WORKDIR /build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 复制项目中的 go.mod 和 go.sum文件并下载依赖信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY go.mod .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY go.sum .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN go mod download
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 将代码复制到容器中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY . .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 将我们的代码编译成二进制可执行文件 bluebell_app
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN go build -o bluebell_app .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">###################
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 接下来创建一个小镜像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">###################
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">FROM debian:stretch-slim
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY ./wait-for.sh /
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY ./templates /templates
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY ./static /static
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY ./conf /conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 从builder镜像中把/dist/app 拷贝到当前目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY --from=builder /build/bluebell_app /
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN set -eux; \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> apt-get update; \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> apt-get install -y \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --no-install-recommends \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> netcat; \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> chmod 755 wait-for.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 声明服务端口
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">EXPOSE 8084
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 需要运行的命令
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#ENTRYPOINT [&amp;#34;/bluebell_app&amp;#34;, &amp;#34;conf/config.yaml&amp;#34;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/details>
&lt;h2 id="基础知识参考">基础知识参考&lt;/h2>
&lt;p>以下简介节选自&lt;a class="link" href="https://docs.docker.com/get-started/" target="_blank" rel="noopener"
>docker文档&lt;/a>：&lt;/p>
&lt;ol>
&lt;li>**卷（volumes）**存储在由 Docker管理的主机文件系统（在 Linux 上的/var/lib/docker/volumes/ ）。卷完全由 Docker 管理，非 Docker 进程不应修改文件系统的这一部分。卷是在 Docker 中持久化数据的最佳方式。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># 将当前目录的相对路径挂载到/app目录中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> volumes:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - ./:/app
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="docker-compose">docker compose&lt;/h1>
&lt;p>&lt;a class="link" href="https://docs.docker.com/compose/install/compose-plugin/#install-the-plugin-manually" target="_blank" rel="noopener"
>安装docker compose&lt;/a>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">#单独下载和安装 Compose，不装Docker CLI
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#下载 Docker Compose 的当前稳定版本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -SL https://github.com/docker/compose/releases/download/v2.7.0/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#对二进制文件应用可执行权限
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo chmod +x /usr/local/bin/docker-compose
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#测试安装
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker compose version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># 脚本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -fsSL https://get.docker.com -o get-docker.sh &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo sh get-docker.sh &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker -v &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -SL https://github.com/docker/compose/releases/download/v2.7.0/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo chmod +x /usr/local/bin/docker-compose &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker compose version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="docker-composeyaml">docker-compose.yaml&lt;/h2>
&lt;details class="spoiler " id="spoiler-1">
&lt;summary>“点击展开和折叠代码”&lt;/summary>
&lt;p>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">version: &amp;#39;3.7&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">services:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mysql5.7:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 镜像名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> image: &amp;#39;mysql:5.7&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 容器名(以后的控制都通过这个)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> container_name: mysql5.7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 重启策略
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> restart: always
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> environment:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 时区上海
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> TZ: Asia/Shanghai
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # root 密码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> MYSQL_ROOT_PASSWORD: root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 初始化数据库(后续的初始化sql会在这个库执行)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> MYSQL_DATABASE: nacos_config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 初始化用户(不能是root 会报错, 后续需要给新用户赋予权限)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> MYSQL_USER: nacos
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 用户密码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> MYSQL_PASSWORD: nacos
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 映射端口
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ports:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 3306:3306
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> volumes:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 数据挂载
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #- /root/mysql/data/:/var/lib/mysql/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 配置挂载
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #- /root/mysql/conf/:/etc/mysql/conf.d/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 初始化目录挂载，注意此处我只跑了这个挂载，只是为了说明其他配置不应该数据初始化
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - /root/mysql/init/:/docker-entrypoint-initdb.d/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> command:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 将mysql8.0默认密码策略 修改为 原先 策略 (mysql8.0对其默认策略做了更改 会导致密码无法匹配)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --default-authentication-plugin=mysql_native_password
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --character-set-server=utf8mb4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --collation-server=utf8mb4_general_ci
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --explicit_defaults_for_timestamp=true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --lower_case_table_names=1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> server:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> image: ghcr.io/USERNAME/server:master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> container_name: server
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ports:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 8082:8082
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> expose:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &amp;#34;8082&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> depends_on:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - mysql5.7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> restart: always
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> volumes:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &amp;#39;./data:/data/&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> web:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> image: ghcr.io/USERNAME/web:master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> container_name: web
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> depends_on:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - server
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> restart: always
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ports:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 3000:3000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> expose:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &amp;#34;3000&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> environment:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - VIRTUAL_HOST=example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - VIRTUAL_PORT=3000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - LETSENCRYPT_HOST=example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - LETSENCRYPT_EMAIL=mail@example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proxy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name: nginx-proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> external: true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/details>
&lt;details class="spoiler " id="spoiler-2">
&lt;summary>“点击展开nginx-proxy代码”&lt;/summary>
&lt;p>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">version: &amp;#39;3&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">services:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> nginx-proxy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> image: jwilder/nginx-proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> container_name: nginx-proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ports:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &amp;#34;80:80&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &amp;#34;443:443&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> volumes:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - conf:/etc/nginx/conf.d
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - vhost:/etc/nginx/vhost.d
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - html:/usr/share/nginx/html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - dhparam:/etc/nginx/dhparam
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - certs:/etc/nginx/certs:ro
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - /var/run/docker.sock:/tmp/docker.sock:ro
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> restart: always
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - nginxproxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> labels:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &amp;#34;com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> letsencrypt:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> image: jrcs/letsencrypt-nginx-proxy-companion
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> container_name: nginx-proxy-le
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> depends_on:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - nginx-proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> volumes:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - vhost:/etc/nginx/vhost.d
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - html:/usr/share/nginx/html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - dhparam:/etc/nginx/dhparam:ro
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - certs:/etc/nginx/certs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - acme:/etc/acme.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - /var/run/docker.sock:/var/run/docker.sock:ro
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ##################
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 由于LETSENCRYPT证书速率限制，可使用ZeroSSL
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 注释掉web服务environment中的：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - LETSENCRYPT_HOST=example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - LETSENCRYPT_EMAIL=mail@example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 需添加如下environment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> environment:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - ACME_CA_URI=https://acme.zerossl.com/v2/DV90
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - ZEROSSL_API_KEY=
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ##################
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> restart: always
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - nginxproxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">volumes:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> conf:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> vhost:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> html:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dhparam:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> certs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> acme:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> nginxproxy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name: nginx-proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> external: true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/details>
&lt;h2 id="基础知识参考-1">基础知识参考&lt;/h2>
&lt;p>以下简介节选自&lt;a class="link" href="https://docs.docker.com/compose/" target="_blank" rel="noopener"
>docker compose文档&lt;/a>：&lt;/p>
&lt;ol>
&lt;li>Compose 中的&lt;strong>网络&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;p>Compose默认为您的应用程序设置单个网络。服务中的每个容器都加入默认网络。例如，假设您的应用程序是在一个名为myapp的目录，运行docker-compose up时会创建一个名为myapp_default的网络，服务中使用web和db的配置创建的容器会以web和db的名字加入myapp_default。&lt;/p>
&lt;p>但是，当你使用&lt;a class="link" href="https://docs.docker.com/compose/compose-file/compose-file-v3/#external-1" target="_blank" rel="noopener"
>external&lt;/a>（外部网络，例如你有2个或多个docker-compose.yml）时，Compose不会创建默认网络，你必须使用&lt;code>docker network create Your_Nerwork&lt;/code>预先创建网络。&lt;/p>
&lt;p>注意：文档中示例写法错误，会&lt;a class="link" href="https://github.com/docker/compose-cli/issues/1856" target="_blank" rel="noopener"
>报错&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proxy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> external:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name: nginx-proxy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>应写为:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proxy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name: nginx-proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> external: true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="常用命令">常用命令&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">Docker命令
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker run [可选参数] imagename #新建并启动容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　--name = &amp;#34;name&amp;#34; 容器取名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　-it 交互模式进入容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　-d 后台启动容器 注意：一般后台启动要有前台的应用，否则很可能被守护程序杀掉
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　-p ip:主机端口:容器端口 #指定端口映射
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">查看：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker search xxx #搜索dockerhub-镜像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker images [-a][-q] #列出本地主机的-镜像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -a 显示所有信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -q 显示所有id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker ps [-a][-q] #显示当前正在运行的容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　-a 显示当前运行的容器，并显示历史运行过的容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　-q 只显示运行容器的编号
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker logs 容器id #日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker top 容器id #查看容器中进程信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker inspect 容器id #查看容器的详细信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">操作：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker pull 镜像：版本号 #拉取-镜像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker start 容器id #启动容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker restart 容器id #重启容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker stop 容器id #停止容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker kill 容器id #强制停止容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker rm 容器id #删除停止状态的容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker rm -f 容器id #强制删除容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker rmi -f xxx #删除单个-镜像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker rmi -f $(docker images -aq) #删除所有-镜像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker stop $(docker ps -a -q) #停止所有容器运行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker rm $(docker ps -a -q) #删除所有容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker network rm $(docker network ls -q) #删除所有network
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker system prune --all --force --volumes #删除一切
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">exit 容器停止并退出
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ctrl+p+q 容器不停止退出
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker exec -it mysql /bin/bash #进入正在执行的mysql容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker exec -it 容器名 /bin/sh #进入alpine制作的容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker exec -it 容器名 -c &amp;#34;apt-get update &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> apt-get install -y vim&amp;#34; #进入容器安装vim编辑器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker exec -it 容器名 -c &amp;#34; apk add --update vim&amp;#34; #进入alpine容器安装vim编辑器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker inspect -f &amp;#39;{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}&amp;#39; [container_name_or_id] #查看容器ip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">从容器拷贝内容到主机：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker cp 容器id: 路径 主机目的路径 #此处不必进入容器，容器可以是关闭的。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">Docker-compose命令
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose up -d # 在后台启动服务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose pull # 拉取
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> docker-compose -f docker-compose.yml up -d # 指定docker-compose.yml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> docker-compose -f docker-compose.yml pull # 指定docker-compose.yml，后同
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">查看：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose ps # 查看正在运行中的容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose ps -a # 查看所有编排容器，包括已停止的容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose images # 列出Compose文件构建的镜像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose logs # 查看日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose logs [serviceName] # 查看某服务的日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose logs -f [serviceName] # 查看某服务的实时日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">操作：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose stop # 停止服务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose start # 启动已经存在的服务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose pause [serviceName] # 暂停服务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose unpause [serviceName] # 恢复服务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose restart [serviceName] # 重启服务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose rm # 删除所有（停止状态的）服务容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose down # 删除所有容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose down --remove-orphans # 删除orphans容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose config -q # 验证（docker-compose.yml）文件配置，当配置正确时，不输出任何内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose exec --index=1 [serviceName] sh # 进入某服务的第1个容器执行命令
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose --help # 帮助
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>常用命令</title><link>https://www.jiangdaoli.cf/p/command/</link><pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.jiangdaoli.cf/p/command/</guid><description>&lt;h1 id="git">git&lt;/h1>
&lt;h2 id="git命令">git命令&lt;/h2>
&lt;p>&lt;a class="link" href="https://training.github.com/downloads/zh_CN/github-git-cheat-sheet/" target="_blank" rel="noopener"
>官网git备忘表&lt;/a>比各种教程都易看&lt;/p>
&lt;h2 id="push脚本">push脚本&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">#!/bin/bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -e &amp;#34;\033[0;32mDeploying updates to GitHub...\033[0m&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Add changes to git.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git add .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Commit changes.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">msg=&amp;#34;rebuilding site `date`&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">if [ $# -eq 1 ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> then msg=&amp;#34;$1&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit -m &amp;#34;$msg&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Push source and build repos.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push origin master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="公开仓库fork为私有仓库">公开仓库fork为私有仓库&lt;/h2>
&lt;ol>
&lt;li>fork一个公开仓库&lt;/li>
&lt;li>使用github&lt;a class="link" href="https://github.com/new/import" target="_blank" rel="noopener"
>导入功能&lt;/a>，写fork仓库的地址，并创建私有仓库&lt;/li>
&lt;li>本地操作&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">git clone git@github.com:&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">your_username&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>/&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">your_repo&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>.git #克隆到本地
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote add upstream git@github.com:&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">original_owner&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>/&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">original_repo&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>.git #添加上游(源)仓库用于更新
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote set-url --push upstream DISABLE #禁用推送到上游(源)仓库
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>&lt;code>git remote -v&lt;/code>可以看到：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">origin git@github.com:&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">your_username&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>/&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">your_repo&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>.git (fetch)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">origin git@github.com:&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">your_username&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>/&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">your_repo&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>.git (push)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">upstream git@github.com:&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">original_owner&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>/&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">original_repo&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>.git (fetch)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">upstream DISABLE (push)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>拉取更新&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">git fetch upstream
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git merge upstream/master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="linux">Linux&lt;/h1>
&lt;h2 id="文件">文件&lt;/h2>
&lt;p>i 键可以对文件进行修改， &lt;code>Esc + :+ wq&lt;/code> 退出并保存修改之后的文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">sudo gedit ~/File //编辑
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">touch File //新建文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir -p Folder/a/src //新建文件夹
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo rm -r Folder //删除文件夹
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装包">安装包&lt;/h2>
&lt;ul>
&lt;li>apt&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">sudo apt update &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> apt upgrade //更新
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dpkg --list //显示所有软件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install 包名 //安装
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get remove 包名 //卸载不删除配置文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get --purge remove 包名 //软件及其配置文件一并删除
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>snap&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">sudo snap list //列出已经安装的snap包
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo snap install &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">snap&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> //安装一个snap包
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo snap refresh &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">snap&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> //更新一个snap包，如果后面不加包的名字更新所有的snap包
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo snap remove &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">snap&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> //删除一个snap包
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="端口">端口&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">sudo apt-get install lsof //安装lsof
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lsof -i:80 //查看80端口
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kill -9 pid //强制杀进程
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="命令">命令&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">local #用于声明局部变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">source
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">systemctl stop service # 停止一个服务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">systemctl daemon-reload # 重载所有修改过的配置文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">systemctl enable #将服务设置为每次开机启动
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">set -eux #用于脚本开头设置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#-e 　若指令传回值不等于0，则立即退出shell。0表示没有错误
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#-u 　当执行时使用到未定义过的变量，则显示错误信息。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#-x 　执行指令后，会先显示该指令及所下的参数。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="grep-sedawk">grep 、sed、awk&lt;/h3>
&lt;p>&lt;strong>grep 、sed、awk被称为linux中的&amp;quot;三剑客&amp;quot;。&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>grep 更适合单纯的查找或匹配文本&lt;/li>
&lt;li>sed 更适合编辑匹配到的文本&lt;/li>
&lt;li>awk 更适合格式化文本，对文本进行较复杂格式处理&lt;/li>
&lt;/ul>
&lt;hr>
&lt;link href="https://fonts.googleapis.com/css?family=font-family" rel="stylesheet" type="text/css">
&lt;div style="font-family:'font-family'; font-size:25px; font-style:normal; font-weight:bold; color: blue">
sed
&lt;/div>
&lt;p>&lt;code>sed&lt;/code>是&lt;code>stream editor&lt;/code>的简称，也就是流编辑器。它一次处理一行内容，处理时，把当前处理的行存储在临时缓冲区中，称为&lt;code>&amp;quot;pattern space&amp;quot;&lt;/code>，接着用&lt;code>sed&lt;/code>命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。&lt;/p>
&lt;ul>
&lt;li>语法&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">sed [option] &amp;#39;command&amp;#39; fileName
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>选项&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>-n&lt;/code> 使用安静&lt;code>silent&lt;/code>模式。在一般&lt;code>sed&lt;/code>的用法中，所有来自&lt;code>stdin&lt;/code>的内容一般都会被列出到屏幕上。但如果加上&lt;code>-n&lt;/code>参数后，则只有经过&lt;code>sed&lt;/code>特殊处理的那一行(或者动作)才会被列出来&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-e&lt;/code> 直接在指令列模式上进行 &lt;code>sed&lt;/code> 的动作编辑&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-f&lt;/code> 直接将 &lt;code>sed&lt;/code> 的动作写在一个文件内，&lt;code>-f filename&lt;/code>则可以执行&lt;code>filename&lt;/code>内的&lt;code>sed&lt;/code>命令&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-r&lt;/code> 让&lt;code>sed&lt;/code>命令支持扩展的正则表达式(默认是基础正则表达式)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-i&lt;/code> 直接修改读取的文件内容，而不是由屏幕输出&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>命令&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>a\&lt;/code>：追加行，&lt;code>a\&lt;/code>的后面跟上字符串&lt;code>s&lt;/code>(多行字符串可以用&lt;code>\n&lt;/code>分隔)，则会在当前选择的行的后面都加上字符串&lt;code>s&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>c\&lt;/code>：替换行，&lt;code>c\&lt;/code>后面跟上字符串&lt;code>s&lt;/code>(多行字符串可以用&lt;code>\n&lt;/code>分隔)，则会将当前选中的行替换成字符串&lt;code>s&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>i\&lt;/code>：插入行，&lt;code>i\&lt;/code>后面跟上字符串&lt;code>s&lt;/code>(多行字符串可以用&lt;code>\n&lt;/code>分隔)，则会在当前选中的行的前面都插入字符串&lt;code>s&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>d&lt;/code>：删除行&lt;code>delete&lt;/code>，该命令会将当前选中的行删除&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>p&lt;/code>：打印&lt;code>print&lt;/code>，该命令会打印当前选择的行到屏幕上&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>y&lt;/code>：替换字符，通常&lt;code>y&lt;/code>命令的用法是这样的：&lt;code>y/Source-chars/Dest-chars/&lt;/code>，分割字符&lt;code>/&lt;/code>可以用任意单字符代替，用&lt;code>Dest-chars&lt;/code>中对应位置的字符替换掉&lt;code>Soutce-chars&lt;/code>中对应位置的字符&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>s&lt;/code>：替换字符串，通常&lt;code>s&lt;/code>命令的用法是这样的：&lt;code>1,$s/Regexp/Replacement/Flags&lt;/code>，分隔字符&lt;code>/&lt;/code>可以用其他任意单字符代替，用&lt;code>Replacement&lt;/code>替换掉匹配字符串&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>替换选项&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>\digit&lt;/code>：&lt;code>Replacement&lt;/code>中可含有后向引用中的&lt;code>\digit&lt;/code>(&lt;code>digit&lt;/code>是&lt;code>1&lt;/code>至&lt;code>9&lt;/code>)，引用前面定义的子表达&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>&amp;amp;&lt;/code>：代表模版空间中的整个匹配部分&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>\L&lt;/code>：将在其后的替换部分转换成小写字母，直到发现一个&lt;code>\U&lt;/code>或&lt;code>\E&lt;/code>，&lt;code>GNU&lt;/code>扩展功能&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>\l&lt;/code>：将下一个字符转换成小写字母，&lt;code>GNU&lt;/code>扩展功能&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>\U&lt;/code>：将在其后的替换部分转换成大写字母，直到发现一个&lt;code>\L&lt;/code>或&lt;code>\E&lt;/code>，&lt;code>GNU&lt;/code>扩展功能&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>\u&lt;/code>：将下一个字符转换成大写字母，&lt;code>GNU&lt;/code>扩展功能&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>\E&lt;/code>：停止由&lt;code>\L&lt;/code>或&lt;code>\U&lt;/code>指示开始的大小写转换，&lt;code>GNU&lt;/code>扩展功能&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>标志选项&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>g&lt;/code>：将用&lt;code>Replacement&lt;/code>替换模版空间中所有匹配&lt;code>Regexp&lt;/code>的部分，则不仅仅是第一个匹配部分&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>digit&lt;/code>：只用&lt;code>Replacement&lt;/code>替换模版空间中第&lt;code>digit&lt;/code>(&lt;code>digit&lt;/code>是&lt;code>1&lt;/code>至&lt;code>9&lt;/code>)个匹配&lt;code>Regexp&lt;/code>的部分&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>p&lt;/code>：若发生了替换操作，指示显示模版空间中新的数据&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>w file-name&lt;/code>：若发生了替换操作，指示将模版空间中新的数据写入指定的文件&lt;code>file-name&lt;/code>中&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>i&lt;/code>：表示进行&lt;code>Regexp&lt;/code>匹配时，是不区分大小写字母的&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;link href="https://fonts.googleapis.com/css?family=font-family" rel="stylesheet" type="text/css">
&lt;div style="font-family:'font-family'; font-size:18px; font-style:normal; font-weight:bold; color: green">
示例
&lt;/div>
&lt;ul>
&lt;li>&lt;code>a&lt;/code>命令&lt;/li>
&lt;/ul>
&lt;p>&lt;code>sed '1,$a\add one' test.txt&lt;/code> 从第一行到最后一行所有行后追加&lt;code>&amp;quot;add one&amp;quot;&lt;/code>字符串行&lt;/p>
&lt;p>&lt;code>sed '/first/a\add one' test.txt&lt;/code> 在匹配到&lt;code>first&lt;/code>行追加&lt;code>&amp;quot;add one&amp;quot;&lt;/code>字符串行&lt;/p>
&lt;ul>
&lt;li>&lt;code>i&lt;/code>命令&lt;/li>
&lt;/ul>
&lt;p>与&lt;code>a&lt;/code>命令类似，只不过在匹配的行前面插入字符串行，不举例了。&lt;/p>
&lt;ul>
&lt;li>&lt;code>c&lt;/code>命令&lt;/li>
&lt;/ul>
&lt;p>&lt;code>sed '1,$c\add one' test.txt&lt;/code> 从第一行到最后一行所有行替换为&lt;code>&amp;quot;add one&amp;quot;&lt;/code>字符串行&lt;/p>
&lt;p>&lt;code>sed '/first/c\add one' test.txt&lt;/code> 将匹配到&lt;code>first&lt;/code>行替换为&lt;code>&amp;quot;add one&amp;quot;&lt;/code>字符串行&lt;/p>
&lt;ul>
&lt;li>&lt;code>d&lt;/code>命令&lt;/li>
&lt;/ul>
&lt;p>&lt;code>sed '4,$d' test.txt&lt;/code> 从第四行到最后一行全部删除&lt;/p>
&lt;ul>
&lt;li>&lt;code>p&lt;/code>命令&lt;/li>
&lt;/ul>
&lt;p>&lt;code>sed -n '/^first.*end$/p' test.txt&lt;/code> 以&lt;code>first&lt;/code>开头&lt;code>end&lt;/code>结尾的所有行全部打印&lt;/p>
&lt;ul>
&lt;li>&lt;code>s&lt;/code>命令&lt;/li>
&lt;/ul>
&lt;p>&lt;code>sed 's/line/text/g' test.txt&lt;/code> 将所有行的&lt;code>line&lt;/code>替换为&lt;code>text&lt;/code>，&lt;code>g&lt;/code>代表全局选项，没有&lt;code>g&lt;/code>只替换所有行的第一个匹配项&lt;/p>
&lt;p>&lt;code>sed '/^first.*end$/s/line/text/g' test.txt&lt;/code> 匹配以&lt;code>first&lt;/code>开头&lt;code>end&lt;/code>结尾的所有行，然后将&lt;code>line&lt;/code>全部替换为&lt;code>text&lt;/code>&lt;/p>
&lt;p>&lt;code>sed 's/\(.*\)line$/\1/g' test.txt&lt;/code> 本例中的&lt;code>\(\)&lt;/code>中包裹的内容表示正则表达式的第&lt;code>n&lt;/code>部分，&lt;code>.*&lt;/code>表示任意字符串，所以此例相当于删除所有行末的&lt;code>line&lt;/code>&lt;/p>
&lt;h1 id="脚本语言备忘录">脚本语言备忘录&lt;/h1>
&lt;h2 id="shell">shell&lt;/h2>
&lt;p>&lt;a class="link" href="http://www.imooc.com/wiki/shelllesson/shellvariable.html" target="_blank" rel="noopener"
>原文地址&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">name=&amp;#34;MyName&amp;#34; //定义变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo $name 或 echo ${name} //使用变量
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">val=`expr 2 + 2` #expr 是一款表达式计算工具，使用它能完成表达式的求值操作。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo &amp;#34;Total value : $val&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">2&amp;gt;&lt;span class="err">&amp;amp;&lt;/span>1 把&amp;#34;标准错误输出&amp;#34;重定向到&amp;#34;标准输出&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>特殊变量&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>$0&lt;/td>
&lt;td>当前脚本的文件名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$n&lt;/td>
&lt;td>传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$#&lt;/td>
&lt;td>传递给脚本或函数的参数个数总和&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$*&lt;/td>
&lt;td>传递给脚本或函数的所有参数，当被双引号 &amp;quot; &amp;quot; 包含时，所有的位置参数被看做一个字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$@&lt;/td>
&lt;td>传递给脚本或函数的所有参数，当被双引号 &amp;quot; &amp;quot; 包含时，每个位置参数被看做独立的字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$?&lt;/td>
&lt;td>上个命令的退出状态，或函数的返回值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$$&lt;/td>
&lt;td>当前 Shell 进程 ID。对于 Shell 脚本，就是这些脚本所在的进程 ID。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>测试符&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>-eq，equal&lt;/td>
&lt;td>等于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-ne，not equal&lt;/td>
&lt;td>不等于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-gt，greater than&lt;/td>
&lt;td>大于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-lt，lesser than&lt;/td>
&lt;td>小于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-ge，greater or equal&lt;/td>
&lt;td>大于或等于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-le，lesser or equal&lt;/td>
&lt;td>小于或等于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-z&lt;/td>
&lt;td>检测字符串长度是否为 0，为 0 返回 true。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-e&lt;/td>
&lt;td>file 检测文件（包括目录）是否存在，如果是，则返回 true。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-f&lt;/td>
&lt;td>file 检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>待续&lt;/p>
&lt;h2 id="python">python&lt;/h2>
&lt;h3 id="os">os&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>函数名&lt;/strong>&lt;/th>
&lt;th>&lt;strong>使用方法&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>getcwd()&lt;/td>
&lt;td>返回当前工作目录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>chdir(path)&lt;/td>
&lt;td>改变工作目录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>listdir(path=&amp;rsquo;.')&lt;/td>
&lt;td>列举指定目录中的文件名（&amp;rsquo;.&amp;lsquo;表示当前目录，&amp;rsquo;..&amp;lsquo;表示上一级目录）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mkdir(path)&lt;/td>
&lt;td>创建单层目录，如该目录已存在抛出异常&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>makedirs(path)&lt;/td>
&lt;td>递归创建多层目录，如该目录已存在抛出异常，注意：&amp;lsquo;E:\a\b&amp;rsquo;和&amp;rsquo;E:\a\c&amp;rsquo;并不会冲突&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>remove(path)&lt;/td>
&lt;td>删除文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>rmdir(path)&lt;/td>
&lt;td>删除单层目录，如该目录非空则抛出异常&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>removedirs(path)&lt;/td>
&lt;td>递归删除目录，从子目录到父目录逐层尝试删除，遇到目录非空则抛出异常&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>rename(old, new)&lt;/td>
&lt;td>将文件old重命名为new&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>system(command)&lt;/td>
&lt;td>运行系统的shell命令&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>walk(top)&lt;/td>
&lt;td>遍历top路径以下所有的子目录，返回一个三元组：(路径, [包含目录], [包含文件])【具体实现方案请看：第30讲课后作业^_^】&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;em>以下是支持路径操作中常用到的一些定义，支持所有平台&lt;/em>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>os.curdir&lt;/td>
&lt;td>指代当前目录（&amp;rsquo;.&amp;rsquo;）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>os.pardir&lt;/td>
&lt;td>指代上一级目录（&amp;rsquo;..&amp;rsquo;）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>os.sep&lt;/td>
&lt;td>输出操作系统特定的路径分隔符（Win下为&amp;rsquo;\&amp;rsquo;，Linux下为&amp;rsquo;/&amp;rsquo;）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>os.linesep&lt;/td>
&lt;td>当前平台使用的行终止符（Win下为&amp;rsquo;\r\n&amp;rsquo;，Linux下为&amp;rsquo;\n&amp;rsquo;）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>os.name&lt;/td>
&lt;td>指代当前使用的操作系统（包括：&amp;lsquo;posix&amp;rsquo;, &amp;rsquo;nt&amp;rsquo;, &amp;lsquo;mac&amp;rsquo;, &amp;lsquo;os2&amp;rsquo;, &amp;lsquo;ce&amp;rsquo;, &amp;lsquo;java&amp;rsquo;）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="ospath">os.path&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>函数名&lt;/strong>&lt;/th>
&lt;th>&lt;strong>使用方法&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>basename(path)&lt;/td>
&lt;td>去掉目录路径，单独返回文件名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dirname(path)&lt;/td>
&lt;td>去掉文件名，单独返回目录路径&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>join(path1[, path2[, &amp;hellip;]])&lt;/td>
&lt;td>将path1, path2各部分组合成一个路径名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>split(path)&lt;/td>
&lt;td>分割文件名与路径，返回(f_path, f_name)元组。如果完全使用目录，它也会将最后一个目录作为文件名分离，且不会判断文件或者目录是否存在&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>splitext(path)&lt;/td>
&lt;td>分离文件名与扩展名，返回(f_name, f_extension)元组&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>getsize(file)&lt;/td>
&lt;td>返回指定文件的尺寸，单位是字节&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>getatime(file)&lt;/td>
&lt;td>返回指定文件最近的访问时间（浮点型秒数，可用time模块的gmtime()或localtime()函数换算）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>getctime(file)&lt;/td>
&lt;td>返回指定文件的创建时间（浮点型秒数，可用time模块的gmtime()或localtime()函数换算）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>getmtime(file)&lt;/td>
&lt;td>返回指定文件最新的修改时间（浮点型秒数，可用time模块的gmtime()或localtime()函数换算）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;em>以下为函数返回 True 或 False&lt;/em>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>exists(path)&lt;/td>
&lt;td>判断指定路径（目录或文件）是否存在&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>isabs(path)&lt;/td>
&lt;td>判断指定路径是否为绝对路径&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>isdir(path)&lt;/td>
&lt;td>判断指定路径是否存在且是一个目录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>isfile(path)&lt;/td>
&lt;td>判断指定路径是否存在且是一个文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>islink(path)&lt;/td>
&lt;td>判断指定路径是否存在且是一个符号链接&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ismount(path)&lt;/td>
&lt;td>判断指定路径是否存在且是一个挂载点&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>samefile(path1, paht2)&lt;/td>
&lt;td>判断path1和path2两个路径是否指向同一个文件&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="beautifulsoup">BeautifulSoup&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">from bs4 import BeautifulSoup
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">html_doc = &amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>The Dormouse&amp;#39;s story&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;title&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">b&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>The Dormouse&amp;#39;s story&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">b&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;story&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Once upon a time there were three little sisters; and their names were
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;http://example.com/elsie&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sister&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;link1&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Elsie&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;http://example.com/lacie&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sister&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;link2&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Lacie&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> and
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;http://example.com/tillie&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sister&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;link3&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Tillie&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">and they lived at the bottom of a well.&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;story&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>...&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 解析html_doc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">soup = BeautifulSoup(html_doc, &amp;#39;html.parser&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 按照标准的缩进格式的结构输出
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">print(soup.prettify())
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># 选择元素
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">soup.title # &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>The Dormouse&amp;#39;s story&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 提取节点信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">soup.title.name # u&amp;#39;title&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 获取属性
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">soup.p.attrs # {&amp;#39;class&amp;#39;: [&amp;#39;title&amp;#39;], &amp;#39;name&amp;#39;: &amp;#39;Dormouse&amp;#39;}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">soup.p.attrs[&amp;#39;name&amp;#39;] # Dormouse
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 获取文本内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">soup.title.get_text()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">soup.title.string # u&amp;#39;The Dormouse&amp;#39;s story&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 获取第一个P标签下的所有的子节点，children是迭代器，所以用list转换
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">list(soup.p.children)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">list(soup.p.children)[0].text
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 获取前面和后面的兄弟节点，迭代器类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">list(soup.a.next_siblings)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">list(soup.a.previous_siblings)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 找到标签
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">soup.find(&amp;#39;title&amp;#39;) # &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>The Dormouse&amp;#39;s story&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 找到所有&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>标签的链接
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">for link in soup.find_all(&amp;#39;a&amp;#39;):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(link.get(&amp;#39;href&amp;#39;))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># CSS选择器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">html_doc = &amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;panel&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;panel-heading&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h4&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Hello World&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h4&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;panel-body&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ul&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;list&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;list-1&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;element&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Foo&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;element&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Bar&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;element&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Jay&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ul&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;list list-samll&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;list-2&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;element&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Foo&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;element&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Bar&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;element&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Jay&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">print(soup.select(&amp;#39;.panel-heading&amp;#39;)) # 获取class为panel-heading的节点
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">print(soup.select(&amp;#39;ul li&amp;#39;)) # 获取ul下的li节点
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">print(soup.select(&amp;#39;#list-2 li&amp;#39;)) # 获取id为list-2下的li节点
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">print(soup.select(&amp;#39;ul&amp;#39;)) # 获取所有的ul节点
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="正则表达式">正则表达式&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">字符&lt;/th>
&lt;th style="text-align:center">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">\&lt;/td>
&lt;td style="text-align:center">将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“&lt;code>n&lt;/code>”匹配字符“&lt;code>n&lt;/code>”。“&lt;code>\n&lt;/code>”匹配一个换行符。串行“&lt;code>\\&lt;/code>”匹配“&lt;code>\&lt;/code>”而“&lt;code>\(&lt;/code>”则匹配“&lt;code>(&lt;/code>”。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">^&lt;/td>
&lt;td style="text-align:center">匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“&lt;code>\n&lt;/code>”或“&lt;code>\r&lt;/code>”之后的位置。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">$&lt;/td>
&lt;td style="text-align:center">匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“&lt;code>\n&lt;/code>”或“&lt;code>\r&lt;/code>”之前的位置。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">*&lt;/td>
&lt;td style="text-align:center">匹配前面的子表达式零次或多次。例如，zo*能匹配“&lt;code>z&lt;/code>”以及“&lt;code>zoo&lt;/code>”。*等价于{0,}。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">+&lt;/td>
&lt;td style="text-align:center">匹配前面的子表达式一次或多次。例如，“&lt;code>zo+&lt;/code>”能匹配“&lt;code>zo&lt;/code>”以及“&lt;code>zoo&lt;/code>”，但不能匹配“&lt;code>z&lt;/code>”。+等价于{1,}。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">?&lt;/td>
&lt;td style="text-align:center">匹配前面的子表达式零次或一次。例如，“&lt;code>do(es)?&lt;/code>”可以匹配“&lt;code>does&lt;/code>”或“&lt;code>does&lt;/code>”中的“&lt;code>do&lt;/code>”。?等价于{0,1}。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">{&lt;em>n&lt;/em>}&lt;/td>
&lt;td style="text-align:center">&lt;em>n&lt;/em>是一个非负整数。匹配确定的&lt;em>n&lt;/em>次。例如，“&lt;code>o{2}&lt;/code>”不能匹配“&lt;code>Bob&lt;/code>”中的“&lt;code>o&lt;/code>”，但是能匹配“&lt;code>food&lt;/code>”中的两个o。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">{&lt;em>n&lt;/em>,}&lt;/td>
&lt;td style="text-align:center">&lt;em>n&lt;/em>是一个非负整数。至少匹配&lt;em>n&lt;/em>次。例如，“&lt;code>o{2,}&lt;/code>”不能匹配“&lt;code>Bob&lt;/code>”中的“&lt;code>o&lt;/code>”，但能匹配“&lt;code>foooood&lt;/code>”中的所有o。“&lt;code>o{1,}&lt;/code>”等价于“&lt;code>o+&lt;/code>”。“&lt;code>o{0,}&lt;/code>”则等价于“&lt;code>o*&lt;/code>”。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">{&lt;em>n&lt;/em>,&lt;em>m&lt;/em>}&lt;/td>
&lt;td style="text-align:center">&lt;em>m&lt;/em>和&lt;em>n&lt;/em>均为非负整数，其中&lt;em>n&lt;/em>&amp;lt;=&lt;em>m&lt;/em>。最少匹配&lt;em>n&lt;/em>次且最多匹配&lt;em>m&lt;/em>次。例如，“&lt;code>o{1,3}&lt;/code>”将匹配“&lt;code>fooooood&lt;/code>”中的前三个o。“&lt;code>o{0,1}&lt;/code>”等价于“&lt;code>o?&lt;/code>”。请注意在逗号和两个数之间不能有空格。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">?&lt;/td>
&lt;td style="text-align:center">当该字符紧跟在任何一个其他限制符（*,+,?，{&lt;em>n&lt;/em>}，{&lt;em>n&lt;/em>,}，{&lt;em>n&lt;/em>,&lt;em>m&lt;/em>}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“&lt;code>oooo&lt;/code>”，“&lt;code>o+?&lt;/code>”将匹配单个“&lt;code>o&lt;/code>”，而“&lt;code>o+&lt;/code>”将匹配所有“&lt;code>o&lt;/code>”。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">.&lt;/td>
&lt;td style="text-align:center">匹配除“&lt;code>\&lt;/code>&lt;em>&lt;code>n&lt;/code>&lt;/em>”之外的任何单个字符。要匹配包括“&lt;code>\&lt;/code>&lt;em>&lt;code>n&lt;/code>&lt;/em>”在内的任何字符，请使用像“`(.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">(pattern)&lt;/td>
&lt;td style="text-align:center">匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“&lt;code>\(&lt;/code>”或“&lt;code>\)&lt;/code>”。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">(?:pattern)&lt;/td>
&lt;td style="text-align:center">匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“`(&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">(?=pattern)&lt;/td>
&lt;td style="text-align:center">正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“`Windows(?=95&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">(?!pattern)&lt;/td>
&lt;td style="text-align:center">正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“`Windows(?!95&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">(?&amp;lt;=pattern)&lt;/td>
&lt;td style="text-align:center">反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“`(?&amp;lt;=95&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">(?&amp;lt;!pattern)&lt;/td>
&lt;td style="text-align:center">反向否定预查，与正向否定预查类拟，只是方向相反。例如“`(?&amp;lt;!95&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">x|y&lt;/td>
&lt;td style="text-align:center">匹配x或y。例如，“`z&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">[xyz]&lt;/td>
&lt;td style="text-align:center">字符集合。匹配所包含的任意一个字符。例如，“&lt;code>[abc]&lt;/code>”可以匹配“&lt;code>plain&lt;/code>”中的“&lt;code>a&lt;/code>”。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">[^xyz]&lt;/td>
&lt;td style="text-align:center">负值字符集合。匹配未包含的任意字符。例如，“&lt;code>[^abc]&lt;/code>”可以匹配“&lt;code>plain&lt;/code>”中的“&lt;code>p&lt;/code>”。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">[a-z]&lt;/td>
&lt;td style="text-align:center">字符范围。匹配指定范围内的任意字符。例如，“&lt;code>[a-z]&lt;/code>”可以匹配“&lt;code>a&lt;/code>”到“&lt;code>z&lt;/code>”范围内的任意小写字母字符。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">[^a-z]&lt;/td>
&lt;td style="text-align:center">负值字符范围。匹配任何不在指定范围内的任意字符。例如，“&lt;code>[^a-z]&lt;/code>”可以匹配任何不在“&lt;code>a&lt;/code>”到“&lt;code>z&lt;/code>”范围内的任意字符。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\b&lt;/td>
&lt;td style="text-align:center">匹配一个单词边界，也就是指单词和空格间的位置。例如，“&lt;code>er\b&lt;/code>”可以匹配“&lt;code>never&lt;/code>”中的“&lt;code>er&lt;/code>”，但不能匹配“&lt;code>verb&lt;/code>”中的“&lt;code>er&lt;/code>”。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\B&lt;/td>
&lt;td style="text-align:center">匹配非单词边界。“&lt;code>er\B&lt;/code>”能匹配“&lt;code>verb&lt;/code>”中的“&lt;code>er&lt;/code>”，但不能匹配“&lt;code>never&lt;/code>”中的“&lt;code>er&lt;/code>”。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\cx&lt;/td>
&lt;td style="text-align:center">匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“&lt;code>c&lt;/code>”字符。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\d&lt;/td>
&lt;td style="text-align:center">匹配一个数字字符。等价于[0-9]。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\D&lt;/td>
&lt;td style="text-align:center">匹配一个非数字字符。等价于[^0-9]。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\f&lt;/td>
&lt;td style="text-align:center">匹配一个换页符。等价于\x0c和\cL。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\n&lt;/td>
&lt;td style="text-align:center">匹配一个换行符。等价于\x0a和\cJ。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\r&lt;/td>
&lt;td style="text-align:center">匹配一个回车符。等价于\x0d和\cM。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\s&lt;/td>
&lt;td style="text-align:center">匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\S&lt;/td>
&lt;td style="text-align:center">匹配任何非空白字符。等价于[^ \f\n\r\t\v]。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\t&lt;/td>
&lt;td style="text-align:center">匹配一个制表符。等价于\x09和\cI。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\v&lt;/td>
&lt;td style="text-align:center">匹配一个垂直制表符。等价于\x0b和\cK。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\w&lt;/td>
&lt;td style="text-align:center">匹配包括下划线的任何单词字符。等价于“&lt;code>[A-Za-z0-9_]&lt;/code>”。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\W&lt;/td>
&lt;td style="text-align:center">匹配任何非单词字符。等价于“&lt;code>[^A-Za-z0-9_]&lt;/code>”。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\x&lt;em>n&lt;/em>&lt;/td>
&lt;td style="text-align:center">匹配&lt;em>n&lt;/em>，其中&lt;em>n&lt;/em>为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“&lt;code>\x41&lt;/code>”匹配“&lt;code>A&lt;/code>”。“&lt;code>\x041&lt;/code>”则等价于“&lt;code>\x04&amp;amp;1&lt;/code>”。正则表达式中可以使用ASCII编码。.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">*num*&lt;/td>
&lt;td style="text-align:center">匹配&lt;em>num&lt;/em>，其中&lt;em>num&lt;/em>是一个正整数。对所获取的匹配的引用。例如，“&lt;code>(.)\1&lt;/code>”匹配两个连续的相同字符。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">*n*&lt;/td>
&lt;td style="text-align:center">标识一个八进制转义值或一个向后引用。如果*n&lt;em>之前至少&lt;/em>n&lt;em>个获取的子表达式，则&lt;/em>n&lt;em>为向后引用。否则，如果&lt;/em>n&lt;em>为八进制数字（0-7），则&lt;/em>n*为一个八进制转义值。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">*nm*&lt;/td>
&lt;td style="text-align:center">标识一个八进制转义值或一个向后引用。如果*nm&lt;em>之前至少有&lt;/em>nm&lt;em>个获得子表达式，则&lt;/em>nm&lt;em>为向后引用。如果*nm&lt;/em>之前至少有&lt;em>n&lt;/em>个获取，则&lt;em>n&lt;/em>为一个后跟文字&lt;em>m&lt;/em>的向后引用。如果前面的条件都不满足，若&lt;em>n&lt;/em>和&lt;em>m&lt;/em>均为八进制数字（0-7），则*nm&lt;em>将匹配八进制转义值&lt;/em>nm*。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">*nml*&lt;/td>
&lt;td style="text-align:center">如果&lt;em>n&lt;/em>为八进制数字（0-3），且&lt;em>m和l&lt;/em>均为八进制数字（0-7），则匹配八进制转义值&lt;em>nm&lt;/em>l。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\u&lt;em>n&lt;/em>&lt;/td>
&lt;td style="text-align:center">匹配&lt;em>n&lt;/em>，其中&lt;em>n&lt;/em>是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号（©）。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="一校验数字的表达式">一、校验数字的表达式&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">1. 数字：^[0-9]*$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. n位的数字：^\d{n}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. 至少n位的数字：^\d{n,}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. m-n位的数字：^\d{m,n}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5. 零和非零开头的数字：^(0|[1-9][0-9]*)$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6. 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7. 带1-2位小数的正数或负数：^(\-)?\d+(\.\d{1,2})?$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">8. 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">9. 有两位小数的正实数：^[0-9]+(.[0-9]{2})?$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10. 有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">11. 非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\+?[1-9][0-9]*$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">12. 非零的负整数：^\-[1-9][]0-9″*$ 或 ^-[1-9]\d*$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">13. 非负整数：^\d+$ 或 ^[1-9]\d*|0$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">14. 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">15. 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">16. 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">17. 正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">18. 负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">19. 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="二校验字符的表达式">二、校验字符的表达式&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">1. 汉字：^[\u4e00-\u9fa5]{0,}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. 长度为3-20的所有字符：^.{3,20}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. 由26个英文字母组成的字符串：^[A-Za-z]+$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5. 由26个大写英文字母组成的字符串：^[A-Z]+$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6. 由26个小写英文字母组成的字符串：^[a-z]+$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7. 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">8. 由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">9. 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10. 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">11. 可以输入含有^%&lt;span class="ni">&amp;amp;’,;&lt;/span>=?$\”等字符：[^%&lt;span class="ni">&amp;amp;’,;&lt;/span>=?$\x22]+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">12. 禁止输入含有~的字符[^~\x22]+
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="其它">其它：&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">.*匹配除 \n 以外的任何字符。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/[\u4E00-\u9FA5]/ 汉字
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/[\uFF00-\uFFFF]/ 全角符号
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/[\u0000-\u00FF]/ 半角符号
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="三特殊需求表达式">三、特殊需求表达式&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">1. Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&lt;span class="err">&amp;amp;&lt;/span>=]*)?$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5. 电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^(\(\d{3,4}-)|\d{3.4}-)?\d{7,8}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6. 国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7. 身份证号(15位、18位数字)：^\d{15}|\d{18}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">8. 短身份证号码(数字、字母x结尾)：^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">9. 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10. 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">11. 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">12. 日期格式：^\d{4}-\d{1,2}-\d{1,2}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">13. 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">14. 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="钱的输入格式">钱的输入格式：&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">1.有四种钱的表示形式我们可以接受:”10000.00″ 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：^[1-9][0-9]*$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0″不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5.必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：^[0-9]+(.[0-9]{2})?$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>备注：这就是最终结果了,别忘了+可以用*替代,如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">1. xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 中文字符的正则表达式：[\u4e00-\u9fa5]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. 双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. 空白行的正则表达式：\n\s*\r (可以用来删除空白行)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5. HTML标记的正则表达式：&lt;span class="err">&amp;lt;&lt;/span>(\S*?)[^&amp;gt;]*&amp;gt;.*?&lt;span class="err">&amp;lt;&lt;/span>/\1&amp;gt;|&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">.&lt;/span>&lt;span class="err">*?&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span> (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6. 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7. 腾讯QQ号：[1-9][0-9]{4,} (腾讯QQ号从10000开始)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">8. 中国邮政编码：[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">9. IP地址：\d+\.\d+\.\d+\.\d+ (提取IP地址时有用)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10. IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">11. IP-v4地址：\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b (提取IP地址时有用)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">12. 校验IP-v6地址:(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">13. 子网掩码：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">14. 校验日期:^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$(“yyyy-mm-dd“ 格式的日期校验，已考虑平闰年。)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">15. 抽取注释：&lt;span class="cp">&amp;lt;!–(.*?)–&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">16. 查找CSS属性:^\\s*[a-zA-Z\\-]+\\s*[:]{1}\\s[a-zA-Z0-9\\s.#]+[;]{1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">17. 提取页面超链接:(&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="err">\\&lt;/span>&lt;span class="na">s&lt;/span>&lt;span class="err">*(?!.*\\&lt;/span>&lt;span class="na">brel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">)[^&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>]*)(href=”https?:\\/\\/)((?!(?:(?:www\\.)?’.implode(‘|(?:www\\.)?’, $follow_list).’))[^” rel=”external nofollow” ]+)”((?!.*\\brel=)[^&amp;gt;]*)(?:[^&amp;gt;]*)&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">18. 提取网页图片:\\&lt;span class="err">&amp;lt;&lt;/span> *[img][^\\\\&amp;gt;]*[src] *= *[\\”\\’]{0,1}([^\\”\\’\\ &amp;gt;]*)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">19. 提取网页颜色代码:^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">20. 文件扩展名效验:^([a-zA-Z]\\:|\\\\)\\\\([^\\\\]+\\\\)*[^\\/:*?”&lt;span class="err">&amp;lt;&lt;/span>&amp;gt;|]+\\.txt(l)?$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">21. 判断IE版本：^.*MSIE [5-8](?:\\.[0-9]+)?(?!.*Trident\\/[5-9]\\.0).*$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>环境配置和软件</title><link>https://www.jiangdaoli.cf/p/config/</link><pubDate>Sun, 18 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.jiangdaoli.cf/p/config/</guid><description>&lt;h1 id="部分电脑配置记录">部分电脑配置记录&lt;/h1>
&lt;h2 id="win10-config">win10 config&lt;/h2>
&lt;ul>
&lt;li>git&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">git config --global http.proxy http://127.0.0.1:port.http
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global https.proxy https://127.0.0.1:port.http
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>文件路径：&lt;code>C:\Users\90487\.gitconfig&lt;/code>，90487是我的用户名&lt;/p>
&lt;ul>
&lt;li>Terminal（临时使用）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">set http_proxy=http://127.0.0.1:port.http #临时命令行代理
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set https_proxy=http://127.0.0.1:port.http #临时命令行代理
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="vm-ubuntu-config">VM Ubuntu config&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>代理
Windows中使用&lt;code>ipconfig&lt;/code>查看&lt;code>VMware Network Adapter VMnet8&lt;/code>的ip地址，ubuntu中进入“设置”-“网络”-“proxy”，在&lt;code>Socks Host&lt;/code>里写入之前查到的&lt;strong>ip&lt;/strong>地址&lt;/p>
&lt;/li>
&lt;li>
&lt;p>git config&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">git config --global user.name &amp;#34;John Doe&amp;#34; #配置github账号用户名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global user.email johndoe@example.com #配置邮箱
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>git ssh 代理&lt;/li>
&lt;/ul>
&lt;p>创建~/.ssh/config 文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">Host github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> User git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ProxyCommand nc -v -x ip:port.socks %h %p #写自己ip
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>终端代理（临时使用）&lt;/p>
&lt;ul>
&lt;li>
&lt;p>方法一：直接在命令前加proxychains&lt;/p>
&lt;/li>
&lt;li>
&lt;p>方法二：直接在.bashrc最后加入：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">export http_proxy=&amp;#34;http://ip:port.http&amp;#34; #写自己ip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">export https_proxy=&amp;#34;http://ip:port.http&amp;#34; #写自己ip
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">source ~/.bashrc #使配置生效
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="ubuntu升级">Ubuntu升级&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># 更新
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt upgrade
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo reboot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># 启动 GUI 更新向导
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo update-manager -c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>update错误 N: 无法安全地用该源进行更新，所以默认禁用该源&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">cd /etc/apt/sources.list.d
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo rm -f * # 删除全部软件源
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>W: Failed to fetch &lt;a class="link" href="http://archive.ubuntu.com/" target="_blank" rel="noopener"
>http://archive.ubuntu.com/&lt;/a>&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>备份您的来源列表 &lt;code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>打开&lt;code>/etc/apt/sources.list&lt;/code>粘贴&lt;a class="link" href="https://launchpad.net/ubuntu/&amp;#43;archivemirrors" target="_blank" rel="noopener"
>这里&lt;/a>对应地区和版本的sources.list条目&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># DNS 设置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo vim /etc/resolv.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 使用Google DNS作为首选 DNS 服务器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nameserver 8.8.8.8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nameserver 8.8.4.4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="ubuntu安装go">Ubuntu安装go&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">sudo apt install snap #安装snap，使用snap更易安装、更新
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">sudo snap install go --classic #安装go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">sudo vim /etc/profile #编辑profile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">export GOROOT=/snap/go #在最后一行添加
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">export PATH=$PATH:$GOROOT/bin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">source /etc/profile #保存
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">go version #验证
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">export GO111MODULE=on
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">export GOPROXY=https://goproxy.cn #设置 go get 为国内源（无代理）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="goland">Goland&lt;/h1>
&lt;h2 id="使用">使用&lt;/h2>
&lt;p>goland无限试用，方法适用&lt;strong>IDEA系列&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>goland中添加第三方插件仓库地址：https://plugins.zhile.io&lt;/li>
&lt;li>安装插件：IDE Eval Reset&lt;/li>
&lt;li>&lt;a class="link" href="https://plugins.zhile.io/files/ide-eval-resetter-2.1.14-d2fedb86.zip" target="_blank" rel="noopener"
>下载&lt;/a>&lt;/li>
&lt;li>直接把zip包拖进IDE的窗口来进行插件的安装&lt;/li>
&lt;li>Help -&amp;gt; Eval Reset 勾选Auto reset before per restart&lt;/li>
&lt;/ol>
&lt;p>&lt;a class="link" href="https://zhile.io/2020/11/18/jetbrains-eval-reset-da33a93d.html" target="_blank" rel="noopener"
>原文地址&lt;/a>，本段仅进行简述，使操作简明&lt;/p>
&lt;h2 id="不能输入中文ubuntu">不能输入中文（Ubuntu）&lt;/h2>
&lt;p>在goland.sh注释之后的首行添加&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">export XMODIFIERS=&amp;#34;@im=ibus&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">export GTK_IM_MODULE=&amp;#34;ibus&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">export QT_IM_MODULE=&amp;#34;ibus&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>goland.vmoptions添加&lt;code>-Drecreate.x11.input.method=true&lt;/code>&lt;/p>
&lt;h1 id="自用软件">自用软件&lt;/h1>
&lt;p>本文软件均为自用，本人无意推广任何软件，所以下载地址请自行查找，一般在google可找到官方，或者在52论坛搜搜看&lt;/p>
&lt;h2 id="win10优雅必备">win10优雅必备&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Wallpaper Engine　　　　　　#壁纸，steam购买&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Everything + uTools　　　　#文件快捷搜索及工具&lt;/p>
&lt;/li>
&lt;li>
&lt;p>quicker　　　　　　　　　　 #鼠标便捷操作神器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>DeskGo　　　　　　　　　　#腾讯出品的桌面软件格子&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Geek Uninstaller　　　　　　#卸载无残留&lt;/p>
&lt;/li>
&lt;li>
&lt;p>clover　　　　　　　　　　　#资源管理器多标签页&lt;/p>
&lt;/li>
&lt;li>
&lt;p>火绒　　　　　　　　　　　　#屏蔽弹窗&lt;/p>
&lt;/li>
&lt;li>
&lt;p>typora　　　　　　　　　　　#markdown记事本，据说notion在线笔记，我把博客当作在线笔记了&lt;/p>
&lt;/li>
&lt;li>
&lt;p>win10 microsoft store工具&lt;/p>
&lt;ul>
&lt;li>Windows Terminal　　　　　#命令行&lt;/li>
&lt;li>TranslucentTB　　　　　　　#任务栏透明&lt;/li>
&lt;li>EarTrumpet　　　　　　　　#音频管理&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="安卓app">安卓app&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>浏览器：Chrome、Kiwi、x浏览器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>影视：zd01.tv下载 + AdGuard　　# AdGuard设置复杂请自行研究，去除视频开头广告可在日志中找到广告，把这几个广告网站地址添加到自定义过滤&lt;/p>
&lt;/li>
&lt;li>
&lt;p>音乐：listen1　　　　　　　　# 并不完美，希望找到更好用的&lt;/p>
&lt;/li>
&lt;li>
&lt;p>小说：阅读　　　　　　　　　# 酷安评论区可以找书源&lt;/p>
&lt;/li>
&lt;li>
&lt;p>阅读：ReadEra、福昕PDF阅读器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>去除启动广告：跳过广告&lt;/p>
&lt;/li>
&lt;li>
&lt;p>手机控制&lt;/p>
&lt;ul>
&lt;li>MacroDroid、hamibot　　　#手机自动化&lt;/li>
&lt;li>Moonlight　　　　　　　　#局域网流畅投屏&lt;/li>
&lt;li>AirDroid和AirMirror　　　#手机远程控制手机&lt;/li>
&lt;li>向日葵远程控制&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>其他&lt;/p>
&lt;ul>
&lt;li>zarchiver　　　　　　　#文件管理和解压&lt;/li>
&lt;li>星空视频壁纸&lt;/li>
&lt;li>Sendapp #提取apk&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item></channel></rss>