<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>计算机 on Janus</title><link>https://xiaoxiano.github.io/categories/computer/</link><description>Recent content in 计算机 on Janus</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 30 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://xiaoxiano.github.io/categories/computer/index.xml" rel="self" type="application/rss+xml"/><item><title>Fiddler5抓包APP数据</title><link>https://xiaoxiano.github.io/p/capture/</link><pubDate>Fri, 30 Aug 2024 00:00:00 +0000</pubDate><guid>https://xiaoxiano.github.io/p/capture/</guid><description>&lt;h2 id="fiddler">fiddler&lt;/h2>
&lt;p>fiddler的缺点是不支持中文，也可以使用另一款针对安卓的抓包软件reqable（前身HttpCanary）。&lt;/p>
&lt;p>&lt;strong>System Proxy&lt;/strong>：Fiddler通过系统代理的形式来进行监听请求和响应&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/capture/1.png"
width="1368"
height="792"
srcset="https://xiaoxiano.github.io/p/capture/1_huc866ea27aa0a2b84e03b09120160d563_87095_480x0_resize_box_3.png 480w, https://xiaoxiano.github.io/p/capture/1_huc866ea27aa0a2b84e03b09120160d563_87095_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="172"
data-flex-basis="414px"
>&lt;/p>
&lt;p>&lt;strong>证书&lt;/strong>：&lt;code>fiddler&lt;/code>默认只抓取&lt;code>http&lt;/code>协议，要抓取&lt;code>https&lt;/code>协议需要在设置中&lt;code>rust Fiddler CA&lt;/code>，勾选&lt;code>Capture HTTPS traffic&lt;/code>和&lt;code>Ignore server certificate errors&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/capture/2.png"
width="1173"
height="745"
srcset="https://xiaoxiano.github.io/p/capture/2_hue247de5764cebb25218d628a1922addb_85527_480x0_resize_box_3.png 480w, https://xiaoxiano.github.io/p/capture/2_hue247de5764cebb25218d628a1922addb_85527_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="377px"
>&lt;/p>
&lt;p>&lt;strong>允许远程连接&lt;/strong>：&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/capture/3.png"
width="1119"
height="738"
srcset="https://xiaoxiano.github.io/p/capture/3_hu6c1041c7b2e12e9763009b14998c600b_69207_480x0_resize_box_3.png 480w, https://xiaoxiano.github.io/p/capture/3_hu6c1041c7b2e12e9763009b14998c600b_69207_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="363px"
>&lt;/p>
&lt;p>&lt;strong>Filters&lt;/strong>：过滤器，匹配想要的请求&lt;/p>
&lt;p>更多内容参考&lt;a class="link" href="https://docs.telerik.com/fiddler-everywhere/introduction" target="_blank" rel="noopener"
>官方文档&lt;/a>&lt;/p>
&lt;h2 id="android">Android&lt;/h2>
&lt;h3 id="模拟器">模拟器&lt;/h3>
&lt;p>模拟器中，mumu支持android12兼容性最强，雷电模拟器也可以用，而BlueStacks5 不支持代理，夜神的性能较差。&lt;/p>
&lt;style type="text/css">
.box {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 2em;
margin-bottom: 4em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box.warning .box-title {
background: #ff6b6b;
}
.box.warning {
background: #ff6b6b4f;
}
.box.info .box-title {
background: #0089e488;
}
.box.info {
background: #0089e41c;
box-shadow: 3px 3px 5px #0089e410;
}
.box.important .box-title {
background: #f7ec2c;
}
.box.important {
background: #f7ec2c7d;
}
.box.tip .box-title {
background: #a3ffa34d;
}
.box.tip {
background: #a3ffa34d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box p {
margin-bottom: 0.6em;
}
.box p:first-of-type {
display: inline;
}
.box p:nth-of-type(2) {
margin-top: 0.6em;
}
.box p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>别的文章说要网络桥接，这样模拟器会断连，无需使用&lt;/p>
&lt;/div>
&lt;ol>
&lt;li>打开root权限&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/capture/5.png"
width="721"
height="569"
srcset="https://xiaoxiano.github.io/p/capture/5_hu5ea6521ee6726bbc8036e9891ed6ead0_36795_480x0_resize_box_3.png 480w, https://xiaoxiano.github.io/p/capture/5_hu5ea6521ee6726bbc8036e9891ed6ead0_36795_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="304px"
>&lt;/p>
&lt;ol start="2">
&lt;li>打开写入权限(可能会自动关闭，使用时检查)&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/capture/6.png"
width="721"
height="570"
srcset="https://xiaoxiano.github.io/p/capture/6_hu8f08178c0a0aa84b0d26eb72ff24eff3_42402_480x0_resize_box_3.png 480w, https://xiaoxiano.github.io/p/capture/6_hu8f08178c0a0aa84b0d26eb72ff24eff3_42402_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="303px"
>&lt;/p>
&lt;ol start="3">
&lt;li>查看电脑ip，打开WLAN设置填写代理&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/capture/4.png"
width="596"
height="1020"
srcset="https://xiaoxiano.github.io/p/capture/4_hu20618113a3b37ffeb5a5a9691884a191_68106_480x0_resize_box_3.png 480w, https://xiaoxiano.github.io/p/capture/4_hu20618113a3b37ffeb5a5a9691884a191_68106_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="58"
data-flex-basis="140px"
>&lt;/p>
&lt;ol start="4">
&lt;li>
&lt;p>打开浏览器，输入IP:8888，&lt;code>DOWNLOAD CERTIFICATE&lt;/code>，在状态栏点击安装&lt;/p>
&lt;/li>
&lt;li>
&lt;p>移动证书，因为部分应用使用系统证书，需要把证书移动至系统证书目录（以下方法适用于Android 7 到 Android 13）&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>在windows窗口运行adb：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># 查看设备连接
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">adb devices
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 获得权限
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">adb root &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> adb remount
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 进入shell
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">adb shell
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 切换root用户
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">su
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 查看用户证书的名称
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ls /data/misc/user/0/cacerts-added/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 将用户证书挪至系统证书目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mv /data/misc/user/0/cacerts-added/[证书] /system/etc/security/cacerts/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 如果查看证书可以下载MT管理器
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="真机">真机&lt;/h3>
&lt;p>用真机肯定麻烦点，但有些app不支持使用模拟器打开。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>root，Magisk&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Windows放行端口&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>控制面板 -&amp;gt; Windows Defender 防火墙 -&amp;gt; 高级设置 -&amp;gt; 入站规则 -&amp;gt; 新建规则&amp;hellip; -&amp;gt; 端口8888&lt;/p>
&lt;ol start="3">
&lt;li>查看电脑ip，打开WLAN设置填写代理&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/capture/4.png"
width="596"
height="1020"
srcset="https://xiaoxiano.github.io/p/capture/4_hu20618113a3b37ffeb5a5a9691884a191_68106_480x0_resize_box_3.png 480w, https://xiaoxiano.github.io/p/capture/4_hu20618113a3b37ffeb5a5a9691884a191_68106_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="58"
data-flex-basis="140px"
>&lt;/p>
&lt;ol start="4">
&lt;li>
&lt;p>打开浏览器，输入IP:8888，&lt;code>DOWNLOAD CERTIFICATE&lt;/code>，在状态栏点击安装&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Magisk安装模块（允许真机启用 adb root）&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;a class="link" href="https://github.com/evdenis/adb_root" target="_blank" rel="noopener"
>适用于 Android 9/10&lt;/a>、&lt;a class="link" href="https://github.com/tiann/adb_root" target="_blank" rel="noopener"
>适用于 Android 11+&lt;/a>&lt;/p>
&lt;ol start="6">
&lt;li>adb移动证书&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># 查看设备连接
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">adb devices
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 获得权限
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">adb root &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> adb remount
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 进入shell
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">adb shell
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 切换root用户
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">su
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 重新挂载具有读写权限的根（/）分区
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mount -o rw,remount /
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 查看用户证书
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ls /data/misc/user/0/cacerts-added/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 将用户证书挪至系统证书目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mv /data/misc/user/0/cacerts-added/[证书] /system/etc/security/cacerts/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 恢复只读状态
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mount -o ro,remount /
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 如果查看证书可以下载MT管理器
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以抓包了。如果看到二进制加密数据，就需要破解apk，以后再详细研究。&lt;/p></description></item><item><title>加密算法</title><link>https://xiaoxiano.github.io/p/encrypt/</link><pubDate>Sun, 13 Aug 2023 00:00:00 +0000</pubDate><guid>https://xiaoxiano.github.io/p/encrypt/</guid><description>&lt;h1 id="不可逆算法哈希hash">不可逆算法（哈希HASH）&lt;/h1>
&lt;h2 id="哈希算法">哈希算法&lt;/h2>
&lt;p>哈希算法：将一段（通常是较大的）数据映射为较短小的数据。这段小数据就是大数据的哈希值，它是唯一的，一旦大数据发生变化，他的哈希值也会发生变化。&lt;/p>
&lt;p>&lt;strong>哈希碰撞&lt;/strong>&lt;/p>
&lt;p>哈希碰撞是指，两个不同的输入得到了相同的输出：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&amp;#34;AaAaAa&amp;#34;.hashCode(); // 0x7460e8c0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;BBAaBB&amp;#34;.hashCode(); // 0x7460e8c0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>碰撞能不能避免，哈希算法的输出长度越长，碰撞概率越小。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">算法&lt;/th>
&lt;th style="text-align:left">输出长度（位）&lt;/th>
&lt;th style="text-align:left">输出长度（字节）&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">MD5&lt;/td>
&lt;td style="text-align:left">128 bits&lt;/td>
&lt;td style="text-align:left">16 bytes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">SHA-1&lt;/td>
&lt;td style="text-align:left">160 bits&lt;/td>
&lt;td style="text-align:left">20 bytes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">RipeMD-160&lt;/td>
&lt;td style="text-align:left">160 bits&lt;/td>
&lt;td style="text-align:left">20 bytes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">SHA-256&lt;/td>
&lt;td style="text-align:left">256 bits&lt;/td>
&lt;td style="text-align:left">32 bytes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">SHA-512&lt;/td>
&lt;td style="text-align:left">512 bits&lt;/td>
&lt;td style="text-align:left">64 bytes&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>应用：&lt;/p>
&lt;ul>
&lt;li>用于密码管理 - 把用户的密码以MD5值（或类似的其它算法）的方式保存起来，用户注册的时候，系统是把用户输入的密码计算成 MD5 值，然后再去和系统中保存的 MD5 值进行比较，如果密文相同，就可以认定密码是正确的，否则密码错误。通过这样的步骤，系统在并不知道用户密码明码的情况下就可以确定用户登录系统的合法性。如果数据库泄漏，黑客也无法拿到用户的原始口令，如果黑客有一个预先计算好的常用口令和它们的MD5的对照表（彩虹表），就能反查到原始口令，我们可以采取措施来抵御，方法是对每个口令额外添加随机数，这个方法称之为加盐。&lt;/li>
&lt;li>电子签名 - 使用 MD5算法就可以为任何文件（不管其大小、格式、数量）产生一个独一无二的&lt;code>数字指纹&lt;/code>，借助这个&lt;code>数字指纹&lt;/code>，通过检查文件前后 MD5 值是否发生了改变，就可以知道源文件是否被改动。&lt;/li>
&lt;/ul>
&lt;h2 id="基于密钥的哈希算法">基于密钥的哈希算法&lt;/h2>
&lt;p>HMAC:类似“加盐”的MD5，Hmac本质上就是把安全key混入摘要的算法。&lt;/p>
&lt;h1 id="可逆算法">可逆算法&lt;/h1>
&lt;h2 id="对称加密">对称加密&lt;/h2>
&lt;p>加密：明文 -&amp;gt; 密钥加密 -&amp;gt; 密文。&lt;/p>
&lt;p>解密：密文 -&amp;gt; 密钥解密 -&amp;gt; 明文。&lt;/p>
&lt;p>&lt;strong>经典加密算法有三种&lt;/strong> ：&lt;/p>
&lt;ul>
&lt;li>DES(Data Encryption Standard)：数据加密标准(现在用的比较少，因为它的加密强度不够，能够暴力破解)&lt;/li>
&lt;li>3DES：原理和DES几乎是一样的，只是使用3个密钥，对相同的数据执行三次加密，增强加密强度。(缺点：要维护3个密钥，大大增加了维护成本)&lt;/li>
&lt;li>AES(Advanced Encryption Standard)：高级加密标准，目前美国国家安全局使用的，苹果的钥匙串访问采用的就AES加密。是现在公认的最安全的加密方式，是对称密钥加密中最流行的算法。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>加密模式&lt;/strong> ：&lt;/p>
&lt;ul>
&lt;li>ECB模式（默认）：电码本模式 Electronic Codebook Book，就是每个块都是独立加密&lt;/li>
&lt;li>CBC模式：密码分组链接模式 Cipher Block Chaining，使用一个密钥和一个初始化向量(IV)对数据执行加密转换&lt;/li>
&lt;li>CTR模式：计算器模式 Counter&lt;/li>
&lt;li>CFB模式：密码反馈模式 Cipher FeedBack&lt;/li>
&lt;li>OFB模式：输出反馈模式 Output FeedBack&lt;/li>
&lt;/ul>
&lt;p>加密模式是加密过程对独立数据块的处理。对于较长的明文进行加密需要进行分块加密，在实际开发中，推荐使用CBC的，ECB的要少用。&lt;/p>
&lt;h2 id="非对称加密rsa">非对称加密RSA&lt;/h2>
&lt;p>发送公钥 -&amp;gt; 对方用公钥加密 -&amp;gt; 收到密文、私钥解密&lt;/p>
&lt;p>常见的非对称加密算法有：RSA、DSA(美国国家标准局提出)、ECC(椭圆曲线密码学)、DH等。&lt;/p>
&lt;p>ECC 算法比 RSA、DSA 速度更快，基于 ECC 的签名算法主要有两种：ECDSA 与 EdDSA， EdDSA 比 ECDSA 更简洁更快一点，因此现在通常更推荐使用 EdDSA 算法。目前 EdDSA 有两个方案：Ed25519 和 Ed448。&lt;/p></description></item><item><title>VPS 选购</title><link>https://xiaoxiano.github.io/p/vps/</link><pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate><guid>https://xiaoxiano.github.io/p/vps/</guid><description>&lt;p>购买vps一般需要注意性能、带宽和线路。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>性能是根据自身需要的，一般只需要看内存，跑代理512M足够了（考虑到有邻居还是建议1G），跑业务最好在2G以上。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>带宽只要搜一下商家的测评，注意共享带宽的实际速度、晚高峰速度就行了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>线路却是一个相对复杂的问题。不仅海内外线路繁多，不同运营商、不同省市的情况也不同，所以最好自己测试（测试方法见下文）。如果不想测，可以去&lt;a class="link" href="https://www.zhujiceping.com/" target="_blank" rel="noopener"
>主机测评网&lt;/a>等网站看测评，或者电信用CN2、联通用AS9929、移动用CMI。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用机场最好用IPLC/IEPL线路，几乎不会断连，有名的telegram测评频道&lt;a class="link" href="https://t.me/s/gebaopiCloud" target="_blank" rel="noopener"
>前女友们用过的机场&lt;/a>可以参考。用机场隐私泄露风险较高。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="常见线路">常见线路&lt;/h1>
&lt;h2 id="国内运营商">国内运营商&lt;/h2>
&lt;p>IPLC/IEPL国际私用出租线路&lt;/p>
&lt;p>电信的163骨干网自治系统编号 AS4134&lt;/p>
&lt;p>电信的CN2骨干网自治系统编号 AS4809 （优秀）&lt;/p>
&lt;p>联通的169骨干网自治系统编号 AS4837&lt;/p>
&lt;p>联通的A网骨干网自治系统编号 AS9929 （优秀）&lt;/p>
&lt;p>移动的CMNET境内骨干网自治系统编号 AS9808&lt;/p>
&lt;p>移动的CMI境外骨干网自治系统编号 AS58453&lt;/p>
&lt;p>CERNET（教育网，主用于高校）骨干网自治系统编号 AS4538&lt;/p>
&lt;p>CSTNET（科技网）骨干网自治系统编号 AS7497&lt;/p>
&lt;p>BGP 边界网关协议，主要是用来连接网络上的独立系统的路由选择协议。主要功能是在传输过程中会选择最优的路由线路。比一般线路要好，但不使用cn2这种最优质线路。&lt;/p>
&lt;h2 id="国外运营商">国外运营商&lt;/h2>
&lt;p>&lt;strong>日本&lt;/strong>
常见线路：NTT、KDDI、IIJ、SoftBank（软银）、Telstra、PCCW&lt;/p>
&lt;p>&lt;strong>新加坡&lt;/strong>
常见线路：NTT、Tata通信、Telstra、PCCW、sg.gs&lt;/p>
&lt;p>&lt;strong>韩国&lt;/strong>
常见线路：KT、SK、LG&lt;/p>
&lt;p>&lt;strong>香港&lt;/strong>
常用线路：PCCW、Telstra、HKBN、HKT、HGC、NTT（香港）、Azure、Google Cloud Platform、Gcorelabs、Tata通信&lt;/p>
&lt;p>&lt;strong>俄罗斯&lt;/strong>
常见线路：RosTelecom（俄罗斯电信）、TTK（俄罗斯铁通）、MTS、Megfon、RETN&lt;/p>
&lt;p>&lt;strong>英国&lt;/strong>
常见线路：Telia、Cogentco、Level3、Zayo、Tata通信&lt;/p>
&lt;h2 id="实际体验以往返总延迟排序">实际体验（以往返总延迟排序）&lt;/h2>
&lt;ol>
&lt;li>最优：&lt;/li>
&lt;/ol>
&lt;p>香港IPLC/IEPL、日本IPLC/IEPL、香港CN2 GIA：价格高。&lt;/p>
&lt;p>日本SoftBank（推荐）：约100+ms。&lt;/p>
&lt;ol start="2">
&lt;li>次优：&lt;/li>
&lt;/ol>
&lt;p>新加坡CN2：约200ms，价格稍高。&lt;/p>
&lt;p>日本IIJ：约200+ms。&lt;/p>
&lt;p>香港CMI：约200+ms。移动网可能好用（我不是），有高峰期。&lt;/p>
&lt;p>新加坡NTT：约300+ms。慎买。&lt;/p>
&lt;p>美国CN2\美国AS9929（推荐）：约500ms。性价比高，网络审查宽松，且访问的大多服务器设在美国。&lt;/p>
&lt;ol start="3">
&lt;li>差线路：&lt;/li>
&lt;/ol>
&lt;p>racknerd等很廉价，绕路线路，但适合测试用。&lt;/p>
&lt;p>&lt;strong>优质VPS推荐&lt;/strong>
BandwagonHost（搬瓦工）：日本软银$169/年（高配）。香港 CN2 GIA最低$899.99/年。&lt;/p>
&lt;p>&lt;a class="link" href="https://vps.hosting/cart/tokyo-mini-kvm-vps/" target="_blank" rel="noopener"
>v.ps&lt;/a>(需实名):日本软银特价款约39、49欧元/年（经常缺货）。&lt;/p>
&lt;p>DMIT：美国CN2特价款$36.90/年（经常缺货）。&lt;/p>
&lt;p>ZgoCloud（2021年新商家）：美国AS9929特价款$38.90/年。&lt;/p>
&lt;p>vmiss（2022年新商家）：有日本IIJ， 美国CN2、9929的平价大带宽产品。需要注意，他家IP虽然可以解锁大多服务，但使用的是广播ip。&lt;/p>
&lt;p>其它卖优质VPS的商家还有Vultr、Linode、digitalocean等。&lt;/p>
&lt;p>&lt;strong>提示：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>机场很可能跑路，用机场一定要月付。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>北方地区日本线路表现更好。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>有些商家线路会绕路欧美，最好自测。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>香港vps：很可能有高峰期，便宜商家的机房容易受到攻击。认准口碑商家，否则不要买。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>韩国vps：用过1次，一个月后要求韩国身份实名，不知道是不是都这样。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>推荐：美国、新加坡vps表现好价格合适。日本vps极少数小问题，不影响使用。&lt;/p>
&lt;h1 id="测试线路">测试线路&lt;/h1>
&lt;h2 id="测试全国到vps的延迟">测试全国到VPS的延迟&lt;/h2>
&lt;p>&lt;a class="link" href="https://tools.ipip.net/ping.php" target="_blank" rel="noopener"
>ipip.net的ping工具&lt;/a>输入ip，选择中国，然后ping。&lt;/p>
&lt;h2 id="路由跟踪">路由跟踪&lt;/h2>
&lt;h3 id="去程路由跟踪">去程路由跟踪&lt;/h3>
&lt;p>方式一：下载&lt;a class="link" href="https://cdn.ipip.net/17mon/besttrace.exe" target="_blank" rel="noopener"
>BestTrace软件&lt;/a>，点路由跟踪，输入ip，开始。&lt;/p>
&lt;p>方式二：&lt;a class="link" href="https://tools.ipip.net/traceroute.php" target="_blank" rel="noopener"
>ipip.net的traceroute工具&lt;/a>选地区，输入ip，查看。&lt;/p>
&lt;h3 id="回程路由跟踪">回程路由跟踪&lt;/h3>
&lt;p>回程跟踪需要连接到VPS，执行以下命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">yum install -y wget unzip &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> wget https://cdn.ipip.net/17mon/besttrace4linux.zip &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> unzip best
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./besttrace [你的本地ip] -g cn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>acme.sh 申请证书</title><link>https://xiaoxiano.github.io/p/acme/</link><pubDate>Mon, 24 Oct 2022 00:00:00 +0000</pubDate><guid>https://xiaoxiano.github.io/p/acme/</guid><description>&lt;p>Let’s Encrypt 是一个免费的，自动化的，开放的证书颁发机构（CA），为公众的利益而运行。 它是一项由 &lt;a class="link" href="https://www.abetterinternet.org/" target="_blank" rel="noopener"
>Internet Security Research Group（ISRG）&lt;/a>提供的服务。&lt;/p>
&lt;p>acme.sh 则是实现了 acme 协议, 可以从 letsencrypt 生成免费的证书。&lt;/p>
&lt;ul>
&lt;li>Let’s Encrypt 速率限制
&lt;ul>
&lt;li>每个注册网域(Registered Domain) 的凭证颁发数量，限制为每周50 张&lt;/li>
&lt;li>更新凭证受到重复凭证限制，一个星期内仅能颁发5 张重复的凭证。&lt;/li>
&lt;li>网域验证失败限制，对于每个帐号每域名每小时5 次的限制。&lt;/li>
&lt;li>每个IP 位置每3 个小时最多能建立10 个帐号。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>如果你达到速率限制，你只能等待一个星期直到速率限制结束。&lt;/p>
&lt;h1 id="acme申请证书">acme申请证书&lt;/h1>
&lt;h2 id="安装-acmesh">安装 acme.sh&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">curl https://get.acme.sh | sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">sudo apt install socat # 安装socat
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="选择默认-ca">选择默认 CA&lt;/h2>
&lt;h3 id="zerossl">Zerossl&lt;/h3>
&lt;p>从 acme.sh v 3.0.0 开始，acme.sh 使用 Zerossl 作为默认 ca，您必须先注册帐户（一次），然后才能颁发新证书。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">~/.acme.sh/acme.sh –register-account -m xxxx@xxxx.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="lets-encrypt">Let&amp;rsquo;s Encrypt&lt;/h3>
&lt;p>如果需要更换Let&amp;rsquo;s Encrypt可以使用如下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">~/.acme.sh/acme.sh --set-default-ca --server letsencrypt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="通过-http-方式申请证书">通过 http 方式申请证书&lt;/h2>
&lt;h3 id="webroot模式">Webroot模式&lt;/h3>
&lt;p>这种方式需要你的服务器上面已经部署了网站环境。Acme 自动在你的网站根目录下放置一个文件,来验证你的域名所有权,完成验证. 然后就可以生成证书了.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># 生成 RSA 证书：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">~/.acme.sh/acme.sh --issue -d example.com -w /var/www/_letsencrypt/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 生成 ECC 证书：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">~/.acme.sh/acme.sh --issue -d example.com -w /var/www/_letsencrypt/ --keylength ec-256
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>/var/www/_letsencrypt/ 为 example.com 站点下的 /.well-known/acme-challenge/ 证书请求目录。&lt;/p>
&lt;h3 id="80-端口空闲的证书申请方式">80 端口空闲的证书申请方式&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">~/.acme.sh/acme.sh --issue -d example.com --standalone
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装证书到指定文件夹">安装证书到指定文件夹&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># 把密钥和证书安装到 /root 目录，并改名为 private.key 和 cert.crt。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">~/.acme.sh/acme.sh --installcert -d mydomain.com --key-file /root/cert/private.key --fullchain-file /root/cert/cert.crtchmod -R 755 /root/cert
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="更新后续操作">更新（后续操作）&lt;/h2>
&lt;h3 id="更新证书">更新证书&lt;/h3>
&lt;h4 id="手动更新">手动更新&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">~/.acme.sh/acme.sh --renew -d example.com --force
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="自动更新">自动更新&lt;/h4>
&lt;p>安装 acme.sh 时会自动创建一个 cronjob，每天定期检查所有证书，如果证书需要更新会自动更新证书。
通过 crontab -l 查看 crontab 任务:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">46 0 * * * &amp;#34;/root/.acme.sh&amp;#34;/acme.sh --cron --home &amp;#34;/root/.acme.sh&amp;#34; &amp;gt; /dev/null
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="更新-acme-脚本">更新 Acme 脚本&lt;/h3>
&lt;p>升级 Acme.sh 到最新版本&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">~/.acme.sh/acme.sh --upgrade
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你不想手动升级, 可以开启自动升级:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">~/.acme.sh/acme.sh --upgrade --auto-upgrade
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="dns-申请证书通常只支持付费域名">DNS 申请证书(通常只支持付费域名)&lt;/h1>
&lt;p>几个 CA 的简单对比&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>功能&lt;/th>
&lt;th>LE&lt;/th>
&lt;th>Buypass&lt;/th>
&lt;th>ZeroSSL&lt;/th>
&lt;th>SSL.com&lt;/th>
&lt;th>Google Public CA&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>有效期&lt;/td>
&lt;td>90 天&lt;/td>
&lt;td>180 天&lt;/td>
&lt;td>90 天&lt;/td>
&lt;td>90 天&lt;/td>
&lt;td>90 天&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>多域名&lt;/td>
&lt;td>支持&lt;/td>
&lt;td>支持，最多 5 个&lt;/td>
&lt;td>支持&lt;/td>
&lt;td>收费支持&lt;/td>
&lt;td>支持&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>泛域名&lt;/td>
&lt;td>支持&lt;/td>
&lt;td>不支持&lt;/td>
&lt;td>支持&lt;/td>
&lt;td>收费支持&lt;/td>
&lt;td>支持&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Rate Limit&lt;/td>
&lt;td>有&lt;/td>
&lt;td>有&lt;/td>
&lt;td>收费无&lt;/td>
&lt;td>未知&lt;/td>
&lt;td>有&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GUI 管理&lt;/td>
&lt;td>否&lt;/td>
&lt;td>否&lt;/td>
&lt;td>有&lt;/td>
&lt;td>有&lt;/td>
&lt;td>无&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ECC 证书链&lt;/td>
&lt;td>否&lt;/td>
&lt;td>否&lt;/td>
&lt;td>有&lt;/td>
&lt;td>未知&lt;/td>
&lt;td>无&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>客户支持&lt;/td>
&lt;td>社区&lt;/td>
&lt;td>收费&lt;/td>
&lt;td>收费&lt;/td>
&lt;td>收费&lt;/td>
&lt;td>收费&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="cloudflare">cloudflare&lt;/h2>
&lt;p>使用全局 API 密钥，您需要登录您的 Cloudflare 帐户以获取您的&lt;a class="link" href="https://dash.cloudflare.com/profile" target="_blank" rel="noopener"
>API 密钥&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">export CF_Key=&amp;#34;sdfsdfsdfljlbjkljlkjsdfoiwje&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">export CF_Email=&amp;#34;xxxx@sss.com&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>颁发证书：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">./acme.sh --issue --dns dns_cf -d example.com -d www.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="阿里云-dns-申请方式">阿里云 DNS 申请方式&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">export Ali_Key=&amp;#34;abcd&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">export Ali_Secret=&amp;#34;xxxxxxxxxx&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># RSA 证书
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">acme.sh --issue --dns dns_ali -d example.com -d *.example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># ECC 证书
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">acme.sh --issue --dns dns_ali -d example.com -d *.example.com --keylength ec-256
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ali_Key 和 Ali_Secret 需要从阿里云RAM访问控制中获取。&lt;/p>
&lt;h2 id="dnspod-申请方式">DNSPod 申请方式&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">export DP_Id=&amp;#34;1234&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">export DP_Key=&amp;#34;xxxxxxxxxxx&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">acme.sh --issue --dns dns_dp -d example.com -d www.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="文档">文档&lt;/h1>
&lt;p>&lt;a class="link" href="https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert" target="_blank" rel="noopener"
>如何颁发证书&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi" target="_blank" rel="noopener"
>使用 DNS API&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/acmesh-official/acme.sh/wiki/Options-and-Params" target="_blank" rel="noopener"
>选项和参数&lt;/a>&lt;/p></description></item><item><title>云服务</title><link>https://xiaoxiano.github.io/p/cloud-service/</link><pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate><guid>https://xiaoxiano.github.io/p/cloud-service/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>云是我们常用的服务，aws是头部厂商，但我们还有更多选择，以降低价格。即使aws有高昂且复杂的定价，仍有很多人使用，所以本文也将介绍。&lt;/p>
&lt;p>目前我在使用的云存储是Backblaze B2（兼容S3 API），价格仅为 Amazon S3、Microsoft Azure 和 Google Cloud 的1/4。&lt;/p>
&lt;p>我们同样需要一个CDN缓存加速（cloudflare 与传统 CDN 不同，CloudFlare 处理对网站的所有请求，能够阻止针对网站的攻击，可以再加到传统CDN前作为防护），CDN在用户第一次请求后，会在接近用户的区域缓存源服务器的静态资源（没人请求不缓存，不主动和服务器保持同步），后续访问就更加快速，并降低服务器压力，可以使用cloudfront免费套餐，如果每月传出超过 1T 数据，可以考虑使用 bunny CDN。&lt;/p>
&lt;h1 id="s3">S3&lt;/h1>
&lt;link href="https://fonts.googleapis.com/css?family=default" rel="stylesheet" type="text/css">
&lt;div style="font-family:'default'; font-size:20px; font-style:normal; font-weight:bold; color: blue">
Bucket桶
&lt;/div>
&lt;p>桶就类似于根文件夹，其命名必须全局性唯一。也就是说，如果别人已经创建了命为X的Bucket，你就不能再用X作为桶的名字了。&lt;/p>
&lt;link href="https://fonts.googleapis.com/css?family=default" rel="stylesheet" type="text/css">
&lt;div style="font-family:'default'; font-size:20px; font-style:normal; font-weight:bold; color: blue">
Events事件
&lt;/div>
&lt;p>在S3中，可以定义很多事件及其处理函数。比如当文件被创建，修改，删除，复制时，触发Lambda。这样就可以构建Event Driven Architecture，比如：新文件到S3 -&amp;gt; 触发Lambda处理函数 -&amp;gt; 处理结束后通知AppSync/GraphQL API -&amp;gt; 通知用户文件已经处理完毕。&lt;/p>
&lt;h2 id="s3费用决定因素">S3费用决定因素&lt;/h2>
&lt;p>官方：存储和管理数据时需要考虑六大 Amazon S3 成本组成：存储定价、请求和数据检索定价、数据传输和传输加速定价、数据管理和分析定价、复制定价以及使用 S3 Object Lambda 处理数据的价格。&lt;/p>
&lt;p>通常我们关注&lt;a class="link" href="https://aws.amazon.com/cn/s3/storage-classes/?nc1=h_ls" target="_blank" rel="noopener"
>存储类型&lt;/a>、&lt;a class="link" href="https://aws.amazon.com/s3/pricing/?nc1=h_ls" target="_blank" rel="noopener"
>储存数据量、请求量、数据传输&lt;/a>的费用。&lt;/p>
&lt;h2 id="存储类型">存储类型&lt;/h2>
&lt;h3 id="s3-标准">S3 标准&lt;/h3>
&lt;p>S3 标准是一种通用对象存储平台，提供较低的延迟和较高的吞吐量，因此非常适合各种使用案例，包括云应用程序、动态网站、内容分发、移动和游戏应用程序以及大数据分析。&lt;/p>
&lt;h3 id="s3-智能分层-通用选它">S3 智能分层 ——通用选它&lt;/h3>
&lt;p>S3 智能分层可自动识别并将不常访问的数据（30天内未访问的数据）移动到成本较低的基础架构中。当访问不频繁层中的对象时，它会自动移回更高性能层，并且30天时钟重新启动。在访问模式发生变化时，在两个访问层（频繁访问层和不频繁访问层）之间移动数据来实现自动节省成本，非常适用于访问模式未知或不断变化的数据。&lt;/p>
&lt;h3 id="s3标准-ia不频繁访问备份选它">S3标准-IA（不频繁访问）——备份选它&lt;/h3>
&lt;p>S3 Standard-IA 适用于不常访问（超过30天访问一次）、但在需要时要求快速访问的数据。提供与“S3 标准”相同的高持久性、高吞吐量和低延迟，成本较低且性能出色使得“S3标准–IA”很适合长期存储和备份，以及用作灾难恢复文件的数据存储。&lt;/p>
&lt;h3 id="s3-单区域---ia不频繁访问">S3 单区域 - IA（不频繁访问）&lt;/h3>
&lt;p>S3标准-IA 的单区域存储，此类别不会自动在至少三个AZ上存储数据。&lt;/p>
&lt;h3 id="s3-glacier-即时检索">S3 Glacier 即时检索&lt;/h3>
&lt;p>Amazon S3 Glacier Instant Retrieval 是一种归档存储类，可以为很少访问（超过90天访问一次）且需要毫秒级检索速度的长期数据提供最低成本的存储。&lt;/p>
&lt;h3 id="s3-glacier-灵活检索前称为-s3-glacier">S3 Glacier 灵活检索（前称为 S3 Glacier）&lt;/h3>
&lt;p>S3 Glacier Flexible Retrieval 为每年访问 1—2 次且异步检索的归档数据提供低成本存储，数据检索时间可配置，从数分钟到数小时不等。&lt;/p>
&lt;h3 id="amazon-s3-glacier-深度档案">Amazon S3 Glacier 深度档案&lt;/h3>
&lt;p>支持长期保留和数字化保存一年可能访问一到两次的数据，数据检索时间为 12 小时以内。&lt;/p>
&lt;h1 id="cloudfront">cloudfront&lt;/h1>
&lt;p>
&lt;link href="https://fonts.googleapis.com/css?family=default" rel="stylesheet" type="text/css">
&lt;div style="font-family:'default'; font-size:20px; font-style:normal; font-weight:bold; color: blue">
Origin domain
&lt;/div>
：源域，选S3 存储桶需配置Alternate Domain Names作为加速站点，写自己解析过的域名即为加速的站点&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Amazon S3 存储桶&lt;/strong>– &lt;code>DOC-EXAMPLE-BUCKET.s3.us-west-2.amazonaws.com&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>配置为网站的 Amazon S3 存储桶&lt;/strong>– &lt;code>https://DOC-EXAMPLE-BUCKET.s3-website.us-west-2.amazonaws.com&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>MediaStore 容器&lt;/strong>– &lt;code>examplemediastore.data.mediastore.us-west-1.amazonaws.com&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>MediaPackage 端点&lt;/strong>– &lt;code>examplemediapackage.mediapackage.us-west-1.amazonaws.com&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>亚马逊 EC2 实例&lt;/strong>– &lt;code>ec2-203-0-113-25.compute-1.amazonaws.com&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Elastic Load Balancing 负载均衡器&lt;/strong>– &lt;code>example-load-balancer-1234567890.us-west-2.elb.amazonaws.com&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>您自己的网络服务器&lt;/strong>– &lt;code>https://www.example.com&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="自选ip失败经历">自选ip失败经历&lt;/h2>
&lt;ol>
&lt;li>查看&lt;a class="link" href="https://d7uri8nf7uskq.cloudfront.net/tools/list-cloudfront-ips" target="_blank" rel="noopener"
>官方公布的ip段&lt;/a>（我们只需要边缘节点ip-&amp;ldquo;CLOUDFRONT_REGIONAL_EDGE_IP_LIST&amp;rdquo;，因为GLOBAL站点会自动判断离边缘节点最近的区域和进行健康检查，再连到边缘节点）&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/cloud-service/6.jpg"
width="1481"
height="776"
srcset="https://xiaoxiano.github.io/p/cloud-service/6_hu3b2469080d4faee78417b89ef3c50a6a_411521_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/cloud-service/6_hu3b2469080d4faee78417b89ef3c50a6a_411521_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="458px"
>&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>由于给的ip是CIDR格式，我们需要转换。先&lt;a class="link" href="https://uutool.cn/json2list/" target="_blank" rel="noopener"
>JSON转列表&lt;/a>。然后&lt;a class="link" href="https://github.com/codeexpress/cidr2ip" target="_blank" rel="noopener"
>CIDR转ip&lt;/a>（因为在线转不支持批量转换，所以建议下载这个工具），重命名为cidr2ip.exe，新建cidrs.txt，把列表复制进去，cmd执行&lt;code>cidr2ip -f cidrs.txt&lt;/code>可得很大一列ip。最后&lt;a class="link" href="https://reallyfreegeoip.org/bulk" target="_blank" rel="noopener"
>ip批量查询&lt;/a>，下载后可以看到ip地区，复制你所需地区的ip（查询速度会很慢，我的vps是日本的，排在最前面，运气很好没有查询很久）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建Cloud front测速链接&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>aws首页搜索cloud front
&lt;img src="https://xiaoxiano.github.io/p/cloud-service/1.png"
width="1135"
height="408"
srcset="https://xiaoxiano.github.io/p/cloud-service/1_hu85604e3e532b9e4406b55b22f5237dcf_46780_480x0_resize_box_3.png 480w, https://xiaoxiano.github.io/p/cloud-service/1_hu85604e3e532b9e4406b55b22f5237dcf_46780_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="278"
data-flex-basis="667px"
>&lt;/p>
&lt;p>创建分配&lt;/p>
&lt;p>源域填写能测速的地址：cachefly.cachefly.net
&lt;img src="https://xiaoxiano.github.io/p/cloud-service/2.png"
width="992"
height="612"
srcset="https://xiaoxiano.github.io/p/cloud-service/2_huc85c47aaf706b0a65eee2892fa33884b_26552_480x0_resize_box_3.png 480w, https://xiaoxiano.github.io/p/cloud-service/2_huc85c47aaf706b0a65eee2892fa33884b_26552_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="389px"
>&lt;/p>
&lt;p>协议：匹配查看器&lt;/p>
&lt;p>自动压缩对象：No
&lt;img src="https://xiaoxiano.github.io/p/cloud-service/3.png"
width="609"
height="359"
srcset="https://xiaoxiano.github.io/p/cloud-service/3_hud24bdac1aa1c3679a9782cb9786512ee_11726_480x0_resize_box_3.png 480w, https://xiaoxiano.github.io/p/cloud-service/3_hud24bdac1aa1c3679a9782cb9786512ee_11726_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="407px"
>&lt;/p>
&lt;p>缓存键和源请求（选择第二项）：Legacy cache settings
&lt;img src="https://xiaoxiano.github.io/p/cloud-service/4.png"
width="658"
height="403"
srcset="https://xiaoxiano.github.io/p/cloud-service/4_hua6090ffe8ecdcf317fc66ef50d6be74a_18973_480x0_resize_box_3.png 480w, https://xiaoxiano.github.io/p/cloud-service/4_hua6090ffe8ecdcf317fc66ef50d6be74a_18973_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="391px"
>&lt;/p>
&lt;p>创建&lt;/p>
&lt;p>复制得到的域名
&lt;img src="https://xiaoxiano.github.io/p/cloud-service/5.png"
width="930"
height="145"
srcset="https://xiaoxiano.github.io/p/cloud-service/5_hu494523e1baf1edb4b63c1cb845894442_11299_480x0_resize_box_3.png 480w, https://xiaoxiano.github.io/p/cloud-service/5_hu494523e1baf1edb4b63c1cb845894442_11299_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="641"
data-flex-basis="1539px"
>&lt;/p>
&lt;p>打开显示为测速地址即可（需要等到部署完成）&lt;/p>
&lt;ol start="4">
&lt;li>使用CloudflareSpeedTest](&lt;a class="link" href="https://github.com/XIU2/CloudflareSpeedTest" target="_blank" rel="noopener"
>https://github.com/XIU2/CloudflareSpeedTest&lt;/a>)优选ip，
cmd输入&lt;code>CloudflareST.exe -url xxxxxxxxxxx.cloudfront.net/100mb.test&lt;/code>发现ip全部不能用。&lt;/li>
&lt;/ol>
&lt;h1 id="aws查看vcpu">aws查看vcpu&lt;/h1>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/cloud-service/1.jpg"
width="471"
height="591"
srcset="https://xiaoxiano.github.io/p/cloud-service/1_hu2f8e34afb48fd63fc4903e6deb73443c_53028_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/cloud-service/1_hu2f8e34afb48fd63fc4903e6deb73443c_53028_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="79"
data-flex-basis="191px"
>&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/cloud-service/2.jpg"
width="467"
height="170"
srcset="https://xiaoxiano.github.io/p/cloud-service/2_hu4a3f08219f133ce2a57d82a81b51aa7f_25822_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/cloud-service/2_hu4a3f08219f133ce2a57d82a81b51aa7f_25822_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="274"
data-flex-basis="659px"
>&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/cloud-service/3.jpg"
width="1429"
height="363"
srcset="https://xiaoxiano.github.io/p/cloud-service/3_hu9e28f6c2b5c0aca10cd7be28458132ed_137509_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/cloud-service/3_hu9e28f6c2b5c0aca10cd7be28458132ed_137509_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="393"
data-flex-basis="944px"
>&lt;/p></description></item><item><title>测试接口</title><link>https://xiaoxiano.github.io/p/test/</link><pubDate>Thu, 04 Aug 2022 00:00:00 +0000</pubDate><guid>https://xiaoxiano.github.io/p/test/</guid><description>&lt;p>本文建议只阅读前4小节。主要参考文章&lt;a class="link" href="https://kalacloud.com/blog/postman-tutorial" target="_blank" rel="noopener"
>https://kalacloud.com/blog/postman-tutorial&lt;/a>。&lt;/p>
&lt;h1 id="api">API&lt;/h1>
&lt;p>API的英文即 &lt;code>A&lt;/code>pplication &lt;code>P&lt;/code>rogramming &lt;code>I&lt;/code>nterface 首字母的缩写，直译过来的意思就是：程序之间的接口。我更倾向于把API理解为，程序之间的合约。有关 API 是什么及它的意义这里就不展开讲了。&lt;/p>
&lt;p>&lt;strong>chrome浏览器开发者工具&lt;/strong>&lt;/p>
&lt;p>勾选上谷歌开发者工具的preserve log，保留上一个页面接口调用信息，从而方便我们查看&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/0.jpg"
width="834"
height="293"
srcset="https://xiaoxiano.github.io/p/test/0_hua9512b1a1e45ade4e3faab761d1fd8aa_86901_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/0_hua9512b1a1e45ade4e3faab761d1fd8aa_86901_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="284"
data-flex-basis="683px"
>&lt;/p>
&lt;h1 id="postman">Postman&lt;/h1>
&lt;p>&lt;strong>界面导航说明&lt;/strong>
&lt;img src="https://xiaoxiano.github.io/p/test/1.png"
width="958"
height="505"
srcset="https://xiaoxiano.github.io/p/test/1_hua5dba7d0290429ab5e2421ded386b7d2_112466_480x0_resize_box_3.png 480w, https://xiaoxiano.github.io/p/test/1_hua5dba7d0290429ab5e2421ded386b7d2_112466_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="455px"
>&lt;/p>
&lt;p>&lt;strong>请求：&lt;/strong>&lt;/p>
&lt;p>params：get请求传参。&lt;/p>
&lt;p>Authrization：鉴权&lt;/p>
&lt;p>Headers：请求头&lt;/p>
&lt;p>　　accept:客户端接收的数据类型。&lt;/p>
&lt;p>　　content-type:客户端发送给服务器的数据类型&lt;/p>
&lt;p>　　user-agent:客户端的类型&lt;/p>
&lt;p>　　xmlhttprequest:异步请求&lt;/p>
&lt;p>Body：Post请求传参&lt;/p>
&lt;p>　　none：没有参数&lt;/p>
&lt;p>　　form-data：文件上传（包含键值对和文件上传）&lt;/p>
&lt;p>　　x-www-from-urlencodeed：表单请求（键值对）&lt;/p>
&lt;p>　　raw：使用原始数据格式请求（JSON，XML，HTML，Text，Javascript）&lt;/p>
&lt;p>　　binary：二进制文件上传。&lt;/p>
&lt;p>Pre-request-script：请求之前的脚本。&lt;/p>
&lt;p>Tests；请求之后的脚本。&lt;/p>
&lt;p>Setting：设置&lt;/p>
&lt;p>Cookies：用于自动管理Cookie的功能&lt;/p>
&lt;p>&lt;strong>响应：&lt;/strong>&lt;/p>
&lt;p>Body：返回的信息&lt;/p>
&lt;p>　　Pretty（各种格式查看返回数据）&lt;/p>
&lt;p>　　Raw（文本格式）&lt;/p>
&lt;p>　　Preview（网页）&lt;/p>
&lt;p>Cookie：响应Cookie&lt;/p>
&lt;p>token鉴权码：&lt;/p>
&lt;p>　　csrf_token：一般情况下有效期是7-15天。&lt;/p>
&lt;p>　　access_token：一般情况下有效期是10分钟-2小时&lt;/p>
&lt;p>Headers：响应头&lt;/p>
&lt;p>TestResults：测试结果&lt;/p>
&lt;p>200 响应码&lt;/p>
&lt;h1 id="get-请求">GET 请求&lt;/h1>
&lt;ol>
&lt;li>GET 请求基本操作&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/3.jpg"
width="780"
height="276"
srcset="https://xiaoxiano.github.io/p/test/3_huea8564f558db9e40cdb712e1531d4db4_15474_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/3_huea8564f558db9e40cdb712e1531d4db4_15474_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="282"
data-flex-basis="678px"
>&lt;/p>
&lt;p>（1）点击主界面「+」号，新建一个请求页&lt;/p>
&lt;p>（2）选择 GET 请求命令&lt;/p>
&lt;p>（3）输入 API 地址&lt;/p>
&lt;p>在 GoRest API 设计中 GET 请求无需鉴权，所有我们直接点击「Send」即可远程调取服务器信息。&lt;/p>
&lt;p>如果我们只想看调取其中一位用户的信息应该怎么办呢？我们可以在 API URL 中带上参数。&lt;/p>
&lt;ol start="2">
&lt;li>带参数的 GET 请求&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/5.jpg"
width="780"
height="266"
srcset="https://xiaoxiano.github.io/p/test/5_hu61bc7237f03831ddaeca34567e20c96d_16924_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/5_hu61bc7237f03831ddaeca34567e20c96d_16924_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="293"
data-flex-basis="703px"
>&lt;/p>
&lt;p>如果我们想查询 ID 为 2043 的用户信息，我们只需要在请求页面中的 Params(参数) 标签页的 KEY - VALUE 内填写对应的参数即可，之后 Postman 会自动在 API URL 中生成你填写的参数，使 URL 带上参数 GET 请求。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">https://gorest.co.in/public/v1/users?id=2043
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>设置完成后，点击「Send」&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/6.jpg"
width="780"
height="588"
srcset="https://xiaoxiano.github.io/p/test/6_hua01f77d100f45c448c354a8248c0cdc6_27052_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/6_hua01f77d100f45c448c354a8248c0cdc6_27052_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>&lt;/p>
&lt;p>我们可以看到，返回值中仅包含我们请求的 user id 为 2043 的用户信息。&lt;/p>
&lt;ol start="3">
&lt;li>GET 请求中的多条件查询&lt;/li>
&lt;/ol>
&lt;p>有时，我们需要使用 API 进行多条件查询操作，比如想找 &lt;code>name&lt;/code> 值为 &lt;code>kalacloud.com&lt;/code> ，同时 &lt;code>gender&lt;/code> 值为 &lt;code>male&lt;/code> 的用户。（特别提示：此格式是通用写法，但最终要看 API 的开发者如何约定调用方式）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">BaseURL + ResourceName + ? + key1 = value1 + &amp;amp; + key 2 = value 2 ……
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>主 URL 之后使用 &lt;code>?&lt;/code> 连接参数，参数与参数之间使用 &lt;code>&amp;amp;&lt;/code> 连接符连接。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">https://gorest.co.in/public-api/users/?name=kalacloud.com&amp;amp;gender=male
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/7.jpg"
width="780"
height="279"
srcset="https://xiaoxiano.github.io/p/test/7_hu069cf5c74c5591848496c4d99804f130_19196_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/7_hu069cf5c74c5591848496c4d99804f130_19196_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="279"
data-flex-basis="670px"
>&lt;/p>
&lt;p>当然，我们可以直接在 Postman 的 Params 中直接填写 KEY - VALUE&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/8.jpg"
width="780"
height="230"
srcset="https://xiaoxiano.github.io/p/test/8_hu75397afa6c0d3767ce56a8662b2c88df_11487_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/8_hu75397afa6c0d3767ce56a8662b2c88df_11487_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="339"
data-flex-basis="813px"
>&lt;/p>
&lt;p>让 Postman 帮我们生成，然后点击「Send」&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/9.jpg"
width="780"
height="797"
srcset="https://xiaoxiano.github.io/p/test/9_huadee4e48b5745e802653f0461771db4b_34515_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/9_huadee4e48b5745e802653f0461771db4b_34515_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="97"
data-flex-basis="234px"
>&lt;/p>
&lt;p>可以看到 API GET 调取了我们设定的两个 VALUE 值的 data 信息。&lt;/p>
&lt;p>特别提示，你可以点击右上角的「Bulk Edit」进行参数的批量编辑&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/10.jpg"
width="780"
height="366"
srcset="https://xiaoxiano.github.io/p/test/10_hub64c0fcc57537599cc9a711fa7c58fa5_18468_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/10_hub64c0fcc57537599cc9a711fa7c58fa5_18468_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="213"
data-flex-basis="511px"
>&lt;/p>
&lt;h1 id="post-请求">POST 请求&lt;/h1>
&lt;p>&lt;strong>POST 方式一：模仿浏览器&lt;/strong>&lt;/p>
&lt;p>在发送一个get请求之后，postman会自动保存cookis，我们只需复制 Payload 的数据格式到 body ，复制 x-csrf-token 到 Headers ，发送这个 POST 请求&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/003.jpg"
width="923"
height="645"
srcset="https://xiaoxiano.github.io/p/test/003_hub0105dd4f86ead28a533442657c21c31_222168_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/003_hub0105dd4f86ead28a533442657c21c31_222168_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="143"
data-flex-basis="343px"
>&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/605.jpg"
width="1023"
height="763"
srcset="https://xiaoxiano.github.io/p/test/605_hu72141687809da2e9ab3ad09322a16397_193749_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/605_hu72141687809da2e9ab3ad09322a16397_193749_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="321px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.apifox.cn/help/app/best-practices/csrf-token" target="_blank" rel="noopener"
>自动方式可以参考&lt;/a>&lt;/p>
&lt;p>&lt;strong>POST 方式二：鉴权&lt;/strong>
在 Authorization 中添加鉴权方式和密钥，postman会自动添加到Headers，按照api写入所需body，发送这个 POST 请求&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/905.jpg"
width="1029"
height="424"
srcset="https://xiaoxiano.github.io/p/test/905_hua2cd1a8058bf2fb52d6ae553c1da31ce_121459_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/905_hua2cd1a8058bf2fb52d6ae553c1da31ce_121459_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="582px"
>&lt;/p>
&lt;h1 id="用-postman-发送第一个-put-更新请求">用 Postman 发送第一个 PUT 更新请求&lt;/h1>
&lt;p>PUT 请求一般用于更新服务器已有资源，如果服务器中没有对应的资源，那么 PUT 会创建相应的资源（特别提醒：虽然 PUT 有创建新资源的功能，但是否能创建成功，最终取决于你调用的 API 是否支持此功能）&lt;/p>
&lt;p>打开你的 Postman 我们来创建一个 PUT 请求。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>点击「+」号，新建一个请求页&lt;/p>
&lt;/li>
&lt;li>
&lt;p>请求类型选择「PUT」&lt;/p>
&lt;/li>
&lt;li>
&lt;p>根据第6节我们使用 POST 请求创建的资源 ID 为 &lt;code>1475&lt;/code> ，又根据 GoRest API 的文档得知，修改资源的 API 地址为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">https://gorest.co.in/public/v1/users/{{ID}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>，所以我们要使用 PUT 修改 ID 为 1475 资源的请求地址应该写：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">https://gorest.co.in/public/v1/users/1475
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>选择在 &lt;code>Body&lt;/code> 标签中填写 JSON 格式的资源修改信息。我们将 &lt;code>1475&lt;/code> 中的邮箱由&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">JiangChuan@kalacloud.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改为 &lt;code>Hi@kalacloud.com&lt;/code>，所以我们在 Body 中填写以下代码。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;name&amp;#34;: &amp;#34;kalacloud&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;gender&amp;#34;: &amp;#34;Male&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;email&amp;#34;: &amp;#34;Hi@kalacloud.com&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;status&amp;#34;: &amp;#34;Active&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>选择 Auth 标签，进行 API 鉴权，鉴权方法详见本文第6节《使用 Postman 对 API 鉴权》&lt;/li>
&lt;li>点击 「Send」发送 PUT 请求&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/17.jpg"
width="780"
height="588"
srcset="https://xiaoxiano.github.io/p/test/17_hueefed72c682fb492266139d2e0ca7c93_28056_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/17_hueefed72c682fb492266139d2e0ca7c93_28056_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>&lt;/p>
&lt;ul>
&lt;li>如上图所示，可以看到红4位置 响应代码返回 200 ，这说明 PUT 请求已经执行成功。&lt;/li>
&lt;li>返回的 Body 信息中，email 字段已经更新为 &lt;code>Hi@kalacloud.com&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="用-postman-发送第一个-patch-更新请求">用 Postman 发送第一个 PATCH 更新请求&lt;/h1>
&lt;p>PATCH 请求一般用于服务器资源的部分更新，它相对于 PUT 提交的数据更少，不用提整个数据，只需要提交需要修改的字段即可。有关 PUT 和 PATCH 的更多区别，可查看本文第9节。&lt;/p>
&lt;p>打开你的 Postman 我们来创建一个 PATCH 请求。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>点击「+」号，新建一个请求页&lt;/p>
&lt;/li>
&lt;li>
&lt;p>请求类型选择「PATCH」&lt;/p>
&lt;/li>
&lt;li>
&lt;p>根据第6节我们使用 POST 请求创建的资源 ID 为 &lt;code>1475&lt;/code> ，又根据 GoRest API 的文档得知，修改资源的 API 地址为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">https://gorest.co.in/public/v1/users/{{ID}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>，所以我们要使用 PATCH 修改 ID 为 1475 资源的请求地址应该写，到这里都和 PUT 请求修改资源的方法一样。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">https://gorest.co.in/public/v1/users/1475
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>选择在 &lt;code>Body&lt;/code> 标签中填写 JSON 格式的资源修改信息。上一节我们已经将 ID 为 &lt;code>1475&lt;/code> 资源的邮箱改为 &lt;code>Hi@kalacloud.com&lt;/code> ，接着我们用 PATCH 请求把这个邮箱改为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">HelloWord@kalacloud.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;email&amp;#34;:&amp;#34;HelloWord@kalacloud.com&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>选择 Auth 标签，进行 API 鉴权，鉴权方法详见本文第6节《使用 Postman 对 API 鉴权》&lt;/li>
&lt;li>点击 「Send」发送 PATCH 请求&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/18.jpg"
width="780"
height="588"
srcset="https://xiaoxiano.github.io/p/test/18_hueafacd55cb3e243dcca7f16297d3cd9e_27788_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/18_hueafacd55cb3e243dcca7f16297d3cd9e_27788_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如上图所示，可以看到红4位置 响应代码返回 200 ，这说明 PATCH 请求已经执行成功。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>返回的 Body 信息中，email 字段已经更新为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">HelloWord@kalacloud.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h1 id="put-和-patch-的区别">PUT 和 PATCH 的区别&lt;/h1>
&lt;p>在 HTTP 协议中，PUT 和 PATCH 都是用于更新服务器资源的命令，但他们有着不同的格式和用途。&lt;/p>
&lt;p>PUT 请求：一般用于更新服务器已有资源，如果服务器中没有对应的资源，那么 PUT 会创建相应的资源（特别提醒：虽然 PUT 有创建新资源的功能，但是否能创建最终取决于你调用的 API 是否支持此功能）&lt;/p>
&lt;p>PATCH 请求：用于局部更新服务器现有资源，它不用像 PUT 更新资源中的一点点也要提交所有字段信息，PATCH 更新哪个字段就提交哪个字段的更新信息即可。&lt;/p>
&lt;p>&lt;code>举例说明PUT 和 PATCH 的区别：&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/19.jpg"
width="780"
height="263"
srcset="https://xiaoxiano.github.io/p/test/19_huda2a1c0ebe4bcfb14216027fe2f1ab79_13723_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/19_huda2a1c0ebe4bcfb14216027fe2f1ab79_13723_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="296"
data-flex-basis="711px"
>&lt;/p>
&lt;p>同样是更新资源中的 Email 信息，PUT 需要带上资源中的所有信息，然后在更新&lt;code>（上图）&lt;/code>&lt;/p>
&lt;p>而 PATCH 则仅需要提交更新部分，即仅提交邮箱信息即可&lt;code>（下图）&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/20.jpg"
width="780"
height="269"
srcset="https://xiaoxiano.github.io/p/test/20_hu4966b7454a7afa23a140f0b93ed970ed_13804_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/20_hu4966b7454a7afa23a140f0b93ed970ed_13804_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="289"
data-flex-basis="695px"
>&lt;/p>
&lt;p>那么，如果 PUT 像 PATCH 一样仅提交资源的局部信息会发生什么呢？会 400 报错。&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/21.jpg"
width="780"
height="491"
srcset="https://xiaoxiano.github.io/p/test/21_huf83142ee0bab4f71dc642b8adcfa23ad_24623_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/21_huf83142ee0bab4f71dc642b8adcfa23ad_24623_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="158"
data-flex-basis="381px"
>&lt;/p>
&lt;p>PUT 不论修改多少，必须把修改资源的全部字段写全，否则会 400 报错。&lt;/p>
&lt;h1 id="用-postman-发送第一个-delete-删除请求">用 Postman 发送第一个 DELETE 删除请求&lt;/h1>
&lt;p>我们在上文讲了获取(GET)，创建(POST)，更新(PUT / PATCH) 请求，接着我们来说说删除(DELETE) 请求。顾名思义，DELETE 请求执行可删除整个资源。我们来直接实践一次你就明白了。&lt;/p>
&lt;p>打开你的 Postman ，跟随本教程一起创建一个 DELETE 请求。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>点击「+」号，新建一个请求页&lt;/p>
&lt;/li>
&lt;li>
&lt;p>请求类型选择「DELETE」&lt;/p>
&lt;/li>
&lt;li>
&lt;p>我们来把上文刚刚创建的 ID 为 &lt;code>1475&lt;/code> 的资源彻底删掉。根据 GoRest API 的文档得知，删除资源的 API 请求地址为&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">https://gorest.co.in/public/v1/users/{{ID}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>，所以我们要使用 &lt;code>PATCH&lt;/code> 删除 ID 为 1475 资源的请求地址应该写：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">https://gorest.co.in/public/v1/users/1475
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>选择 Auth 标签，进行 API 鉴权，鉴权方法详见本文第6节《使用 Postman 对 API 鉴权》&lt;/li>
&lt;li>点击 「Send」发送 DELETE 请求，删除对应的资源。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/22.jpg"
width="780"
height="393"
srcset="https://xiaoxiano.github.io/p/test/22_hua865477ba4d92d0fcb103f74bff262bd_20907_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/22_hua865477ba4d92d0fcb103f74bff262bd_20907_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="476px"
>&lt;/p>
&lt;p>如上图所示，提交 DELETE 请求后，响应代码为 204 ，返回的 body 为空，删除成功。&lt;/p>
&lt;p>特别提示：在 GoRest 的文档说明中，特别说了 DELETE 删除返回值的状态。&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/23.jpg"
width="780"
height="107"
srcset="https://xiaoxiano.github.io/p/test/23_hu5a444ecc2cd619d231b5e2d91f409217_12916_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/23_hu5a444ecc2cd619d231b5e2d91f409217_12916_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="728"
data-flex-basis="1749px"
>&lt;/p>
&lt;p>API 返回状态具体是怎么样的，还要看 API 的开发者是如何约定的，并非只有返回 200 才是成功的。&lt;/p>
&lt;h1 id="postman-中的全局变量环境变量集合变量的设置">Postman 中的全局变量、环境变量、集合变量的设置&lt;/h1>
&lt;ol>
&lt;li>Postman 设置变量的意义&lt;/li>
&lt;/ol>
&lt;p>Postman 里有多种变量，我们可以把某些重要的值抽象出来变成变量，方便我们做场景 / 条件切换。比如，我们可以把 baseURL 抽出来，在环境变量里设置「生产环境变量」和「测试环境变量」，之后，我们只需要切换标签即可快速将数据从一个环境切换到另一个环境中，非常方便。&lt;/p>
&lt;ol start="2">
&lt;li>Postman 常用的三种变量形式&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>全局变量：全局变量一旦声明，即可应用到 Postman 中所有测试的 API 中。任何请求都可以直接使用全局变量，它的作用域是全局的。&lt;/li>
&lt;li>环境变量：Postman 的环境变量可以理解为一组选项，当这组环境变量选项被选中时，才会生效，特别适合「生产环境」和「测试环境」之间的切换等应用场景。&lt;/li>
&lt;li>集合变量：集合变量是针对集合（Collections）生效的，一个集合下可能有 N 条 API 请求，集合变量可以一次修改集合下的所有变量数值。&lt;/li>
&lt;/ul>
&lt;p>以上三种变量的作用域从大到小为 全局 集合 环境，当三个变量形式同时作用于一个 API 测试条时，Postman 会优先使用最小作用域变量。&lt;/p>
&lt;ol start="3">
&lt;li>如何在 Postman 设置全局变量与环境变量&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/24.jpg"
width="780"
height="339"
srcset="https://xiaoxiano.github.io/p/test/24_hu3f46bdba652759e817d03a30c2f3c0fe_20545_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/24_hu3f46bdba652759e817d03a30c2f3c0fe_20545_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="230"
data-flex-basis="552px"
>&lt;/p>
&lt;ul>
&lt;li>新建一个请求页，点击右上角的「小眼睛」进入变量设置页。&lt;/li>
&lt;li>页面上方为「环境变量」，我们点击编辑设置环境变量名为「卡拉云_API 测试环境」&lt;/li>
&lt;li>VARIABLE 设置为 &lt;code>baseURL&lt;/code>，INITIAL VALUE 设置为 &lt;code>https://gorest.co.in&lt;/code> ，保存之后我们就可以使用 &lt;code>{{baseURL}}&lt;/code> 变量来替代 API URL 了。&lt;/li>
&lt;li>页面下方为「全局变量」，VARIABLE 设置为 &lt;code>kalacloud_id&lt;/code>，INITIAL VALUE 设置为 &lt;code>2312&lt;/code> (2312 为 GoRest 中的一个已存在的用户信息 ID)，保存后我们就可以使用 &lt;code>{{kalacloud_id}}&lt;/code> 变量来替代 ID 值了。&lt;/li>
&lt;/ul>
&lt;p>我们来一起测一下刚刚设置好的「全局变量」和「环境变量」是否生效。&lt;/p>
&lt;ul>
&lt;li>新建一个 GET 请求页，地址栏填入：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{{baseURL}}/public/v1/users?id={{kalacloud_id}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>点击「Send」&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/25.jpg"
width="780"
height="802"
srcset="https://xiaoxiano.github.io/p/test/25_hu532d10b5292918f32cc50bde7cdeca2c_37000_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/25_hu532d10b5292918f32cc50bde7cdeca2c_37000_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="97"
data-flex-basis="233px"
>&lt;/p>
&lt;p>返回响应代码为 200 说明请求成功，返回的 Body 信息是 ID 为 &lt;code>2312&lt;/code> 的用户信息，说明全局和环境变量已生效。&lt;/p>
&lt;ol start="4">
&lt;li>如何在 Postman 设置集合变量&lt;/li>
&lt;/ol>
&lt;p>集合变量是指应用在整个集合所有请求中的变量，集合变量优先与其他变量应用与请求，也就是说如果有集合变量，那么其他变量与集合变量相冲突的化，优先执行集合变量。&lt;/p>
&lt;p>集合变量很适合临时修改整个集合中的变量，来针对集合进行测试。&lt;/p>
&lt;p>打开你的 Postman，我们一起操作一遍。&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/26.jpg"
width="780"
height="275"
srcset="https://xiaoxiano.github.io/p/test/26_hu79d68642b788fbbc24059bc3291e54c3_19910_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/26_hu79d68642b788fbbc24059bc3291e54c3_19910_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="283"
data-flex-basis="680px"
>&lt;/p>
&lt;ul>
&lt;li>选中一个集合，点击集合标题右侧「&amp;hellip;」选择编辑。&lt;/li>
&lt;li>进入集合设置页，选择 Variables 设置集合变量&lt;/li>
&lt;li>此时，整个集合下所有请求页，都应用了此集合变量。&lt;/li>
&lt;/ul>
&lt;h1 id="如何使用-postman-pre-request-scripts-预请求脚本">如何使用 Postman &lt;code>Pre-request scripts&lt;/code> 预请求脚本&lt;/h1>
&lt;p>Pre-request scripts 预请求脚本是在 API 请求之前执行的脚本，我们可以临时更改请求的某些变量。一般预请求脚本有这么两种常见的应用场景。(1)设置动态请求头信息。 (2)设置动态请求参数信息。比如，当我们要请求一个与时间有关的资源时，我们可以在预请求脚本中添加 &lt;code>timestamp&lt;/code> 字段，这是一个动态值，我们可以通过前置请求脚本来实现。&lt;/p>
&lt;p>&lt;code>举例说明：&lt;/code>比如我们要在 header 中包含一个时间戳，我们可以这样操作&lt;/p>
&lt;ul>
&lt;li>在 Pre-request scripts 中添加获取时间戳的代码&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">pm.environment.set(&amp;#34;TimeStampHeader&amp;#34;,new Date());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/27.jpg"
width="780"
height="331"
srcset="https://xiaoxiano.github.io/p/test/27_hu8d24557a50ac1abeee8fc4533f535bdb_18505_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/27_hu8d24557a50ac1abeee8fc4533f535bdb_18505_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="235"
data-flex-basis="565px"
>&lt;/p>
&lt;ul>
&lt;li>在 header 中添加预脚本中的变量 &lt;code>TimeStampHeader&lt;/code> 当请求时，Postman 会先执行预脚本获取时间戳，然后再将时间戳赋予到 header 中 timestamp 值中。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/28.jpg"
width="780"
height="312"
srcset="https://xiaoxiano.github.io/p/test/28_huc7645f22b2c0495ea5ca0e9d9f854f5c_15945_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/28_huc7645f22b2c0495ea5ca0e9d9f854f5c_15945_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="250"
data-flex-basis="600px"
>&lt;/p>
&lt;ul>
&lt;li>接着我们来执行这条 GET 请求，打开控制控制台，在控制台中，可以看到 Request Headers 中包含我们刚刚设置的时间戳 「timestamp」特别提示：有关控制台的讲解，在本教程第14节。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/29.jpg"
width="780"
height="583"
srcset="https://xiaoxiano.github.io/p/test/29_huae5b01fcbe01a7531db07d1193bc4403_30930_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/29_huae5b01fcbe01a7531db07d1193bc4403_30930_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="321px"
>&lt;/p>
&lt;p>&lt;code>附：常用的 Pre-request scripts ：&lt;/code>&lt;/p>
&lt;p>&lt;code>获取变量&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">//通用语法
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">postman.getGlobalVariable(&amp;#34;key&amp;#34;); //获取全局变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">postman.getEnvironmentVariable(&amp;#34;key&amp;#34;); //获取环境变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//postman native app 特有语法
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pm.globals.get(&amp;#34;key&amp;#34;); //获取全局变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pm.environment.get(&amp;#34;key&amp;#34;); //获取环境变量
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>设置变量&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">//通用语法
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">postman.setGlobalVariable(&amp;#34;key&amp;#34;,&amp;#34;value&amp;#34;); //设置全局变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">postman.setEnvironmentVariable(&amp;#34;key&amp;#34;,&amp;#34;value&amp;#34;); //设置环境变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//postman native app 特有语法
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pm.globals.get(&amp;#34;key&amp;#34;,&amp;#34;value&amp;#34;); //设置全局变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pm.environment.get(&amp;#34;key&amp;#34;,&amp;#34;value&amp;#34;); //设置环境变量
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>清除变量&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">//通用语法
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">postman.clearGlobalVariable(&amp;#34;key&amp;#34;); //清除全局变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">postman.clearEnvironmentVariable(&amp;#34;key&amp;#34;); //清除环境变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//postman native app 特有语法
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pm.globals.unset(&amp;#34;key&amp;#34;); //清除全局变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pm.environment.unset(&amp;#34;key&amp;#34;); //清除环境变量
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>将数组、嵌套对象存储到全局&amp;amp;环境变量中&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">//将数组储存到环境变量中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var array = [1, 2, 3, 4];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">postman.setEnvironmentVariable(&amp;#34;array&amp;#34;, JSON.stringify(array));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//将嵌套对象储存到环境变量中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var obj = { a: [1, 2, 3, 4], b: { c: &amp;#39;val&amp;#39; } };
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">postman.setEnvironmentVariable(&amp;#34;obj&amp;#34;, JSON.stringify(obj));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//从环境变量中获取数组对象
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var array = JSON.parse(postman.getEnvironmentVariable(&amp;#34;array&amp;#34;));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//从环境变量中获取嵌套对象/json对象
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var obj = JSON.parse(postman.getEnvironmentVariable(&amp;#34;obj&amp;#34;));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="如何创建-postman-tests-测试脚本---postman-断言功能">如何创建 Postman Tests 测试脚本 - Postman 断言功能&lt;/h1>
&lt;p>在 Postman 中 Pre-request 和 Tests 是两兄弟，一个是在调用前执行（Pre-request），一个是在调用后执行（Tests），我们可以在 Tests 中使用 JavaScript 校验代码协助我们验证结果，可以说 Tests 是 Postman 的断言功能&lt;/p>
&lt;ol>
&lt;li>&lt;code>Postman Tests 断言的实际应用&lt;/code>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;code>Postman 状态类断言&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/30.jpg"
width="780"
height="425"
srcset="https://xiaoxiano.github.io/p/test/30_hu6d4c59ad85bc4762a1650b211ae988f8_25225_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/30_hu6d4c59ad85bc4762a1650b211ae988f8_25225_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="183"
data-flex-basis="440px"
>&lt;/p>
&lt;p>1.我们首先创建一个 GET 请求，然后点击 Postman 中 Tests 标签，进入断言设置。&lt;/p>
&lt;p>2.我们可以在右侧已经预设好的断言代码，我们先点击「Status code: Code is 200」，可以看到预设的代码直接写入编辑框。这段代码的意思是，如果执行调用，服务器返回响应代码为 &lt;code>200&lt;/code> 时，判断为 &lt;code>PASS&lt;/code> 即调用成功。&lt;/p>
&lt;p>3.点击「Send」执行 GET 请求，返回的断言可以在 Test Results 中看到结果。&lt;/p>
&lt;p>4.绿色的 PASS，说明服务器返回的响应代码为 200 ，调用成功。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Postman 结果比较类断言&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>我们再添加一条带有变量的 JavaScript 断言设置，比较预期结果和实际返回结果之间是否一致。&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/31.jpg"
width="780"
height="389"
srcset="https://xiaoxiano.github.io/p/test/31_hubc556dbf787462ceaff1b4aa65111ce5_18017_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/31_hubc556dbf787462ceaff1b4aa65111ce5_18017_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="481px"
>&lt;/p>
&lt;p>我们刚刚 GET 请求了 ID 2312 的用户信息，其中 &lt;code>name&lt;/code> 的值为 &lt;code>kalacloud&lt;/code>&lt;/p>
&lt;p>那么我们接下来写一个 JS 判断预期与返回结果是否一致。即预期为 &lt;code>name&lt;/code> 的值为「kalacloud」，写断言自动判断返回结果的&lt;code>name&lt;/code>值是否也是「kalacloud」&lt;/p>
&lt;p>1.在 Tests 选项卡右侧选择「Response body:JSON value check」，我们来检测 &lt;code>ID&lt;/code> 为 &lt;code>2312&lt;/code> 的返回值中，&lt;code>name&lt;/code> 的值是否为 &lt;code>kalacloud&lt;/code>&lt;/p>
&lt;p>2.我们将「Your Test Name」替换为「检查 ID 为 2312 的 name 返回值为 kalacloud」让这条测试的名字直接反应出我们想测试的内容。&lt;/p>
&lt;p>3.使用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">jsonData.data[0].name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>代替&lt;code>jsonData.value&lt;/code> ，即检测第一个返回值中的 &lt;code>name&lt;/code> 的 &lt;code>value&lt;/code>&lt;/p>
&lt;p>4.检测返回值：在 &lt;code>to.eql()&lt;/code> 中输入待检测值 &lt;code>&amp;quot;kalacloud&amp;quot;&lt;/code>，即需要检测的 text。&lt;/p>
&lt;p>5.代码如下，你可以复制并根据你的情况简单修改，然后在 Postman 中，跟随教程一起测试。&lt;/p>
&lt;p>&lt;code>特别注意：&lt;/code>这里的 &lt;code>ID = 2312&lt;/code> 是我这里的情况，你需要根据你的情况进行相应修改。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">pm.test(&amp;#34;Status code is 200&amp;#34;, function () {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pm.response.to.have.status(200);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pm.test(&amp;#34;检查 ID 为 2312 的 name 返回值为 kalacloud&amp;#34;, function () {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var jsonData = pm.response.json();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pm.expect(jsonData.data[0].name).to.eql(&amp;#34;kalacloud&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/32.jpg"
width="780"
height="436"
srcset="https://xiaoxiano.github.io/p/test/32_hu47217341b9871beaf84079c07f12c825_29010_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/32_hu47217341b9871beaf84079c07f12c825_29010_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="429px"
>&lt;/p>
&lt;h1 id="如何在-postman-中使用控制台">如何在 Postman 中使用控制台&lt;/h1>
&lt;p>控制台可以非常直观的显示当前调用的一系列信息，我们可以在「菜单 → view → Show Postman Console」或者点击 Postman 左下角的「Console」图标，打开控制台。&lt;/p>
&lt;p>我们可以在 Tests 测试脚本中加入 &lt;code>console.log&lt;/code> 来显示我们需要在控制台显示的调用信息。&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/33.jpg"
width="780"
height="806"
srcset="https://xiaoxiano.github.io/p/test/33_hu3eb35c9a910b1043d5774817ccd70a83_40816_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/33_hu3eb35c9a910b1043d5774817ccd70a83_40816_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="96"
data-flex-basis="232px"
>&lt;/p>
&lt;p>如上图，我们在 Test 脚本中加入以下代码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">console.log(&amp;#34;本次测试 id 值为&amp;#34;,pm.variables.get(&amp;#34;kalacloud_id&amp;#34;));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以显示隐藏在变量下面的具体变量值，方便我们测试时，进行相应的判断。&lt;/p>
&lt;h1 id="如何使用-runner-批量执行测试批量更换变量测试">如何使用 Runner 批量执行测试，批量更换变量测试&lt;/h1>
&lt;p>当我们有一组 API 且这一组之间相互关联的关系，使用手动测试效率非常低。这时，我们就要用到 Postman 的批量执行（Runner）功能，Runner 不仅可以批量执行 API 调用，还可以批量更换变量。掌握此方法，大幅度提升 API 测试效率。&lt;/p>
&lt;p>打开你的 Postman ，跟随本教程一起操作一遍吧。&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/34.jpg"
width="774"
height="440"
srcset="https://xiaoxiano.github.io/p/test/34_huc68b28d4dd28a1b9f68975346c2e3229_24137_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/34_huc68b28d4dd28a1b9f68975346c2e3229_24137_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="422px"
>&lt;/p>
&lt;ul>
&lt;li>本次批量 API 测试，我们先导入一个 CSV 文件，文件中包含四组等待新建的用户信息，将 CSV 文件导入 Runner 中待用。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/35.jpg"
width="780"
height="289"
srcset="https://xiaoxiano.github.io/p/test/35_hu6db0e7d82d4a94829a1ccc5dcf1f991c_18048_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/35_hu6db0e7d82d4a94829a1ccc5dcf1f991c_18048_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="269"
data-flex-basis="647px"
>&lt;/p>
&lt;ul>
&lt;li>新建 POST 调用页，在 Body 里写上创建用户所需信息，所有值使用变量替代，这些变量将从 CSV 中读取。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/36.jpg"
width="780"
height="259"
srcset="https://xiaoxiano.github.io/p/test/36_hu2f772fbf6a2081459114be20dbd25c84_17021_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/36_hu2f772fbf6a2081459114be20dbd25c84_17021_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="301"
data-flex-basis="722px"
>&lt;/p>
&lt;ul>
&lt;li>新建 GET 调用页，使用 &lt;code>email&lt;/code> 作为查询 KEY 进行查询，如果上一步 POST 执行成功，那么 GET 就能成功查询到新建用户对应的 email，查询到表示 POST 创建成功。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/37.jpg"
width="780"
height="266"
srcset="https://xiaoxiano.github.io/p/test/37_hu0865bc58493d116029bf159eebe8e135_19034_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/37_hu0865bc58493d116029bf159eebe8e135_19034_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="293"
data-flex-basis="703px"
>&lt;/p>
&lt;ul>
&lt;li>在「卡拉云_kalacloud.com_批量测试」这个集合中设置 Tests 中设置全局断言，每当一个调用执行完毕时，进行 Tests 一次判断。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">pm.test(&amp;#34;Status code is 200&amp;#34;, function () {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pm.response.to.have.status(200);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/38.jpg"
width="780"
height="376"
srcset="https://xiaoxiano.github.io/p/test/38_hu3bcce46d83762d09643fbe1c6435ef67_21759_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/38_hu3bcce46d83762d09643fbe1c6435ef67_21759_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="207"
data-flex-basis="497px"
>&lt;/p>
&lt;ul>
&lt;li>打开「卡拉云_kalacloud.com_批量测试」合集的「Run Collection」的设置页&lt;/li>
&lt;li>Iterations：这是测试组，我们 CSV 文件中有 4 组测试条目&lt;/li>
&lt;li>Delay：延迟，一般填 2000 毫秒，太密集的请求，容易被服务器拒绝&lt;/li>
&lt;li>Data：这里选择我们刚刚的 CSV 文件：kalacloud_users.csv 导入测试数据&lt;/li>
&lt;li>点击 RUN 蓝色按钮开始执行批量测试&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/test/39.jpg"
width="780"
height="677"
srcset="https://xiaoxiano.github.io/p/test/39_hu55767ebc7fa9a347e2a26860b454c923_28108_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/test/39_hu55767ebc7fa9a347e2a26860b454c923_28108_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="115"
data-flex-basis="276px"
>&lt;/p>
&lt;p>从上图可以看到，Postman 按顺序提交了 POST 请求和 GET 请求，并连续测试了从 CSV 文件导入的 4 组数据。一键批量测试，相当高效。&lt;/p></description></item><item><title>flutter基础</title><link>https://xiaoxiano.github.io/p/flutter/</link><pubDate>Sat, 30 Apr 2022 00:00:00 +0000</pubDate><guid>https://xiaoxiano.github.io/p/flutter/</guid><description>&lt;h1 id="安装">安装&lt;/h1>
&lt;h2 id="java版本控制jvms">java版本控制（jvms）&lt;/h2>
&lt;p>我们可能需要多个java版本，主要是为了&lt;a class="link" href="https://docs.gradle.org/current/userguide/compatibility.html#compatibility" target="_blank" rel="noopener"
>兼容Gradle版本&lt;/a>。&lt;/p>
&lt;ol>
&lt;li>&lt;a class="link" href="https://github.com/ystyle/jvms/releases" target="_blank" rel="noopener"
>下载&lt;/a>，解压到想要的路径&lt;/li>
&lt;li>管理员身份打开cmd，cd到在jvms.exe所在的目录下，执行&lt;code>jvms init&lt;/code>&lt;/li>
&lt;li>&lt;code>jvms.exe rls&lt;/code>可列出java版本，如果失败，打开&lt;code>https://site.ip138.com/raw.Githubusercontent.com/&lt;/code>查看ip，在&lt;code>C:\Windows\System32\drivers\etc\hosts&lt;/code>末尾添加一行&lt;code>[ip] raw.githubusercontent.com&lt;/code>&lt;/li>
&lt;li>安装&lt;code>jvms install [version]&lt;/code>&lt;/li>
&lt;li>&lt;code>jvms.exe ls&lt;/code>列出已安装JDK版本&lt;/li>
&lt;li>&lt;code>jvms.exe switch [version]&lt;/code>切换版本&lt;/li>
&lt;li>&lt;code>java -version&lt;/code>&lt;/li>
&lt;li>&lt;code>jvms.exe remove [version]&lt;/code>删除某个版本&lt;/li>
&lt;/ol>
&lt;h2 id="android-studio">Android Studio&lt;/h2>
&lt;p>&lt;strong>安装配置Android Studio&lt;/strong>&lt;/p>
&lt;p>&lt;a class="link" href="https://developer.android.com/studio" target="_blank" rel="noopener"
>下载地址&lt;/a>&lt;/p>
&lt;p>&lt;strong>Android SDK Tools:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>path:&lt;code>C:\Users\[username]\AppData\Local\Android\Sdk\tools&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Android SDK Platform-Tools:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>path:&lt;code>C:\Users\[username]\AppData\Local\Android\Sdk\platform-tools&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Android SDK&lt;/strong>&lt;/p>
&lt;p>Tools -&amp;gt; SDK Manager -&amp;gt; 编辑Android SDK Location（默认即可）&lt;/p>
&lt;ul>
&lt;li>SDK Platforms：推荐Android 7.0及以上&lt;/li>
&lt;li>SDK Tools
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/intel/haxm/releases" target="_blank" rel="noopener"
>下载安装&lt;/a> -&amp;gt; Intel x86 Emulator Accelerator (HAXM installer)-Deprecated（模拟器支持）&lt;/li>
&lt;li>Android SDK Command-line Tools&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="flutter版本控制fvm">flutter版本控制（fvm）&lt;/h2>
&lt;ol>
&lt;li>安装 fvm，命令行运行以下命令：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">choco install fvm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>查看当前有哪些版本可用&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">fvm releases
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>安装指定版本&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">// 有可能缺失，建议手动下载
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fvm install [version]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>列出所有已安装的 Flutter SDK 版本。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">fvm list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>VS Code配置&lt;/li>
&lt;/ol>
&lt;p>在项目中创建一个.vscode文件夹，然后创建一个名为settings.json的文件并添加：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;dart.flutterSdkPath&amp;#34;: &amp;#34;.fvm/flutter_sdk&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Remove .fvm files from search
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;search.exclude&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;**/.fvm&amp;#34;: true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Remove from file watching
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;files.watcherExclude&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;**/.fvm&amp;#34;: true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="6">
&lt;li>切换版本&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>全局切换：&lt;code>fvm global [version]&lt;/code>&lt;/li>
&lt;li>项目中切换（每次都要）：项目目录下，终端运行&lt;code>fvm use [version]&lt;/code>，重启vscode&lt;/li>
&lt;/ul>
&lt;style type="text/css">
.box {
padding: 1.6em;
padding-top: 1.4em;
line-height: 1.4em;
margin-top: 2em;
margin-bottom: 4em;
border-radius: 4px;
color: #444;
background: #f3ebe850;
}
.box-title {
margin: -18px -18px 12px;
padding: 4px 18px;
border-radius: 4px 4px 0 0;
font-weight: 700;
color: #fff;
background: #6ab0de;
}
.box.warning .box-title {
background: #ff6b6b;
}
.box.warning {
background: #ff6b6b4f;
}
.box.info .box-title {
background: #0089e488;
}
.box.info {
background: #0089e41c;
box-shadow: 3px 3px 5px #0089e410;
}
.box.important .box-title {
background: #f7ec2c;
}
.box.important {
background: #f7ec2c7d;
}
.box.tip .box-title {
background: #a3ffa34d;
}
.box.tip {
background: #a3ffa34d;
box-shadow: 3px 3px 5px #0089e410;
}
.icon-box {
display: inline-flex;
align-self: center;
margin-right: 8px;
}
.icon-box img,
.icon-box svg {
height: 1em;
width: 1em;
fill: currentColor;
}
.icon-box img,
.icon-box.baseline svg {
top: 0.125em;
position: relative;
}
.box p {
margin-bottom: 0.6em;
}
.box p:first-of-type {
display: inline;
}
.box p:nth-of-type(2) {
margin-top: 0.6em;
}
.box p:last-child {
margin-bottom: 0;
}
&lt;/style>
&lt;svg width="0" height="0" display="none" xmlns="http://www.w3.org/2000/svg">
&lt;symbol id="tip-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"/>
&lt;/symbol>
&lt;symbol id="important-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="warning-box" viewBox="0 0 576 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"/>
&lt;/symbol>
&lt;symbol id="info-box" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
&lt;path
d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"/>
&lt;/symbol>
&lt;/svg>&lt;div class="box info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>运行上述命令后，项目中创建了一个名为.fvm 的文件夹，文件夹中有 flutter SDK，如果不希望提交此文件夹，在.gitignore文件中添加&lt;code>.fvm/flutter_sdk&lt;/code>&lt;/p>
&lt;/div>
&lt;ol start="7">
&lt;li>删除某个版本&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">fvm remove [version]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="直接安装不推荐">直接安装（不推荐）&lt;/h2>
&lt;ol>
&lt;li>安装 JDK&lt;/li>
&lt;/ol>
&lt;p>&lt;a class="link" href="https://www.oracle.com/java/technologies/downloads/#jdk17-windows" target="_blank" rel="noopener"
>下载地址&lt;/a>&lt;/p>
&lt;ol start="2">
&lt;li>安装flutter(windows)&lt;/li>
&lt;/ol>
&lt;p>&lt;a class="link" href="https://docs.flutter.dev/get-started/install/windows" target="_blank" rel="noopener"
>flutter安装&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">set PUB_HOSTED_URL=&amp;#34;https://mirrors.tuna.tsinghua.edu.cn/dart-pub&amp;#34; #配置国内镜像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set FLUTTER_STORAGE_BASE_URL=&amp;#34;https://mirrors.tuna.tsinghua.edu.cn/flutter&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>配置环境变量&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Dart:&lt;/strong> 无需配置，flutter现在自带dart。&lt;/p>
&lt;p>&lt;strong>Flutter:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>path:&lt;code>C:\flutter\bin&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Java:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>JAVA_HOME&lt;/code>:&lt;code>C:\Program Files\Java\jdk-1.8&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>path:&lt;code>%JAVA_HOME%\bin&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>path:&lt;code>%JAVA_HOME%\jre\bin&lt;/code> (如果是jdk-17则不需要配置jre)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除自动配置的环境变量path：&lt;/p>
&lt;ul>
&lt;li>&lt;code>C:\Program Files\Common Files\Oracle\Java\javapath&lt;/code>&lt;/li>
&lt;li>&lt;code>C:\Program Files (x86)\Common Files\Oracle\Java\javapath&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="box info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>不推荐设置系统环境变量&lt;code>classpath&lt;/code>，始终建议通过&lt;code>-cp&lt;/code>命令传入，JVM默认的&lt;code>classpath&lt;/code>为&lt;code>.&lt;/code>，即当前目录。&lt;/p>
&lt;/div>
&lt;h1 id="创建-flutter-项目">创建 Flutter 项目&lt;/h1>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/flutter/1.jpg"
width="1317"
height="897"
srcset="https://xiaoxiano.github.io/p/flutter/1_huff754efb2c95fdbde3860fe3076e21cb_150899_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/flutter/1_huff754efb2c95fdbde3860fe3076e21cb_150899_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="146"
data-flex-basis="352px"
>&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/flutter/2.jpg"
width="1279"
height="903"
srcset="https://xiaoxiano.github.io/p/flutter/2_hucf4eac703c21ad8fecf4d8297c8a4909_91996_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/flutter/2_hucf4eac703c21ad8fecf4d8297c8a4909_91996_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="339px"
>&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/flutter/3.jpg"
width="1234"
height="897"
srcset="https://xiaoxiano.github.io/p/flutter/3_huf5771a4378f496e08370a30e6aea2a57_268237_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/flutter/3_huf5771a4378f496e08370a30e6aea2a57_268237_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="330px"
>&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/flutter/4.jpg"
width="1738"
height="975"
srcset="https://xiaoxiano.github.io/p/flutter/4_hu749a3588d7f75328d4ce8cfeb04f0fea_609718_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/flutter/4_hu749a3588d7f75328d4ce8cfeb04f0fea_609718_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="427px"
>&lt;/p>
&lt;h1 id="构建">构建&lt;/h1>
&lt;p>构建项目工具是必学内容，也是项目容易报错的部分，所以放在前面。&lt;/p>
&lt;p>Gradle是Android官方工具，比Maven更灵活高效，它具有高度可定制性，以适应不同的项目。&lt;/p>
&lt;h2 id="gradle">Gradle&lt;/h2>
&lt;p>注意不同版本的Gradle存在差异，一般情况下Android项目使用Android Gradle Plugin(AGP)的版本。新项目请&lt;a class="link" href="https://developer.android.com/build/releases/gradle-plugin?hl=zh-cn#updating-gradle" target="_blank" rel="noopener"
>检查AGP对应gradle版本&lt;/a>，flutter SDK也有它自己对应的gradle版本。clone的java项目&lt;a class="link" href="https://gradle.org/releases/" target="_blank" rel="noopener"
>下载相应gradle&lt;/a>到项目目录，在&lt;code>Settings -&amp;gt; Build Tools -&amp;gt; Distribution:Local installation&lt;/code>使用。&lt;/p>
&lt;p>更新AGP：&lt;code>Tools -&amp;gt; AGP upgrade assistant&lt;/code>&lt;/p>
&lt;p>更改项目/模块gradle版本：&lt;code>File -&amp;gt; Project Structure -&amp;gt; Project/Modules&lt;/code>&lt;/p>
&lt;p>参考：&lt;a class="link" href="https://gradle.org/releases/" target="_blank" rel="noopener"
>文档&lt;/a>、示例：https://docs.gradle.org/[version]/samples/index.html#java&lt;/p>
&lt;h3 id="基础">基础&lt;/h3>
&lt;ul>
&lt;li>项目 build.gradle：配置项目整体属性，比如指定的代码仓库、依赖&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">buildscript {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> repositories { // gradle脚本执行需要的依赖
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> google() // 引用google上的开源项目
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> jcenter() // 引用 jcenter上的开源项目
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dependencies { // 依赖的jar包
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> classpath &amp;#39;com.android.tools.build:gradle:3.0.0&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">allprojects { // 项目本身需要的依赖
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> repositories {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> google()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> jcenter()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">task clean(type: Delete) { // 执行task任务：删除根目录中的build目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> delete rootProject.buildDir
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>模块 build.gradle：配置当前Module的编译参数&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">// 使用插件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">apply plugin: &amp;#39;com.android.application&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">android {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> compileSdk 34 // 设置编译时用的Android版本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> defaultConfig {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> applicationId &amp;#34;com.example.myapplication&amp;#34; // 项目的包名（子模块不能指定）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> minSdkVersion 15 // 最低兼容的版本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> targetSdk 34 // 目标版本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> versionCode 1 // 版本号
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> versionName &amp;#34;1.0&amp;#34; // 版本名称
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 使用AndroidJUnitRunner进行单元测试
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> testInstrumentationRunner &amp;#34;android.support.test.runner.AndroidJUnitRunner&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> buildTypes {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> release { // 生产环境
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> buildConfigField(&amp;#34;boolean&amp;#34;, &amp;#34;LOG_DEBUG&amp;#34;, &amp;#34;false&amp;#34;) // 配置Log日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> buildConfigField(&amp;#34;String&amp;#34;, &amp;#34;URL_PERFIX&amp;#34;, &amp;#34;&amp;#34;https://release.cn/&amp;#34;&amp;#34;) // 配置URL前缀
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> minifyEnabled false // 是否对代码进行混淆
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //指定混淆的规则文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proguardFiles getDefaultProguardFile(&amp;#39;proguard-android.txt&amp;#39;), &amp;#39;proguard-rules.pro&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> signingConfig signingConfigs.release // 设置签名信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pseudoLocalesEnabled false // 是否在APK中生成伪语言环境，帮助国际化
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> zipAlignEnabled true // 是否对APK包进行ZIP对齐优化
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> applicationIdSuffix &amp;#39;test&amp;#39; // 在applicationId 中添加了一个后缀，一般使用的不多
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> versionNameSuffix &amp;#39;test&amp;#39; // 在applicationId 中添加了一个后缀，一般使用的不多
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> debug { // 测试环境
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> buildConfigField(&amp;#34;boolean&amp;#34;, &amp;#34;LOG_DEBUG&amp;#34;, &amp;#34;true&amp;#34;) // 配置Log日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> buildConfigField(&amp;#34;String&amp;#34;, &amp;#34;URL_PERFIX&amp;#34;, &amp;#34;&amp;#34;https://test.com/&amp;#34;&amp;#34;) // 配置URL前缀
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> minifyEnabled false //是否对代码进行混淆
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //指定混淆的规则文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proguardFiles getDefaultProguardFile(&amp;#39;proguard-android.txt&amp;#39;), &amp;#39;proguard-rules.pro&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> signingConfig signingConfigs.debug // 设置签名信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> debuggable false // 是否支持断点调试
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> jniDebuggable false // 是否可以调试NDK代码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> renderscriptDebuggable false // 是否开启渲染脚本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> zipAlignEnabled true // 是否对APK包执行ZIP对齐优化
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pseudoLocalesEnabled false // 是否在APK中生成伪语言环境，帮助国际化
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> applicationIdSuffix &amp;#39;test&amp;#39; // 在applicationId 中添加了一个后缀，一般使用的不多
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> versionNameSuffix &amp;#39;test&amp;#39; // 在applicationId 中添加了一个后缀，一般使用的不多
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dependencies { //项目的依赖关系
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 👉// 本地jar包依赖：新建 Project\app\libs 文件夹，粘贴 jar
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> implementation fileTree(include: [&amp;#39;*.jar&amp;#39;], dir: &amp;#39;libs&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> testImplementation &amp;#39;junit:junit:4.12&amp;#39; // 声明测试用例库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> implementation &amp;#39;com.android.support:appcompat-v7:26.1.0&amp;#39; // 远程依赖
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> implementation project(&amp;#39;:library&amp;#39;) // 项目本地的Library模块
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;details class="spoiler " id="spoiler-2">
&lt;summary>其他配置&lt;/summary>
&lt;p>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">android {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> signingConfigs { // 自动化打包配置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> release { // 线上环境
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> keyAlias &amp;#39;test&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> keyPassword &amp;#39;123456&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> storeFile file(&amp;#39;test.keystore&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> storePassword &amp;#39;123456&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> debug { // 开发环境
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> keyAlias &amp;#39;test&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> keyPassword &amp;#39;123456&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> storeFile file(&amp;#39;test.keystore&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> storePassword &amp;#39;123456&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sourceSets { // 目录指向配置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> main {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> jniLibs.srcDirs = [&amp;#39;libs&amp;#39;] // 指定lib库目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> packagingOptions{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 当有重复文件时 ,使用第一个匹配的文件打包进apk
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pickFirsts = [&amp;#39;META-INF/LICENSE&amp;#39;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 当出现重复文件时 合并重复的文件打包进apk
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> merge &amp;#39;META-INF/LICENSE&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 同时使用butterknife、dagger2框架处理 （常用）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> exclude &amp;#39;META-INF/services/javax.annotation.processing.Processor&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> productFlavors {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> wandoujia { // 豌豆荚渠道包配置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> manifestPlaceholders = [UMENG_CHANNEL_VALUE: &amp;#34;wandoujia&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xiaomi {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> manifestPlaceholders = [UMENG_CHANNEL_VALUE: &amp;#34;xiaomi&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> applicationId &amp;#34;com.wiky.gradle.xiaomi&amp;#34; // 配置包名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> _360 {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> manifestPlaceholders = [UMENG_CHANNEL_VALUE: &amp;#34;_360&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> lintOptions { // 关闭检查lint（有错误会停止build）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> abortOnError false // 即使报错也不会停止打包
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> checkReleaseBuilds false // 打包release版本的时候进行检测
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> buildFeatures { // true表示生成build/app/generated/source/buildConfig/release/com/example/app/BuildConfig.java，不需要手动维护版本号、渠道等常量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> buildConfig = false
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/details>
&lt;ul>
&lt;li>gradle-wrapper-properties：配置 Gradle Wrapper&lt;/li>
&lt;li>gradle-properties：配置 Gradle编译参数，详见&lt;a class="link" href="URLhttps://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_configuration_properties" >文档&lt;/a>&lt;/li>
&lt;li>setting.gradle：配置 Gradle 的多项目管理&lt;/li>
&lt;li>local.properties：存放 Android 项目的私有属性配置，如 SDK 路径&lt;/li>
&lt;li>multiDexKeep.pro、proguard-rules.pro：可选的混淆文件，用于配置放置在主 Dex 的类、声明避免混淆的类&lt;/li>
&lt;/ul>
&lt;h3 id="java插件">java插件&lt;/h3>
&lt;p>&lt;a class="link" href="https://juejin.cn/post/7098383560746696718?searchId=20241129193310F29515280AF1035FC168#heading-9" target="_blank" rel="noopener"
>参考&lt;/a>&lt;/p>
&lt;p>&lt;strong>简介&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Android App：APK文件，新建时选择Empty Views Activity&lt;/li>
&lt;li>Android Library：ARR文件，在目录结构上与Android App相同，包含构建APP所需的一切。当你需要构建不同的APK时，具有通用的模块（如账户管理），可以将library添加为每个APP模块的依赖项&lt;/li>
&lt;li>Java or Kotlin Library（插件）：JAR文件，打包可重用的代码，不含资源文件，如res中的图片&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>使用&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>生成jar\arr&lt;/li>
&lt;/ol>
&lt;p>Android Studio 打开右侧的 Gradle，选择需要打包的module —&amp;gt; Tasks —&amp;gt; build, 双击 assemble&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>生成jar\arr到Project\build\library\libs或outputs\aar，移到Project\app\libs&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在模块gradle添加&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">implementation fileTree(dir: &amp;#39;libs&amp;#39;, include: [&amp;#39;*.aar&amp;#39;])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">implementation fileTree(dir: &amp;#39;libs&amp;#39;, include: [&amp;#39;*.jar&amp;#39;])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>自定义插件的三种方式&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>build script：在&lt;code>build.gradle&lt;/code>脚本中直接编写，只能在本文件内使用&lt;/li>
&lt;li>buildSrc项目：新建一个名为&lt;code>buildSrc&lt;/code>的Module，Gradle会自动编译和测试，只能在本项目中使用&lt;/li>
&lt;li>独立项目：在独立的项目中编写插件，发布到本地或者远程jcenter、maven仓库供其他项目使用&lt;/li>
&lt;/ul>
&lt;p>独立项目打包jar到maven：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在项目中新建File -&amp;gt; New -&amp;gt; New Module -&amp;gt; Java or Kotlin Library&lt;/p>
&lt;/li>
&lt;li>
&lt;p>修改build.gradle：&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">// Gradle插件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">apply plugin: &amp;#39;groovy&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">apply plugin: &amp;#39;maven&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">apply plugin: &amp;#39;java-gradle-plugin&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 依赖
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dependencies {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> implementation gradleApi() //Groovy DSL
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> implementation localGroovy() //Gradle DSL
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 仓库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">repositories {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mavenCentral()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 配置插件id和映射类（生成resources文件夹储存)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gradlePlugin {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> plugins {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> greeting {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 插件id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> id = &amp;#39;CustomPlugin&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 插件实现类
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> implementationClass = &amp;#39;com.group.myplugin.CustomPlugin&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def group=&amp;#39;com.group.myplugin&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def artifactId=&amp;#39;myplugin&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def version=&amp;#39;1.0.0&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 指定本地maven的路径，在插件目录下
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def uploadRepo = &amp;#39;../myplugin&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 打包到本地maven仓库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">uploadArchives {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> repositories {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mavenDeployer {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pom.groupId = group
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pom.artifactId = artifactId
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pom.version = version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> repository(url: uri(uploadRepo))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>新建CustomPlugin.groovy文件写插件：实现Plugin接口&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">package com.group.myplugin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import org.gradle.api.Plugin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import org.gradle.api.Project
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class CustomPlugin implements Plugin&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Project&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void apply(Project project) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> println(&amp;#34;Hello gradle plugin&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>将插件发布到本地 Maven 仓库的2种方式：&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>执行&lt;code>./gradlew uploadArchives&lt;/code>命令&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可视化界面的 uploadArchives Task 点击发布&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="故障排除">故障排除&lt;/h2>
&lt;h3 id="配置">配置&lt;/h3>
&lt;ul>
&lt;li>配置build.gradle(project:android)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">allprojects {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> repositories {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> google()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> jcenter()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> maven { url &amp;#34;https://storage.googleapis.com/download.flutter.io&amp;#34; }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="更新">更新&lt;/h3>
&lt;ul>
&lt;li>flutter&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">flutter upgrade
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">flutter doctor
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="报错">报错&lt;/h3>
&lt;p>&lt;strong>查看错误信息&lt;/strong>
控制台Terminal：&lt;code>./gradlew assembleDebug --info&lt;/code>&lt;/p>
&lt;p>&lt;strong>常见错误&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>更新Android Studio&lt;/li>
&lt;li>重新建项目&lt;/li>
&lt;li>\android\app\build.gradle&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">compileSdkVersion 33
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">minSdkVersion 21
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>其他错误&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Attribute application@label value=(Dormitory) from AndroidManifest.xml&lt;/li>
&lt;/ul>
&lt;p>解决：进入\android\app\src\main\AndroidManifest.xml&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">manifest&lt;/span> &lt;span class="na">xmlns:android&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">xmlns:tools&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;http://schemas.android.com/tools&amp;#34;&lt;/span> &lt;span class="err">//&lt;/span> &lt;span class="err">添加此行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">package&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;com.example.model_dev&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">application&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">tools:replace&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android:label&amp;#34;&lt;/span> &lt;span class="err">//&lt;/span> &lt;span class="err">添加此行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">android:label&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;model_dev&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;${applicationName}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">android:icon&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;@mipmap/ic_launcher&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">activity&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Gradle threw an error while downloading artifacts from the network&lt;/li>
&lt;/ul>
&lt;p>解决：Gradle损坏，进入 C:\Users\username 删除 .gradle 文件夹&lt;/p>
&lt;h1 id="dart">dart&lt;/h1>
&lt;h2 id="变量">变量&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># 创建一个变量并将其初始化
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var name = &amp;#39;Bob&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 指定类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">String name = &amp;#39;Bob&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 如果对象(name)不局限于单一的类型(例如String),可以将其指定为 Object（或 dynamic）类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Object name = &amp;#39;Bob&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">? 可空类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">int? a=123; // int? 表示a是一个可空类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">int? a; // 未初始化变量的初始值为null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">! 类型断言
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">a! // a不为空
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>late
&lt;a class="link" href="https://dart.dev/null-safety/understanding-null-safety#lazy-initialization" target="_blank" rel="noopener"
>延迟初始化&lt;/a>:字段被第一次访问时延迟运行，而不是在实例化后立即运行。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class Weather {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> late int _temperature = _readThermometer();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>final
已经实例化的final对象不能指向另一个不同的对象，但其字段可以更改。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">final name = &amp;#39;Bob&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">final String nickname = &amp;#39;Bobby&amp;#39;;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>const
编译时常量：一经定义就会在编译期间对其进行初始化，const对象及其字段无法更改。&lt;/li>
&lt;/ul>
&lt;h2 id="类型">类型&lt;/h2>
&lt;h3 id="常规类型">常规类型&lt;/h3>
&lt;div class="box info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>注意首字母大小写&lt;/p>
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">int 整数值
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">double 浮点数字
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">String 字符串
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bool 布尔类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">List 列表类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Map 字典型
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>List &lt;br>
属性：&lt;/p>
&lt;ul>
&lt;li>length　　　　　　　　　　长度&lt;/li>
&lt;li>reversed　　　　　　　　　翻转&lt;/li>
&lt;li>isEmpty　　　　　　　　　是否为空&lt;/li>
&lt;li>isNotEmpty　　　　　　　是否不为空&lt;/li>
&lt;/ul>
&lt;p>方法：&lt;/p>
&lt;ul>
&lt;li>add()　　　　　　　　　　　　　增加&lt;/li>
&lt;li>addAll()　　　　　　　　　　　　拼接数组&lt;/li>
&lt;li>indexOf()　　　　　　　　　　　查找 传入具体值&lt;/li>
&lt;li>remove()　　　　　　　　　　　删除 传入具体值&lt;/li>
&lt;li>removeAt()　　　　　　　　　　删除 传入索引值&lt;/li>
&lt;li>fillRange()　　　　　　　　　　　修改&lt;/li>
&lt;li>insert(index,value);　　　　　　　指定位置插入&lt;/li>
&lt;li>insertAll(index,list)　　　　　　　指定位置插入List&lt;/li>
&lt;li>toList()　　　　　　　　　　　　其他类型转换成List&lt;/li>
&lt;li>join()　　　　　　　　　　　　　List转换成字符串&lt;/li>
&lt;li>split()　　　　　　　　　　　　　字符串转化成List&lt;/li>
&lt;li>forEach()&lt;/li>
&lt;li>map() &lt;br>
示例：&lt;code>List&amp;lt;Widget&amp;gt;.from(MyMap.keys.map((item) =&amp;gt; SomeWidget(item)).toList());&lt;/code> &lt;br>
map()可以传入List或Map的每项数据，toList()转换成List，List&lt;Widget>.from接收Iterable（[Map.keys]、[List] 和 [Set] 都是 &lt;code>Iterable&lt;/code>），返回widget List。&lt;/li>
&lt;li>where()&lt;/li>
&lt;li>any()&lt;/li>
&lt;li>every()&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Map &lt;br>
属性：&lt;/p>
&lt;ul>
&lt;li>keys　　　　　　　　　获取所有的key值&lt;/li>
&lt;li>values　　　　　　　　获取所有的value值&lt;/li>
&lt;li>isEmpty　　　　　　　　是否为空&lt;/li>
&lt;li>isNotEmpty　　　　　　是否不为空&lt;/li>
&lt;/ul>
&lt;p>方法：&lt;/p>
&lt;ul>
&lt;li>remove(key)　　　　　　　　　删除指定key的数据&lt;/li>
&lt;li>addAll({&amp;hellip;})　　　　　　　　　合并映射 给映射内增加属性&lt;/li>
&lt;li>containsValue()　　　　　　　查看映射内的值 返回true/false&lt;/li>
&lt;li>forEach()&lt;/li>
&lt;li>map()&lt;/li>
&lt;li>where()&lt;/li>
&lt;li>any()&lt;/li>
&lt;li>every()&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="其它类型">其它类型&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://dart.dev/guides/language/language-tour#enumerated-types" target="_blank" rel="noopener"
>enum&lt;/a>　　枚举类型,用于表示固定数量的常量值。在switch语句中运行良好。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Object　对象类型，允许任何类型。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://dart.dev/guides/language/effective-dart/design#avoid-using-dynamic-unless-you-want-to-disable-static-checking" target="_blank" rel="noopener"
>dynamic&lt;/a>　动态类型，不仅接受所有对象，而且还允许所有操作&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">void main() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dynamic foo=&amp;#34;bar&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(foo);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> foo=123;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(foo);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Set　无序集合，主要的功能就是去除数组重复内容&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">void main(){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> List myList=[&amp;#39;香蕉&amp;#39;,&amp;#39;苹果&amp;#39;,&amp;#39;西瓜&amp;#39;,&amp;#39;香蕉&amp;#39;,&amp;#39;苹果&amp;#39;,&amp;#39;香蕉&amp;#39;,&amp;#39;苹果&amp;#39;];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var s=new Set();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s.addAll(myList);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(s);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(s.toList());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Future　用于&lt;a class="link" href="https://dart.dev/language/async" target="_blank" rel="noopener"
>异步支持&lt;/a>。&lt;/li>
&lt;li>Stream　用于异步支持。&lt;/li>
&lt;li>Iterable　用在&lt;a class="link" href="https://dart.dev/guides/libraries/library-tour#iteration" target="_blank" rel="noopener"
>for-in 循环&lt;/a>和同步&lt;a class="link" href="https://dart.dev/language/functions#generators" target="_blank" rel="noopener"
>生成器函数&lt;/a>中。&lt;/li>
&lt;li>Never　表示表达式永远无法成功完成计算。最常用于总是抛出异常的函数。&lt;/li>
&lt;li>void　表示从未使用过某个值。通常用作返回类型。&lt;/li>
&lt;li>(value1, value2)　记录（需dart3）&lt;/li>
&lt;li>Null　空值&lt;/li>
&lt;/ul>
&lt;h3 id="不常用的类型">不常用的类型&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>runes 暴露了字符串的 Unicode 代码点（Unicode 为每个字母、数字和符号定义了一个唯一的数值）。例如，用于表情符号，(😆) 是&lt;code>\u{1f606}&lt;/code>。经常被 &amp;ldquo;characters&amp;rdquo; API 取代。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Symbol 表示标识符，例如&lt;code>#&lt;/code>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">void main() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert(Symbol(&amp;#39;bar&amp;#39;)==#bar);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="类型转换">类型转换&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">myint = int.parse(myString); // String -&amp;gt; int
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">myString = myint.toString(); // int -&amp;gt; String
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mydouble = double.parse(myString); // String -&amp;gt; double
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">myString = 3.14159.toStringAsFixed(2); // double -&amp;gt; String (myString = &amp;#39;3.14&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mynum.member = mynum.values.byName(myString); // String -&amp;gt; enum
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">myString = mynum.member.name; // enum -&amp;gt; String
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="函数">函数&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">bool isNoble(int atomicNumber) { // bool:返回类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return _nobleGases[atomicNumber] != null;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>箭头函数 =&amp;gt;&lt;/p>
&lt;p>&lt;code>=&amp;gt; expr&lt;/code> 是 &lt;code>{ return expr; }&lt;/code>的简写&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="参数">参数&lt;/h3>
&lt;ul>
&lt;li>命名参数（可传可不传）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"> String printUserInfo(String username, {int age = 0, String sex = &amp;#39;男&amp;#39;}) {//行参，用大括号
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (age != 0) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return &amp;#34;姓名:$username---性别:$sex--年龄:$age&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return &amp;#34;姓名:$username---性别:$sex--年龄保密&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(printUserInfo(&amp;#39;张三&amp;#39;)); //实参
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(printUserInfo(&amp;#39;张三&amp;#39;, age: 20, sex: &amp;#39;未知&amp;#39;)); //实参,命名参数的实参必须传入参数名age: sex:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>位置参数（可传可不传）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"> String printUserInfo(String username,[String sex=&amp;#39;男&amp;#39;,int age=0]){ //行参，用中括号
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(age!=0){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return &amp;#34;姓名:$username---性别:$sex--年龄:$age&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return &amp;#34;姓名:$username---性别:$sex--年龄保密&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(printUserInfo(&amp;#39;张三&amp;#39;)); //实参
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(printUserInfo(&amp;#39;小李&amp;#39;,&amp;#39;女&amp;#39;,30)); //实参
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="运算符">运算符&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>算术运算符&lt;/p>
&lt;p>&lt;code>+&lt;/code>(加)　　&lt;code>–&lt;/code>(减)　　&lt;code>-&lt;/code>(负)　　&lt;code>*&lt;/code>(乘)　　&lt;code>/&lt;/code>(除)　　&lt;code>~/&lt;/code>(取整)　　&lt;code>%&lt;/code>（取余）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>关系运算符&lt;/p>
&lt;p>&lt;code>==&lt;/code>　　&lt;code>！=&lt;/code>　　&lt;code>&amp;gt;&lt;/code>　　&lt;code>&amp;lt;&lt;/code>　　&lt;code>&amp;gt;=&lt;/code>　　&lt;code>&amp;lt;=&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>逻辑运算符&lt;/p>
&lt;p>&lt;code>!&lt;/code>(取反)　　&lt;code>&amp;amp;&amp;amp;&lt;/code>(与)　　&lt;code>||&lt;/code>(或)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>赋值运算符&lt;/p>
&lt;p>基础赋值运算符　　&lt;code>=&lt;/code>　　&lt;code>??=&lt;/code>(为 null 的变量赋值)&lt;/p>
&lt;p>复合赋值运算符　　&lt;code>+=&lt;/code>　　&lt;code>-=&lt;/code>　　&lt;code>*=&lt;/code>　　&lt;code>/=&lt;/code>　　&lt;code>%=&lt;/code>　　&lt;code>~/=&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其他运算符
&lt;code>()&lt;/code>　　使用一个方法&lt;/p>
&lt;p>&lt;code>[]&lt;/code>　　访问 List&lt;/p>
&lt;p>&lt;code>?[]&lt;/code>　　访问 List,左侧/?表示可以为null&lt;/p>
&lt;p>&lt;code>.&lt;/code>　　访问成员&lt;/p>
&lt;p>&lt;code>?.&lt;/code>　　访问成员,左侧/?表示可以为null&lt;/p>
&lt;p>&lt;code>..&lt;/code> 级联，可以在同一个对象上访问实例成员和调用多个实例方法&lt;/p>
&lt;/li>
&lt;li>
&lt;p>if-else的表达式：&lt;/p>
&lt;ul>
&lt;li>condition &lt;code>?&lt;/code> expr1 &lt;code>:&lt;/code> expr2&lt;/li>
&lt;/ul>
&lt;p>如果条件为真，则计算expr1（并返回其值）；否则，计算并返回expr2的值。&lt;/p>
&lt;ul>
&lt;li>expr1 &lt;code>??&lt;/code> expr2&lt;/li>
&lt;/ul>
&lt;p>如果expr1不为 null，则返回其值；否则，计算并返回expr2的值。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="类">类&lt;/h2>
&lt;h3 id="方法">方法&lt;/h3>
&lt;h4 id="实例变量和方法">实例变量和方法&lt;/h4>
&lt;p>实例变量:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class Point {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> double? x; // Declare instance variable x, initially null.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> double? y; // Declare y, initially null.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> double z = 0; // Declare z, initially 0.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>实例方法可以访问实例变量和 this&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">import &amp;#39;dart:math&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class Point {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final double x;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final double y;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Point(this.x, this.y);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> double distanceTo(Point other) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var dx = x - other.x;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var dy = y - other.y;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return sqrt(dx * dx + dy * dy);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="静态变量和方法">静态变量和方法&lt;/h4>
&lt;p>使用关键字 static 可以声明类变量或类方法。静态成员可以通过类名称直接访问（不需要实例化），提高性能。静态方法不能访问非静态成员，非静态方法可以访问静态成员，不能使用this关键字。&lt;/p>
&lt;h4 id="get-和-set">get 和 set&lt;/h4>
&lt;p>特殊方法:实例对象的每一个属性都有一个隐式的 Getter 方法，非 final 属性还会有一个 Setter 方法。&lt;/p>
&lt;ul>
&lt;li>通过get和set修饰的方法不带小括号，可以使访问方法像访问属性一样，简便我们的使用、访问&lt;/li>
&lt;li>set：传入属性，get：访问属性。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class Rectangle {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> double left, top, width, height;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Rectangle(this.left, this.top, this.width, this.height);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> double get right =&amp;gt; left + width;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> set right(double value) =&amp;gt; left = value - width;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">void main() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var rect = Rectangle(3, 4, 20, 15);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 通过getter访问 right
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert(rect.right == 23);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 通过setter修改 right 属性
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rect.right = 12;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert(rect.left == -8);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="抽象类抽象方法">抽象类、抽象方法&lt;/h4>
&lt;p>抽象类常用于定义接口，抽象类常常会包含抽象方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">abstract class Doer {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Define instance variables and methods...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void doSomething(); // Define an abstract method.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class EffectiveDoer extends Doer {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void doSomething() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Provide an implementation, so the method is not abstract here...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="call">call()&lt;/h4>
&lt;p>在别人项目经常看到此方法，看其解释感觉可以省略不写。&lt;/p>
&lt;p>所有 Dart函数（具有函数类型而不是类/接口类型的对象）都有一个call方法。&lt;/p>
&lt;p>该call方法与函数本身具有相同的函数类型，并且在调用它时它的行为完全相同。您甚至可以说调用函数就是隐式调用其call方法。如果您编写函数调用e1(e2, e3)，那么编译器会检查是否e1有call方法，如果有，则将其转换为方法调用e1.call(e2, e3)。&lt;/p>
&lt;h3 id="构造函数">构造函数&lt;/h3>
&lt;link href="https://fonts.googleapis.com/css?family=default" rel="stylesheet" type="text/css">
&lt;div style="font-family:'default'; font-size:20px; font-style:normal; font-weight:bold; color: blue">
特点：
&lt;/div>
&lt;ul>
&lt;li>
&lt;p>实例化类时会被自动触发&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一般用于初始化操作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>没有返回值&lt;/p>
&lt;/li>
&lt;/ul>
&lt;link href="https://fonts.googleapis.com/css?family=default" rel="stylesheet" type="text/css">
&lt;div style="font-family:'default'; font-size:20px; font-style:normal; font-weight:bold; color: blue">
普通构造函数
&lt;/div>
&lt;p>构造函数方法名和类名相同&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class Point {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> num x, y;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Point(num x, num y) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // There&amp;#39;s a better way to do this, stay tuned.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.x = x;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.y = y;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>简化形式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class Point {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> num x, y;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Syntactic sugar for setting x and y
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // before the constructor body runs.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Point(this.x, this.y);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;link href="https://fonts.googleapis.com/css?family=default" rel="stylesheet" type="text/css">
&lt;div style="font-family:'default'; font-size:20px; font-style:normal; font-weight:bold; color: blue">
命名构造函数
&lt;/div>
&lt;p>命名构造函数(类名.函数名)可以实现多个构造器。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class Point {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> num x, y;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Point(this.x, this.y);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 命名构造函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Point.origin() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> x = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> y = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>请记住，命名构造函数不可继承，如果子类想要有 和父类一样的命名构造函数，那就写个同名的（通常也会在子类的命名构造函数里，调用父类的同名命名构造函数）&lt;/p>
&lt;link href="https://fonts.googleapis.com/css?family=default" rel="stylesheet" type="text/css">
&lt;div style="font-family:'default'; font-size:20px; font-style:normal; font-weight:bold; color: blue">
调用父类构造函数
&lt;/div>
&lt;p>如果你的类，继承于父类，那么子类的构造函数，势必要调用父类的构造函数，这时候就要分两种情况：&lt;/p>
&lt;ul>
&lt;li>Dart语言帮你调用父类的无参数构造函数&lt;/li>
&lt;li>代码中显式调用父类的构造函数&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>默认调用调用父类的无参数构造函数&lt;/li>
&lt;/ol>
&lt;p>如果你没有显式调用父类的构造函数，并且父类有一个无参数构造函数，那么Dart就会帮你在子类的构造函数方法体的最前面，调用父类的无参数构造函数。当然，后面我们会说道，构造函数分成好几部分来初始化成员变量，调用的顺序如下：&lt;/p>
&lt;ul>
&lt;li>初始化列表&lt;/li>
&lt;li>父类的无参数构造函数&lt;/li>
&lt;li>子类的无参数构造函数&lt;/li>
&lt;/ul>
&lt;p>当然，如果父类没有无参数构造函数，或者Dart这种隐式调用无法满足你的要求，那就需要显式调用父类的构造函数了&lt;/p>
&lt;ol start="2">
&lt;li>显式调用父类构造函数&lt;/li>
&lt;/ol>
&lt;p>显式调用父类构造函数，应该在初始化列表中完成&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class Person {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> String firstName;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Person.fromJson(Map data) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#39;in Person&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class Employee extends Person {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Person does not have a default constructor;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // you must call super.fromJson(data).
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Employee.fromJson(Map data) : super.fromJson(data) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#39;in Employee&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">main() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var emp = new Employee.fromJson({});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Prints:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // in Person
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // in Employee
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;link href="https://fonts.googleapis.com/css?family=default" rel="stylesheet" type="text/css">
&lt;div style="font-family:'default'; font-size:20px; font-style:normal; font-weight:bold; color: blue">
初始化列表
&lt;/div>
&lt;p>在构造函数后加上&lt;code>: x = , y = &lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>可以在构造函数中设置属性的默认值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在构造函数体执行之前执行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以调用超类的构造函数&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">// Initializer list sets instance variables before
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// the constructor body runs.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Point.fromJson(Map&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">String&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="na">num&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> json)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> : x = json[&amp;#39;x&amp;#39;],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> y = json[&amp;#39;y&amp;#39;] {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#39;In Point.fromJson(): ($x, $y)&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>尤其是初始化那些final修饰的成员变量时，初始化列表很有用，因为在方法体中，不能给final修饰的成员变量赋值，因为&lt;strong>在执行方法体的时候，final修饰的成员变量已经不能变了&lt;/strong>。这个地方很多人犯错。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">import &amp;#39;dart:math&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class Point {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final num x;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final num y;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final num distanceFromOrigin;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Point(x, y)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> : x = x,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> y = y,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> distanceFromOrigin = sqrt(x * x + y * y);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">main() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var p = new Point(2, 3);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(p.distanceFromOrigin);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;link href="https://fonts.googleapis.com/css?family=default" rel="stylesheet" type="text/css">
&lt;div style="font-family:'default'; font-size:20px; font-style:normal; font-weight:bold; color: blue">
重定向构造函数
&lt;/div>
&lt;p>定义构造函数的时候，除了一个普通构造函数，还可以有若干命名构造函数，这些构造函数之间，有时候会有一些相同的逻辑，如果分别书写在各个构造函数中，会有些多余，所以构造函数可以传递。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class Point {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> num x, y;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // The main constructor for this class.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Point(this.x, this.y);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Delegates to the main constructor.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Point.alongXAxis(num x) : this(x, 0);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>传递构造函数，没有方法体，会在初始化列表中，调用另一个构造函数。&lt;/p>
&lt;link href="https://fonts.googleapis.com/css?family=default" rel="stylesheet" type="text/css">
&lt;div style="font-family:'default'; font-size:20px; font-style:normal; font-weight:bold; color: blue">
常量构造函数
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class ImmutablePoint {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> static final ImmutablePoint origin =
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> const ImmutablePoint(0, 0);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final num x, y;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> const ImmutablePoint(this.x, this.y);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你的类，创建的对象永远不会改变，你可以在编译期就创建这个常量实例，并且定义一个常量构造函数，并且确保所有的成员变量都是final的。&lt;/p>
&lt;link href="https://fonts.googleapis.com/css?family=default" rel="stylesheet" type="text/css">
&lt;div style="font-family:'default'; font-size:20px; font-style:normal; font-weight:bold; color: blue">
工厂构造函数/单例模式
&lt;/div>
&lt;p>在构造函数前加上&lt;code>factory&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>只实例化一次，节省相同实例化带来的消耗&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第一次调用命名构造函数进入工厂函数中实例化，后续调用就用缓存中现成的实例&lt;/p>
&lt;/li>
&lt;li>
&lt;p>工厂构造函数，没有权利访问this&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class Logger {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final String name;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bool mute = false;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // _cache is library-private, thanks to
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // the _ in front of its name.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> static final Map&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">String&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="na">Logger&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> _cache =
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">String&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="na">Logger&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>{};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> factory Logger(String name) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (_cache.containsKey(name)) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return _cache[name];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final logger = Logger._internal(name); # 调用构造函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> _cache[name] = logger;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return logger;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Logger._internal(this.name); # 定义命名构造函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void log(String msg) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (!mute) print(msg);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">main() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var logger = Logger(&amp;#39;UI&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> logger.log(&amp;#39;Button clicked&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上例的意思是，类中又一个静态缓存&lt;code>_cache&lt;/code>保存着一些Logger类实例，创建实例时，给工厂构造函数传递的name，如果在缓存中已经存在，就用缓存中现成的实例，如果没有，就新建一个实例，并且也放到缓存中。&lt;/p>
&lt;p>如此，我们可以创建名字为UI / SYS / API 等的实例，然后在debug的时候，如果设置名字为UI的Logger实例的mute为true，就不会打印UI相关的log，而不影响其它两个名字的log。&lt;/p>
&lt;h3 id="回调函数">回调函数&lt;/h3>
&lt;p>回调函数本质上是把函数作为参数传递给小部件的函数，当按钮按下时调用此函数。&lt;/p>
&lt;p>官方实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">/// Signature of callbacks that have no arguments and return no data.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">typedef VoidCallback = void Function();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/// Signature for callbacks that report that an underlying value has changed.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/// See also:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/// * [ValueSetter], for callbacks that report that a value has been set.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">typedef ValueChanged&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> = void Function(T value);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">import &amp;#39;package:flutter/material.dart&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">void main() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> runApp(const MyApp());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class MyApp extends StatefulWidget {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> const MyApp({Key? key}) : super(key: key);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> State&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">MyApp&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> createState() =&amp;gt; _MyAppState();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class _MyAppState extends State&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">MyApp&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> String topic = &amp;#34;Packages&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> callback(varTopic) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // setState:通知内部状态已更改从而重建UI
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> setState(() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> topic = varTopic;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Widget build(BuildContext context) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return MaterialApp(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> home: Scaffold(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> appBar: AppBar(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> title: const Text(&amp;#34;Learning Flutter&amp;#34;),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> body: Column(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> children: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Container(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> width: double.maxFinite,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> height: 70,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> margin: const EdgeInsets.only(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> top: 50, left: 40, right: 40, bottom: 20),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> decoration: BoxDecoration(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> color: Colors.lightBlue,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> borderRadius: BorderRadius.circular(20)),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> child: Center(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> child: Text(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;We are learning Flutter $topic&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> style: const TextStyle(fontSize: 20, color: Colors.white),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> MyButtons(topic: &amp;#34;Cubit&amp;#34;, callbackFunction: callback),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> MyButtons(topic: &amp;#34;BLoc&amp;#34;, callbackFunction: callback),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> MyButtons(topic: &amp;#34;GetX&amp;#34;, callbackFunction: callback)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> );
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class MyButtons extends StatelessWidget {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final String topic;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final Function callbackFunction;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> const MyButtons(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {Key? key, required this.topic, required this.callbackFunction})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> : super(key: key);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Widget build(BuildContext context) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return GestureDetector(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onTap: () {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> callbackFunction(topic);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> child: Container(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> width: double.maxFinite,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> height: 70,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> margin: const EdgeInsets.only(top: 20, left: 40, right: 40, bottom: 20),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> decoration: BoxDecoration(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> color: Colors.lightBlue, borderRadius: BorderRadius.circular(20)),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> child: Center(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> child: Text(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> topic,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> style: const TextStyle(fontSize: 20, color: Colors.white),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> );
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="function-class">Function class&lt;/h4>
&lt;p>Function是所有函数类型的超类。&lt;/p>
&lt;p>Function有一些没有声明的特殊功能：&lt;/p>
&lt;ul>
&lt;li>Function 静态类型的值仍然可以像函数一样被调用（这样的调用是动态调用,编译器无法在编译时检查类型的正确性,在运行时将执行检查以确保参数类型一致）。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">Function f = (int x) =&amp;gt; &amp;#34;$x&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">print(f(1)); // Prints &amp;#34;1&amp;#34;.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">f(&amp;#34;not&amp;#34;, &amp;#34;one&amp;#34;, &amp;#34;int&amp;#34;); // Throws! No static warning.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="widgets之间的通信">widgets之间的通信&lt;/h4>
&lt;p>&lt;a class="link" href="https://medium.com/flutter-community/flutter-communication-between-widgets-f5590230df1e" target="_blank" rel="noopener"
>https://medium.com/flutter-community/flutter-communication-between-widgets-f5590230df1e&lt;/a>&lt;/p>
&lt;h3 id="扩展">扩展&lt;/h3>
&lt;h4 id="扩展类">扩展类&lt;/h4>
&lt;link href="https://fonts.googleapis.com/css?family=default" rel="stylesheet" type="text/css">
&lt;div style="font-family:'default'; font-size:20px; font-style:normal; font-weight:normal; color: blue">
extends
&lt;/div>
&lt;p>Extends是典型的OOP类继承。如果 a类 扩展了 b类，则 a类 可以使用或覆盖 b类 中实现的所有属性、变量、函数 。在 Dart 中，一个类只能扩展一个类。
&lt;img src="https://xiaoxiano.github.io/p/flutter/5.jpg"
width="1233"
height="641"
srcset="https://xiaoxiano.github.io/p/flutter/5_hu572765b138c1f7437a19c6cea77cac10_136967_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/flutter/5_hu572765b138c1f7437a19c6cea77cac10_136967_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="192"
data-flex-basis="461px"
>&lt;/p>
&lt;link href="https://fonts.googleapis.com/css?family=default" rel="stylesheet" type="text/css">
&lt;div style="font-family:'default'; font-size:20px; font-style:normal; font-weight:normal; color: blue">
implements
&lt;/div>
&lt;p>创建另一个类或接口的实现。当 a类 实现 b类 时，&lt;strong>必须实现&lt;/strong> b类 中定义的所有功能(所有属性、变量、函数)。一个类可以实现多个接口。&lt;/p>
&lt;link href="https://fonts.googleapis.com/css?family=default" rel="stylesheet" type="text/css">
&lt;div style="font-family:'default'; font-size:20px; font-style:normal; font-weight:normal; color: blue">
with
&lt;/div>
&lt;p>mixin使用with关键字，类似于继承，可以扩展多个类。mixins的类只能继承自Object，不能再继承其他类，且不能有构造函数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># extends只能扩展一个类，而mixin没有限制，可以一起使用
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class Maestro extends Person with Musical, Aggressive, Demented {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Maestro(String maestroName) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name = maestroName;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> canConduct = true;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="super">super&lt;/h4>
&lt;p>&lt;code>super&lt;/code>关键字用于调用父类的对象、方法、构造函数和子类中的属性。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">// 访问父类变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">super.variable_name;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 访问父类方法
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">super.method_name();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 转发给超类的构造函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">const MyApp({Key? key}) : super(key: key);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="扩展方法">扩展方法&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">// 扩展 num，就可以使用 num.attribute 和 num.method
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">extension FancyNum on num {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> num plus(num other) =&amp;gt; this + other;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> num times(num other) =&amp;gt; this * other;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">print(5.plus(3)); // Equal to &amp;#34;5 + 3&amp;#34;.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">print(5.times(8)); // Equal to &amp;#34;5 * 8&amp;#34;.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">print(2.plus(1).times(3)); // Equal to &amp;#34;(2 + 1) * 3&amp;#34;.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="泛型">泛型&lt;/h2>
&lt;p>泛型常用于需要要求类型安全的情况，可以减少代码重复。
&lt;img src="https://xiaoxiano.github.io/p/flutter/fanxing.jpg"
width="1122"
height="449"
srcset="https://xiaoxiano.github.io/p/flutter/fanxing_hu6d02cad28d2736a6e42659b75fd941e7_62001_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/flutter/fanxing_hu6d02cad28d2736a6e42659b75fd941e7_62001_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="249"
data-flex-basis="599px"
>
如果 T 是一个class，则表示传入该类型的参数。&lt;/p>
&lt;p>@override 注解来表示你重写了一个成员
&lt;img src="https://xiaoxiano.github.io/p/flutter/override.jpg"
width="1173"
height="659"
srcset="https://xiaoxiano.github.io/p/flutter/override_huf3ae0c28a53250be072483b49c760168_125842_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/flutter/override_huf3ae0c28a53250be072483b49c760168_125842_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="427px"
>&lt;/p>
&lt;h2 id="异步">异步&lt;/h2>
&lt;link href="https://fonts.googleapis.com/css?family=default" rel="stylesheet" type="text/css">
&lt;div style="font-family:'default'; font-size:20px; font-style:normal; font-weight:bold; color: blue">
Isolate
&lt;/div>
&lt;p>Isolate 是运行所有 Dart 代码的地方，在许多其他语言里（例如 C++），你可以让多个线程共享相同的内存，但是在 Dart 中，每个线程都有自己的 Isolate 和它自己的内存。&lt;/p>
&lt;p>如果你要运行的计算量太过庞大，在 main Isolate 中运行可能会导致丢帧，如果处理可能需要几百毫秒，则考虑创建单独的Isolate，例如：&lt;/p>
&lt;ul>
&lt;li>解码 JSON，HttpRequest 的结果 =&amp;gt; compute&lt;/li>
&lt;li>加密可能非常耗时&lt;/li>
&lt;li>处理图像（例如裁剪）&lt;/li>
&lt;li>从 Web 加载图像&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>事件循环&lt;/strong>&lt;/p>
&lt;p>Dart使用永不阻塞的单线程来处理所有事件。因此，它运行一个事件循环，它从事件队列中取得最先发生的事件，处理它，返回下一个事件进行处理，依此类推，直到事件队列清空为止。&lt;/p>
&lt;link href="https://fonts.googleapis.com/css?family=default" rel="stylesheet" type="text/css">
&lt;div style="font-family:'default'; font-size:20px; font-style:normal; font-weight:bold; color: blue">
Future
&lt;/div>
&lt;p>&lt;strong>定义&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">Future&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">void&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> myVoidFuture() {} // 不返回任何内容，但可以在最终完成时通知调用者。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Future&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">bool&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> myTypedFuture() {} // 如果需要返回一个值，那么你传递给它一个类型。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Future 有三种状态：&lt;/p>
&lt;ul>
&lt;li>Uncompleted: 你刚刚得到一个 Future，还未打开 &lt;br>
首先，事件发生，事件循环获取事件，并调用你写的处理程序，得到一个返回的 Future，此时Future是关着的，此时 Future 未能完成，事件循环继续执行其他事件。
&lt;ul>
&lt;li>Completed with a value: 打开了，带有一个值 &lt;br>
等到数据抵达时，Future 得到数据并打开它，如果Future 完成并带有一个值，此时会触发你的 &lt;code>then&lt;/code> 回调。&lt;code>then&lt;/code> 是你可以用来在每个 Future 上注册回调的实例方法，你可以用它创建一个函数，传入一个匹配 Future 类型的参数。&lt;/li>
&lt;li>Completed with an error: 打开了，抛出一个异常 &lt;br>
如果Future 在完成时没有带一个值，你可以使用 &lt;code>catchError&lt;/code>注册另一个回调，catchError 的工作方式和 then 一样，唯一不同的是它捕获异常而不是值。你甚至可以给它一个&lt;code>test&lt;/code>方法，你可以通过这种方式使用多个 catchError 方法，每种方法都会检查错误返回值的类型。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">void main() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Future&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">int&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>.delayed (
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Duration (seconds: 3),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> () { return 100; },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ).then((value) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(value);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }).catchError(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (err) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#39;Caught $err&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> test: (err) =&amp;gt; err.runtimeType == String,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ).whenComplete (() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#39;All finished!&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#39;waiting...&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Future方法&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Future.value &lt;br>
如果你已经知道 Future 返回的值，你可以使用 Future.value 为构造函数命名，构建缓存服务时可以用这个&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Future.error &lt;br>
它需要一个异常对象和一个可选的堆栈跟踪&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Future.delayed &lt;br>
在运行函数和 Future 完成之前，指定等待时长，可以创建测试用的模拟网络服务&lt;/p>
&lt;/li>
&lt;/ul>
&lt;link href="https://fonts.googleapis.com/css?family=default" rel="stylesheet" type="text/css">
&lt;div style="font-family:'default'; font-size:20px; font-style:normal; font-weight:bold; color: blue">
Streams
&lt;/div>
&lt;p>每个 future 单一地传递错误，或者数据，Streams随着时间的推移，可以传送零个、多个值，或者是错误。&lt;/p>
&lt;p>
&lt;link href="https://fonts.googleapis.com/css?family=default" rel="stylesheet" type="text/css">
&lt;div style="font-family:'default'; font-size:20px; font-style:normal; font-weight:bold; color: blue">
async await
&lt;/div>
async 和 await 实际上只是 future 和 streams 的替代语法，可以帮助你编写更清晰、更易读的代码。在连续的Future中，每一处Future都需要定义、then、return，而await只需如下写：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">import &amp;#39;dart:io&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">void main() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> createData();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Future&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ProcessedData&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> createData() async {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> try {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final id = await _loadFromDisk();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final data = await _fetchNetworkData(id);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ProcessedData(data);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } on HttpException catch (err) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#39;Network error: $err&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ProcessedData.empty();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } finally {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#39;All done!&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Future&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">int&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> _loadFromDisk() async {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#39;loadFromDisk&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Future&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">String&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> _fetchNetworkData(int id) async {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#39;NetworkData&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return &amp;#39;NetworkData&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class ProcessedData {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ProcessedData(this.data);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final String data;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> static Future&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ProcessedData&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> empty() async {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var empty = ProcessedData(&amp;#39;empty&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(empty);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return empty;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面官方示例介绍了连续的 await，这是更清晰的使用示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">void main() async {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(getMeSomeFood());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(await getMeSomethingBetter());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> maybeSomethingSweet().then((String value) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(value);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#39;done&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Future&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">String&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> getMeSomeFood() async {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return &amp;#34;an apple&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Future&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">String&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> getMeSomethingBetter() async {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return &amp;#34;a burger?&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Future&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">String&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> maybeSomethingSweet() async {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return &amp;#34;a chocolate cake!!&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// output:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// Instance of ‘_Future&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">String&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>’ 不等待，返回一个future
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// a burger? 等待future完成
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// done
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// a chocolate cake!! 不等待，先继续执行print(&amp;#39;done&amp;#39;)，future完成后再调用then
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;link href="https://fonts.googleapis.com/css?family=default" rel="stylesheet" type="text/css">
&lt;div style="font-family:'default'; font-size:20px; font-style:normal; font-weight:bold; color: blue">
Generator
&lt;/div>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Single value&lt;/th>
&lt;th>Zero or more values&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Sync:&lt;/td>
&lt;td>int&lt;/td>
&lt;td>Iterable&lt;int>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Async:&lt;/td>
&lt;td>Future&lt;int>&lt;/td>
&lt;td>Stream&lt;int>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>当您需要延迟生成一系列值时，请考虑使用&lt;em>生成器函数&lt;/em>。Dart 内置支持两种生成器函数：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>同步&lt;/strong>生成器：返回一个&lt;a class="link" href="https://api.dart.dev/stable/dart-core/Iterable-class.html" target="_blank" rel="noopener"
>&lt;code>Iterable&lt;/code>&lt;/a>对象。&lt;/li>
&lt;li>&lt;strong>异步&lt;/strong>生成器：返回一个&lt;a class="link" href="https://api.dart.dev/stable/dart-async/Stream-class.html" target="_blank" rel="noopener"
>&lt;code>Stream&lt;/code>&lt;/a>对象。&lt;/li>
&lt;/ul>
&lt;p>实现一个&lt;strong>同步&lt;/strong>生成器函数，将函数体标记为&lt;code>sync*&lt;/code>，使用&lt;code>yield&lt;/code>语句传递值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dart" data-lang="dart">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">naturalsTo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kd">sync&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kd">yield&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>实现&lt;strong>异步&lt;/strong>生成器函数，将函数体标记为&lt;code>async*&lt;/code>，使用&lt;code>yield&lt;/code>语句传递值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dart" data-lang="dart">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Stream&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">asynchronousNaturalsTo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kd">async&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kd">yield&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果您的生成器是递归的，您可以使用以下方法提高其性能&lt;code>yield*&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dart" data-lang="dart">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Iterable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">naturalsDownFrom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kd">sync&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">yield&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">yield&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">naturalsDownFrom&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="flutter">flutter&lt;/h1>
&lt;h2 id="widget生命周期">Widget生命周期&lt;/h2>
&lt;p>&lt;strong>StatelessWidget生命周期源码图&lt;/strong>
&lt;img src="https://xiaoxiano.github.io/p/flutter/6.jpg"
width="1787"
height="966"
srcset="https://xiaoxiano.github.io/p/flutter/6_hu9df739c1aeb15e1ce9f35dea789d6e83_349244_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/flutter/6_hu9df739c1aeb15e1ce9f35dea789d6e83_349244_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="443px"
>&lt;/p>
&lt;p>Flutter 中万物皆为Widget，&lt;code>widget&lt;/code>类继承自&lt;code>DiagnosticableTree&lt;/code>。&lt;/p>
&lt;p>&lt;code>DiagnosticableTree&lt;/code>即“诊断树”，主要作用是提供调试信息。&lt;/p>
&lt;p>Flutter 中的 UI 或一堆小部件组成，通常称为小部件树，根据 Widget 树生成一个 Element 树，Widget 和 Element 是一一对应的，根据 Element 树生成 Render 树（渲染树），真正的布局和渲染逻辑在 Render 树中。&lt;/p>
&lt;p>&lt;code>Widget.createElement()&lt;/code> :创建一个Element实例，记为&lt;code>element&lt;/code>。&lt;/p>
&lt;p>&lt;code>BuildContext&lt;/code>是widget对应的Element，用于跟踪树中的每个小部件并定位它们及其在树中的位置。每个小部件的&lt;code>BuildContext&lt;/code>都传递给它们的&lt;code>build&lt;/code>方法。&lt;code>build&lt;/code>方法返回小部件呈现的小部件树。&lt;/p>
&lt;p>&lt;code>context&lt;/code>参数是BuildContext类的一个实例，表示当前 widget 在 widget 树中的上下文，每一个 widget 都会对应一个 context 对象。在很多时候我们都需要使用context，比如获取主题：&lt;code>Theme.of(context).colorScheme.primary&lt;/code>。&lt;/p>
&lt;p>&lt;code>Key&lt;/code>: [Key]是[Widget]、[Element]和[SemanticsNode]的标识符。Key可以保持组件之前的状态，比如在用户滑动时或者修改集合时，决定的条件在&lt;code>canUpdate()&lt;/code>方法中。使用 &lt;code>GlobalKey&lt;/code>时，Flutter 不仅会在树中查找与特定级别匹配的键，还会在整个应用程序中查找,GlobalKey就像全局变量。&lt;/p>
&lt;p>&lt;code>canUpdate(...)&lt;/code>: &lt;code>newWidget&lt;/code>与&lt;code>oldWidget&lt;/code>的&lt;code>runtimeType&lt;/code>和&lt;code>key&lt;/code>同时相等时就会用&lt;code>new widget&lt;/code>去更新&lt;code>Element&lt;/code>对象的配置。如果 Type 相同但 Key 不同，则Element将被deactivated（释放，但它可能仍然存在）。如果 Type 不同，则Element将被disposed（永久删除）。&lt;/p>
&lt;p>&lt;code>element.mount()&lt;/code> :调用&lt;code>createRenderObject&lt;/code>创建RenderObject，并使用&lt;code>attachRenderObject&lt;/code>将RenderObject关联到Element上。&lt;/p>
&lt;h3 id="使用">使用&lt;/h3>
&lt;p>&lt;strong>StatelessWidget&lt;/strong> 要求我们重写&lt;code>build&lt;/code>方法,它将&lt;code>state&lt;/code>作为输入并提供相应的 UI 显示在用户屏幕上：UI = build(state),当我们初始化一个StatelessWidget对象时会调用 build 方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class CounterWidget extends StatelessWidget {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final bool isLoading;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final int counter;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> const CounterWidget({
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> required this.isLoading,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> required this.counter,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Widget build(BuildContext context) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return isLoading ? CircularProgressIndicator() : Text(&amp;#39;$counter&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>StatefulWidget&lt;/strong> 要求我们重写&lt;code>createState&lt;/code>功能:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class MyHomePage extends StatefulWidget {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final bool isLoading;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final int counter;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> const MyHomePage({
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> required this.isLoading,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> required this.counter,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> State&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">MyHomePage&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> createState() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return MyHomePageState();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>createState()&lt;/code>会为每一个&lt;code>StatefulElement&lt;/code>创建一个State对象。示例中创建了&lt;code>MyHomePageState&lt;/code>对象，当&lt;code>MyHomePageState&lt;/code>初始化时，它会调用&lt;code>build&lt;/code>函数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class MyHomePageState extends State&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">MyHomePage&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Widget build(BuildContext context) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return Scaffold(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> body: Center(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> child: CounterWidget(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> isLoading: widget.isLoading,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> counter: widget.counter,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> );
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>widget.isLoading&lt;/code>、&lt;code>widget.counter&lt;/code>属性用于表示当前配置信息，并且在父级更新小部件时会被自动更新。&lt;code>setState&lt;/code>是State的方法。当我们调用setState方法时，build方法将立即再次被调用。&lt;/p>
&lt;p>当你的组件是静态的，不需要更新自身状态,使用StatelessWidget。当你的组件需要根据事件或交互来动态更新自身状态,使用StatefulWidget。&lt;/p>
&lt;h2 id="getx">Getx&lt;/h2>
&lt;h3 id="状态管理">状态管理&lt;/h3>
&lt;h4 id="介绍">介绍&lt;/h4>
&lt;table>
&lt;tr>
&lt;td>分类&lt;/td>
&lt;td>状态管理器&lt;/td>
&lt;td>消耗RAM&lt;/td>
&lt;td>结论&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>无状态页面&lt;/td>
&lt;td>GetView&lt;/td>
&lt;td>最少&lt;/td>
&lt;td>相当于StatelessWidget,性能最好，最常用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>简单的状态管理（一个页面的状态管理）&lt;/td>
&lt;td>GetBuilder&lt;/td>
&lt;td>较少&lt;/td>
&lt;td>相当于StatefulWidget,性能较好&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td rowspan="2">反应式状态管理（全局的状态管理）&lt;/td>
&lt;td>Obx&lt;/td>
&lt;td>稍多&lt;/td>
&lt;td>反应式的基础层，较Getx简洁&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GetX&lt;/td>
&lt;td>较多&lt;/td>
&lt;td>可以灵活使用的反应式状态管理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>混合态管理&lt;/td>
&lt;td>MixinBuilder&lt;/td>
&lt;td>最多&lt;/td>
&lt;td>在GetBuilder中插入一个Obx，既可以响应式更新、也可以手动更新&lt;/td>
&lt;/tr>
&lt;/table>
&lt;h4 id="controller">Controller&lt;/h4>
&lt;p>Getx状态管理的代码结构都可以分为GetXController（控制器层）和view（界面层），GetXController 可以进一步分为state（状态层/变量层），logic（逻辑层）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">└── sinup
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── controller.dart ──┤─ ─ logic.dart
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ │─ ─ state.dart
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── view.dart
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;link href="https://fonts.googleapis.com/css?family=default" rel="stylesheet" type="text/css">
&lt;div style="font-family:'default'; font-size:20px; font-style:normal; font-weight:bold; color: black">
生命周期
&lt;/div>
在 StatefulWidget 中，使用&lt;code>initState&lt;/code>或&lt;code>dispose()&lt;/code>，而在 Controller 中我们可以使用相对应的操作：&lt;/p>
&lt;ol>
&lt;li>&lt;code>onStart&lt;/code>（开始）&lt;strong>[不可覆盖]&lt;/strong>：组件在内存分配的时间点就会被调用，完成后会调用onInit方法&lt;/li>
&lt;li>&lt;code>onInit&lt;/code>（初始化）：组件在内存分配后会被马上调用，适用于初始化 Controller（例如一些成员属性的初始化），详见Workers小节&lt;/li>
&lt;li>&lt;code>onReady&lt;/code>（加载完成）：在 onInit 一帧后被调用，适合做一些导航进入的事件（例如对话框提示、SnackBar）或异步网络请求&lt;/li>
&lt;li>&lt;code>onClose&lt;/code>（控制器被释放）：在 &lt;code>onDelete&lt;/code> 方法前调用、用于销毁 &lt;code>controller&lt;/code> 使用的资源（例如关闭事件监听，关闭流对象、动画）或者销毁可能造成内存泄露的对象（例如 &lt;code>TextEditingController&lt;/code>，&lt;code>AniamtionController&lt;/code>）。也适用于将数据进行离线持久化。&lt;/li>
&lt;li>&lt;code>onDelete&lt;/code>（删除）&lt;strong>[不可覆盖]&lt;/strong>：在 &lt;code>controller&lt;/code>销毁前调用，将控制器从内存中删除&lt;/li>
&lt;/ol>
&lt;h4 id="反应状态管理">反应状态管理&lt;/h4>
&lt;h5 id="反应变量">反应变量&lt;/h5>
&lt;p>使用反应状态管理需要声明反应变量，你有3种方法可以把一个变量变成是 &amp;ldquo;可观察的&amp;rdquo;。&lt;/p>
&lt;p>1 - 第一种是使用 &lt;strong>&lt;code>Rx{Type}&lt;/code>&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">// 建议使用初始值，但不是强制性的
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">final name = RxString(&amp;#39;&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">final isLogged = RxBool(false);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">final count = RxInt(0);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">final balance = RxDouble(0.0);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">final items = RxList&amp;lt;String&amp;gt;([]);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">final myMap = RxMap&amp;lt;String, int&amp;gt;({});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>2 - 第二种是使用 &lt;strong>&lt;code>Rx&lt;/code>&lt;/strong>，规定泛型 &lt;code>Rx&amp;lt;Type&amp;gt;&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">final name = Rx&amp;lt;String&amp;gt;(&amp;#39;&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">final isLogged = Rx&amp;lt;Bool&amp;gt;(false);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">final count = Rx&amp;lt;Int&amp;gt;(0);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">final balance = Rx&amp;lt;Double&amp;gt;(0.0);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">final number = Rx&amp;lt;Num&amp;gt;(0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">final items = Rx&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;([]);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">final myMap = Rx&amp;lt;Map&amp;lt;String, int&amp;gt;&amp;gt;({});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 自定义类 - 可以是任何类
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">final user = Rx&amp;lt;User&amp;gt;();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>3 - 第三种更实用、更简单和&lt;strong>首选的&lt;/strong>方法，只需添加 &lt;strong>&lt;code>.obs&lt;/code>&lt;/strong> 作为&lt;code>value&lt;/code>的属性。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">final name = &amp;#39;&amp;#39;.obs;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">final isLogged = false.obs;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">final count = 0.obs;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">final balance = 0.0.obs;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">final number = 0.obs;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">final items = &amp;lt;String&amp;gt;[].obs;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">final myMap = &amp;lt;String, int&amp;gt;{}.obs;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 自定义类 - 可以是任何class, literally
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">final user = User().obs;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="使用value">使用value&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">// controller
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">final count1 = 0.obs;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">final count2 = 0.obs;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">int get sum =&amp;gt; count1.value + count2.value; // 由于.obs把变量换成`Rx{Type}`类型，所以需要用.value取值
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">// 视图
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">GetX&amp;lt;Controller&amp;gt;(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> builder: (controller) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#34;count 1 rebuild&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return Text(&amp;#39;${controller.count1.value}&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">GetX&amp;lt;Controller&amp;gt;(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> builder: (controller) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#34;count 2 rebuild&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return Text(&amp;#39;${controller.count2.value}&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">GetX&amp;lt;Controller&amp;gt;(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> builder: (controller) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#34;count 3 rebuild&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return Text(&amp;#39;${controller.sum}&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">),
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="obx">Obx&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class StateObxView extends StatelessWidget {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> StateObxView({Key? key}) : super(key: key);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final count = 0.obs;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Widget build(BuildContext context) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return Scaffold(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> appBar: AppBar(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> title: Text(&amp;#34;Obx(...)&amp;#34;),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> body: Center(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> child: Column(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> children: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Obx(() =&amp;gt; Text(&amp;#34;count1 -&amp;gt; &amp;#34; + count.toString())),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Obx(() =&amp;gt; Text(&amp;#34;count2 -&amp;gt; &amp;#34; + count.toString())),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Divider(),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ElevatedButton(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onPressed: () {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> count.value++;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> child: Text(&amp;#39;add&amp;#39;),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> );
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="getx-1">GetX&lt;/h5>
&lt;p>Controller&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class CountController extends GetxController {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final _count = 0.obs;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> set count(value) =&amp;gt; this._count.value = value;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> get count =&amp;gt; this._count.value;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final _count2 = 0.obs;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> set count2(value) =&amp;gt; this._count2.value = value;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> get count2 =&amp;gt; this._count2.value;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> add() =&amp;gt; _count.value++;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> add2() =&amp;gt; _count2.value++;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>View&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class StateGetxView extends StatelessWidget {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> StateGetxView({Key? key}) : super(key: key);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final controller = CountController();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Widget build(BuildContext context) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return Scaffold(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> appBar: AppBar(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> title: Text(&amp;#34;Getx&amp;#34;),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> body: Center(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> child: Column(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> children: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> GetX&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">CountController&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> init: controller,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> initState: (_) {},
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> builder: (_) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#34;GetX - 1&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return Text(&amp;#39;value 1 -&amp;gt; ${_.count}&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> GetX&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">CountController&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> init: controller,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> initState: (_) {},
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> builder: (_) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#34;GetX - 2&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return Text(&amp;#39;value 2 -&amp;gt; ${_.count}&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Divider(),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> GetX&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">CountController&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> init: controller,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> initState: (_) {},
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> builder: (_) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#34;GetX - 3&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return Column(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> children: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Text(&amp;#39;value 3 -&amp;gt; ${_.count}&amp;#39;),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ElevatedButton(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onPressed: () {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> _.add();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> child: Text(&amp;#39;count1&amp;#39;),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> );
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Divider(),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // count2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> GetX&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">CountController&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> init: controller,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> initState: (_) {},
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> builder: (_) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#34;GetX - 4&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return Text(&amp;#39;value 4 -&amp;gt; ${_.count2}&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Divider(),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 按钮
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ElevatedButton(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onPressed: () {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> controller.add();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> child: Text(&amp;#39;count1&amp;#39;),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ElevatedButton(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onPressed: () {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> controller.add2();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> child: Text(&amp;#39;count2&amp;#39;),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> );
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="简单状态管理">简单状态管理&lt;/h4>
&lt;h5 id="getbuilder">GetBuilder&lt;/h5>
&lt;p>Controller同Getx&lt;/p>
&lt;p>View&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class StateGetBuilderView extends StatelessWidget {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> StateGetBuilderView({Key? key}) : super(key: key);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final controller = CountController();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Widget build(BuildContext context) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return Scaffold(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> appBar: AppBar(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> title: Text(&amp;#34;GetBuilder&amp;#34;),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> body: Center(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> child: Column(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> children: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> GetBuilder&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">CountController&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> init: controller,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> initState: (_) {},
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> builder: (_) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#34;GetBuilder - 1&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return Text(&amp;#39;value -&amp;gt; ${_.count}&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> GetBuilder&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">CountController&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> init: controller,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> initState: (_) {},
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> builder: (_) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#34;GetBuilder - 2&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return Text(&amp;#39;value -&amp;gt; ${_.count}&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Divider(),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> GetBuilder&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">CountController&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> init: controller,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> initState: (_) {},
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> builder: (_) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#34;GetBuilder - 3&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return Column(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> children: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Text(&amp;#39;value -&amp;gt; ${_.count}&amp;#39;),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ElevatedButton(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onPressed: () {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> _.add();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> child: Text(&amp;#39;GetBuilder -&amp;gt; add&amp;#39;),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> );
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Divider(),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // count2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> GetBuilder&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">CountController&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> init: controller,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> initState: (_) {},
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> builder: (_) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#34;GetBuilder - 4&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return Text(&amp;#39;value count2 -&amp;gt; ${_.count2}&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Divider(),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // id2 标记一个 `builder` ，触发方式`controller.update([&amp;#34;id2&amp;#34;]);` ，可传多个 `Array` 类型。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> GetBuilder&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">CountController&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> id: &amp;#34;id2&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> init: controller,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> initState: (_) {},
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> builder: (_) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#34;GetBuilder - 4&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return Text(&amp;#39;id2 -&amp;gt; value count2 -&amp;gt; ${_.count2}&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Divider(),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 按钮
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ElevatedButton(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onPressed: () {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> controller.add();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> child: Text(&amp;#39;add&amp;#39;),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ElevatedButton(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onPressed: () {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> controller.add2();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> child: Text(&amp;#39;add2&amp;#39;),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ElevatedButton(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onPressed: () {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> controller.update();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> child: Text(&amp;#39;controller.update()&amp;#39;),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ElevatedButton(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onPressed: () {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> controller.update([&amp;#34;id2&amp;#34;]);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> child: Text(&amp;#39;controller.update(id2)&amp;#39;),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> );
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="workers">Workers&lt;/h4>
&lt;p>Workers可以精确控制事件发生时触发回调，常用于Controller的onInit中：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">class CountController extends GetxController {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final _count = 0.obs;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> set count(value) =&amp;gt; this._count.value = value;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> get count =&amp;gt; this._count.value;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> add() =&amp;gt; _count.value++;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void onInit() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> super.onInit();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 每次_count变化时调用
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ever(_count, (value) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#34;ever -&amp;gt; &amp;#34; + value.toString());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 第一次被改变时才会被调用。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> once(_count, (value) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#34;once -&amp;gt; &amp;#34; + value.toString());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 防DDos - 每当用户停止输入1秒时调用
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> debounce(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> _count,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (value) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#34;debounce -&amp;gt; &amp;#34; + value.toString());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> time: Duration(seconds: 1),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> );
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 忽略1秒内的所有变化。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> interval(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> _count,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (value) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(&amp;#34;interval -&amp;gt; &amp;#34; + value.toString());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> time: Duration(seconds: 1),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> );
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="路由管理">路由管理&lt;/h3>
&lt;h4 id="普通路由">普通路由&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">// 导航到新的页面。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Get.to(NextScreen());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 要导航到下一条路由，并在返回后立即接收或更新数据。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var data = await Get.to(Payment());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 关闭SnackBars、Dialogs、BottomSheets或任何你通常会用Navigator.pop(context)关闭的东西。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Get.back();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 在另一个页面上，发送前一个路由的数据。并使用它。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Get.back(result: &amp;#39;success&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">if(data == &amp;#39;success&amp;#39;) madeAnything();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 进入下一个页面，但没有返回上一个页面的选项（用于SplashScreens，登录页面等）。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Get.off(NextScreen());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 进入下一个界面并取消之前的所有路由（在购物车、投票和测试中很有用）。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Get.offAll(NextScreen());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="别名路由">别名路由&lt;/h4>
&lt;p>普通路由管理起来比较麻烦,通常我们使用别名路由。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">// 导航到下一个页面
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Get.toNamed(&amp;#34;/NextScreen&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 传递参数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Get.toNamed(&amp;#34;/NextScreen&amp;#34;, arguments: &amp;#34;Hello&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 浏览并删除前一个页面。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Get.offNamed(&amp;#34;/NextScreen&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 浏览并删除所有以前的页面。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Get.offAllNamed(&amp;#34;/NextScreen&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 动态URL
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Get.offAllNamed(&amp;#34;/NextScreen?device=phone&lt;span class="ni">&amp;amp;id=354&amp;amp;name=Enzo&amp;#34;);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>示例 1&lt;/strong>&lt;/p>
&lt;p>注册时跳到到Pin页面，路由传参：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">// RegisterController
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Get.offNamed(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> RouteNames.systemRegisterPin,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> arguments: UserRegisterReq(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> username: userNameController.text,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> email: emailController.text,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> password: password,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从路由接收参数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">// RegisterPinController
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">UserRegisterReq? req = Get.arguments;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="依赖注入">依赖注入&lt;/h3>
&lt;p>&lt;strong>Get.put()：&lt;/strong> 不使用控制器实例也会被创建&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">Get.put(CountController());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Get.lazyPut()：&lt;/strong> 懒加载方式创建实例，只有在使用时才创建&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">Get.lazyPut&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">CountController&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>(() =&amp;gt; CountController());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Get.putAsync()：&lt;/strong> &lt;code>Get.put()&lt;/code>的异步版版本&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">Get.putAsync&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">CountController&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>(() async =&amp;gt; await CountController());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Get.create()：&lt;/strong> 每次使用都会创建一个新的实例&lt;/p>
&lt;p>&lt;strong>Get.find()：&lt;/strong> 你可以实例化100万个控制器，Get总会找到你所需的控制器&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">Get.find&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">CountController&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="其他">其他&lt;/h3>
&lt;h4 id="getview">GetView&lt;/h4>
&lt;p>一个已注册Controller的&lt;code>const Stateless&lt;/code>Widget。&lt;/p>
&lt;h4 id="getxservice">GetxService&lt;/h4>
&lt;p>这个类就像一个GetxController，需要在应用程序的生命周期绝对持久化类实例，使用GetxService。&lt;/p>
&lt;h4 id="其他高级-api">其他高级 API&lt;/h4>
&lt;p>&lt;a class="link" href="https://github.com/jonataslaw/getx#other-advanced-apis" target="_blank" rel="noopener"
>https://github.com/jonataslaw/getx#other-advanced-apis&lt;/a>&lt;/p>
&lt;h2 id="dio">dio&lt;/h2>
&lt;h3 id="原理">原理&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># dio_mixin.dart 文件中 DioMixin 实现了 Dio
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">abstract class DioMixin implements Dio {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Future&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Response&lt;/span>&lt;span class="err">&amp;lt;&lt;/span>&lt;span class="na">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&amp;gt; post&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> String path, { # path： 请求的url链接
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> data, # data： 请求数据，例如上传用到的FromData
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Map&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">String&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="na">dynamic&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>? queryParameters, # data： 请求数据，例如上传用到的FromData
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Options? options, # queryParameters： 查询参数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CancelToken? cancelToken, # cancelToken： 用来取消发送请求的token
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ProgressCallback? onSendProgress, # onSendProgress： 网络请求发送的进度
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ProgressCallback? onReceiveProgress, # onSendProgress： 网络请求发送的进度
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return request&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>( # 返回request方法
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> path,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> data: data,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> options: checkOptions(&amp;#39;POST&amp;#39;, options),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> queryParameters: queryParameters,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cancelToken: cancelToken,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onSendProgress: onSendProgress,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onReceiveProgress: onReceiveProgress,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> );
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>get() post() 等调用时，返回request方法，request 方法对请求参数处理，并返回 fetch 方法，fetch 进行响应数据设定、构建请求流、添加拦截器、请求分发。&lt;/p>
&lt;h2 id="webview">WebView&lt;/h2>
&lt;p>WebView是应用内显示网页的功能，查看项目的官网、文档、条款等经常用到。推荐使用flutter_inappwebview，比官方webview_flutter有更丰富的功能和详尽的&lt;a class="link" href="https://inappwebview.dev/docs/5.x.x/intro" target="_blank" rel="noopener"
>文档&lt;/a>。主要功能：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://inappwebview.dev/docs/webview/in-app-webview" target="_blank" rel="noopener"
>InAppWebView&lt;/a>：是一个内嵌原生 WebView 小部件，集成到 Flutter 小部件树中。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://inappwebview.dev/docs/webview/context-menu" target="_blank" rel="noopener"
>ContextMenu&lt;/a>：WebView 的快捷菜单。例如长按网页文本后的复制。&lt;/li>
&lt;li>&lt;a class="link" href="https://inappwebview.dev/docs/webview/headless-in-app-webview" target="_blank" rel="noopener"
>HeadlessInAppWebView&lt;/a>：无头模式下的 WebView。在没有界面或UI的情况下运行WebView。它可以在没有用户界面的情况下执行网页加载和渲染操作，而不需要在用户界面中显示网页，用于后台处理网页数据、自动化测试、网络爬虫等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>InAppBrowser&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://inappwebview.dev/docs/in-app-browsers/in-app-browser" target="_blank" rel="noopener"
>InAppBrowser&lt;/a>：显示在 Flutter 应用程序顶部的原生 WebView，它没有集成到 Flutter 小部件树中。&lt;/li>
&lt;li>&lt;a class="link" href="https://inappwebview.dev/docs/in-app-browsers/chrome-safari-browser" target="_blank" rel="noopener"
>ChromeSafariBrowser&lt;/a>：Android 上的 &lt;a class="link" href="https://developer.chrome.com/docs/android/custom-tabs/overview/" target="_blank" rel="noopener"
>Chrome 自定义选项卡&lt;/a>和 iOS 上的&lt;a class="link" href="https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller" target="_blank" rel="noopener"
>SFSafariViewController&lt;/a>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://inappwebview.dev/docs/in-app-localhost-server" target="_blank" rel="noopener"
>InAppLocalhostServer&lt;/a>：这个类允许你在 http://localhost:[port] 上创建一个简单的服务器。默认端口值为 8080。能够在本地服务器上缓存 js，html等资产文件，优化加载时间。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://inappwebview.dev/docs/cookie-manager" target="_blank" rel="noopener"
>CookieManager&lt;/a>：此类实现了一个单例对象（共享实例），该对象管理 WebView 实例使用的 cookie。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://inappwebview.dev/docs/http-auth-credential-database" target="_blank" rel="noopener"
>HttpAuthCredentialDatabase&lt;/a>：此类实现管理共享 HTTP 身份验证凭据缓存的单例对象（共享实例）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://inappwebview.dev/docs/web-storage-manager" target="_blank" rel="noopener"
>WebStorageManager&lt;/a>：这个类实现了一个单例对象（共享实例），它管理 WebView 实例使用的 Web 存储。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://inappwebview.dev/docs/service-worker" target="_blank" rel="noopener"
>Service Worker&lt;/a>：Service Worker 是 PWA 的基本组成部分。它们支持快速加载（无论网络如何）、离线访问、推送通知和其他功能。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;details class="spoiler " id="spoiler-21">
&lt;summary>InAppWebView官方示例注释&lt;/summary>
&lt;p>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">import &amp;#39;dart:async&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import &amp;#39;package:flutter/foundation.dart&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import &amp;#39;package:flutter/material.dart&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import &amp;#39;package:flutter_inappwebview/flutter_inappwebview.dart&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import &amp;#39;package:url_launcher/url_launcher.dart&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Future main() async {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> WidgetsFlutterBinding.ensureInitialized();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 如果是Android，则对加载到 WebView 中的 Web内容（HTML/CSS/JavaScript）启用调试
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (!kIsWeb &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> defaultTargetPlatform == TargetPlatform.android) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> await InAppWebViewController.setWebContentsDebuggingEnabled(true);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> runApp(const MaterialApp(home: MyApp()));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class MyApp extends StatefulWidget {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> const MyApp({super.key});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> State&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">MyApp&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> createState() =&amp;gt; _MyAppState();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class _MyAppState extends State&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">MyApp&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final GlobalKey webViewKey = GlobalKey();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> InAppWebViewController? webViewController;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> InAppWebViewSettings settings = InAppWebViewSettings(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 能够监听 WebView.shouldOverrideUrlLoading（URL即将加载时）的事件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> useShouldOverrideUrlLoading: true,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 设置为 true 以防止 HTML5 音频或视频自动播放。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mediaPlaybackRequiresUserGesture: false,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 允许 HTML5 媒体播放在屏幕布局中内嵌显示，即让媒体播放器嵌入到网页的其他内容中一起显示
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> allowsInlineMediaPlayback: true,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 根据请求的来源定义了哪些功能可供使用（例如，访问麦克风、摄像头、电池、网络共享等）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> iframeAllow: &amp;#34;camera; microphone&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 如果 iframe 可以通过调用 requestFullscreen() 方法激活全屏模式，则设置为 true。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> iframeAllowFullscreen: true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> );
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> PullToRefreshController? pullToRefreshController;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> String url = &amp;#34;&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> double progress = 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final urlController = TextEditingController();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void initState() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> super.initState();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 在 WebView 中开启下拉刷新
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pullToRefreshController = kIsWeb ? null : PullToRefreshController(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> settings: PullToRefreshSettings(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> color: Colors.blue,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onRefresh: () async {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (defaultTargetPlatform == TargetPlatform.android) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> webViewController?.reload();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else if (defaultTargetPlatform == TargetPlatform.iOS) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> webViewController?.loadUrl(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> urlRequest: URLRequest(url: await webViewController?.getUrl()));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> );
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Widget build(BuildContext context) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return Scaffold(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> appBar: AppBar(title: const Text(&amp;#34;Official InAppWebView website&amp;#34;)),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> body: SafeArea(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> child: Column(children: &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Widget&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>[
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> TextField(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> decoration: const InputDecoration(prefixIcon: Icon(Icons.search)),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> controller: urlController,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> keyboardType: TextInputType.url,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onSubmitted: (value) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var url = WebUri(value);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (url.scheme.isEmpty) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> url = WebUri(&amp;#34;https://www.google.com/search?q=$value&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> webViewController?.loadUrl(urlRequest: URLRequest(url: url));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Expanded(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> child: Stack(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> children: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> InAppWebView(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> key: webViewKey,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 初始化URL
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> initialUrlRequest:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> URLRequest(url: WebUri(&amp;#34;https://inappwebview.dev/&amp;#34;)),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 初始化设置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> initialSettings: settings,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 下拉刷新
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pullToRefreshController: pullToRefreshController,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 创建 WebView 时触发的事件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onWebViewCreated: (controller) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> webViewController = controller;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 当 WebView 开始加载 url 时触发的事件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onLoadStart: (controller, url) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> setState(() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.url = url.toString();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> urlController.text = this.url;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 请求无访问权限资源 时触发的事件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onPermissionRequest: (controller, request) async {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return PermissionResponse(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> resources: request.resources,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> action: PermissionResponseAction.GRANT);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 让APP有机会在 URL即将加载 时进行控制。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> shouldOverrideUrlLoading:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (controller, navigationAction) async {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var uri = navigationAction.request.url!;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (![
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;http&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;https&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;file&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;chrome&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;data&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;javascript&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;about&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ].contains(uri.scheme)) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (await canLaunchUrl(uri)) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Launch the App
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> await launchUrl(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uri,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> );
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // and cancel the request
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return NavigationActionPolicy.CANCEL;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return NavigationActionPolicy.ALLOW;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 完成加载 url 时触发的事件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onLoadStop: (controller, url) async {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pullToRefreshController?.endRefreshing();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> setState(() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.url = url.toString();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> urlController.text = this.url;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 加载请求时遇到错误 时触发的事件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onReceivedError: (controller, request, error) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pullToRefreshController?.endRefreshing();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 更改正在加载的页面 时触发的事件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onProgressChanged: (controller, progress) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (progress == 100) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pullToRefreshController?.endRefreshing();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> setState(() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.progress = progress / 100;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> urlController.text = url;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // APP更新其访问的链接 时触发的事件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onUpdateVisitedHistory: (controller, url, androidIsReload) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> setState(() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.url = url.toString();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> urlController.text = this.url;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // WebView收到控制台报错 时触发的事件。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onConsoleMessage: (controller, consoleMessage) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (kDebugMode) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(consoleMessage);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 进度指示器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> progress &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nt">1.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">?&lt;/span> &lt;span class="na">LinearProgressIndicator&lt;/span>&lt;span class="err">(&lt;/span>&lt;span class="na">value:&lt;/span> &lt;span class="na">progress&lt;/span>&lt;span class="err">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">:&lt;/span> &lt;span class="na">Container&lt;/span>&lt;span class="err">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">ButtonBar&lt;/span>&lt;span class="err">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">alignment:&lt;/span> &lt;span class="na">MainAxisAlignment&lt;/span>&lt;span class="err">.&lt;/span>&lt;span class="na">center&lt;/span>&lt;span class="err">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">children:&lt;/span> &lt;span class="err">&amp;lt;&lt;/span>&lt;span class="na">Widget&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>[
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 后退按钮
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ElevatedButton(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> child: const Icon(Icons.arrow_back),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onPressed: () {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> webViewController?.goBack();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 前进按钮
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ElevatedButton(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> child: const Icon(Icons.arrow_forward),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onPressed: () {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> webViewController?.goForward();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 刷新按钮
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ElevatedButton(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> child: const Icon(Icons.refresh),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onPressed: () {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> webViewController?.reload();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> );
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/details>
&lt;h2 id="flexcolorpicker">FlexColorPicker&lt;/h2>
&lt;p>FlexColorPicker 是 Fl​​utter 的可定制颜色选择器。可以使用 Material 2 和 Material 3。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">// 属性
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ColorPicker(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> color: selectedColor,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 启用tab栏选择器:both, primary, accent, bw, custom, wheel
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pickersEnabled: const &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ColorPickerType&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="na">bool&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ColorPickerType.both: true,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ColorPickerType.primary: false,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ColorPickerType.accent: false,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ColorPickerType.bw: false,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ColorPickerType.custom: false,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ColorPickerType.wheel: true,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 自定义颜色
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // customColorSwatchesAndNames: customSwatches,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 定制tab标签
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pickerTypeLabels: &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ColorPickerType&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="na">String&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ColorPickerType.both: &amp;#39;preset&amp;#39;.tr,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ColorPickerType.wheel: &amp;#39;custom&amp;#39;.tr,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 在选择主要颜色后，基于所选颜色为您提供一组它的深浅颜色,禁用时才需要此属性
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // enableShadesSelection:false,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 生成所选颜色的 15 种色调的 Material 3 色调调色板
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> enableTonalPalette: true,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 颜色不透明度滑块
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> enableOpacity: true,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 显示所选颜色名称
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> showMaterialName: true,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> materialNameTextStyle: Theme.of(context).textTheme.bodySmall,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> showColorName: true,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> colorNameTextStyle: Theme.of(context).textTheme.bodySmall,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 显示所选颜色的 RGB 颜色值
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> showColorCode: true,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // colorCodeHasColor: true,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // showColorValue: true,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> colorCodeTextStyle: Theme.of(context).textTheme.bodyMedium,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> colorCodePrefixStyle: Theme.of(context).textTheme.bodySmall,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 显示最近选择的颜色
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // showRecentColors: true,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // maxRecentColors: 8,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // recentColors: ,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // onRecentColorsChanged: ,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 标题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> title: Text(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;ColorPicker&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> style: Theme.of(context).textTheme.headline6,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> heading: Text(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;Select color&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> style: Theme.of(context).textTheme.headline5,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> subheading: Text(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;Select color shade&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> style: Theme.of(context).textTheme.headline1,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> wheelSubheading: Text(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;Selected color and its shades&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> style: Theme.of(context).textTheme.headline1,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> opacitySubheading: Text(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;Opacity&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> style: Theme.of(context).textTheme.headline1,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> recentColorsSubheading: Text(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;Selected color and its color swatch&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> style: Theme.of(context).textTheme.headline1,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 各个颜色小部件的大小、形状和间距以及色轮和不透明度滑块大小的属性。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> width: 40,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> height: 40,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> borderRadius: 4,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> spacing: 5,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> runSpacing: 5,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> hasBorder: false,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // borderColor: Theme.of(context).dividerColor,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> elevation: 0,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 轮盘直径、宽度和边框
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> wheelDiameter: 155,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> wheelWidth: 16,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> wheelHasBorder: false,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // borderColor: Theme.of(context).dividerColor,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 颜色元素的间距、对齐方式和填充
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> crossAxisAlignment: CrossAxisAlignment.center,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> padding: const EdgeInsets.all(16),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> columnSpacing: 0,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 复制按钮,确定按钮,取消按钮,关闭按钮
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> enableTooltips: ture,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Dialog“确定”和“取消”操作按钮以及样式
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> actionButtons: const ColorPickerActionButtons(...),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 颜色的复制粘贴行为
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> copyPasteBehavior: const ColorPickerCopyPasteBehavior(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 颜色代码后缀复制按钮
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> editFieldCopyButton: ture,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 键盘快捷键
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ctrlC: ture,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ctrlV: ture,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 工具栏按钮
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> copyButton: ture,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> copyIcon: ture,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> copyTooltip: MaterialLocalizations.of(context).copyButtonLabel,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pasteButton: ture,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pasteIcon: ture,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pasteTooltip: MaterialLocalizations.of(context).pasteButtonLabel,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 从选取器复制颜色并将颜色粘贴
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> longPressMenu: ture,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> secondaryMenu: ture,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> secondaryOnDesktopLongOnDevice: ture,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 颜色代码格式和粘贴解析
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> copyFormat: ColorPickerCopyFormat.dartCode，
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> parseShortHexCode: ture,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> editUsesParsedPaste: ture,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> snackBarParseError: ture,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> snackBarMessage: ture,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> snackBarDuration: const Duration(milliseconds: 1800),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> feedbackParseError: false,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 回调
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 当选择具有所选新颜色值的新颜色时调用
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onColorChanged: (Color color) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> selectedColor = color;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 开始颜色选择时调用
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onColorChangeStart: ,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 结束颜色选择时调用
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onColorChangeEnd: ,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 返回最近选择的颜色的当前列表
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onRecentColorsChanged: ,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// dialog方法：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 在对话框打开时跟踪 ColorPicker 的不同onChange回调
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ColorPicker(...).showPickerDialog;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// dialog函数：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 只需传入对话框的构建上下文以及所需的起始颜色值，并等待它在对话框关闭时返回选定的颜色
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">showColorPickerDialog(...)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="widgetbook仅作了解">Widgetbook(仅作了解)&lt;/h2>
&lt;p>使用Widgetbook可以管理组件、使用不同设备尺寸测试组件、实时修改组件参数、协作共享。&lt;/p>
&lt;h3 id="windows配置">Windows配置&lt;/h3>
&lt;p>确保安装Visual Studio，及其应用：
&lt;img src="https://xiaoxiano.github.io/p/flutter/7.png"
width="1085"
height="312"
srcset="https://xiaoxiano.github.io/p/flutter/7_hu4fa1ec2a00219a167f5b56770646289b_37010_480x0_resize_box_3.png 480w, https://xiaoxiano.github.io/p/flutter/7_hu4fa1ec2a00219a167f5b56770646289b_37010_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="347"
data-flex-basis="834px"
>&lt;/p>
&lt;p>从&lt;a class="link" href="https://www.nuget.org/downloads" target="_blank" rel="noopener"
>https://www.nuget.org/downloads&lt;/a>下载最新的nuget.exe,并放入任意文件夹（我的在C:\Program Files\Microsoft Visual Studio），配置系统环境变量。&lt;/p>
&lt;h3 id="使用-1">使用&lt;/h3>
&lt;ul>
&lt;li>在pubspec.yaml安装 widgetbook 组件&lt;/li>
&lt;/ul>
&lt;div class="box info" >
&lt;span class="icon-box baseline">
&lt;svg>&lt;use href="#info-box">&lt;/use>&lt;/svg>
&lt;/span>
&lt;p>注意是放在 dev_dependencies 下面&lt;/p>
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">dev_dependencies:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> flutter_test:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sdk: flutter
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> flutter_lints: ^2.0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> widgetbook: ^3.0.0-beta.14
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>新建lib/app.widgetbook.dart&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">import &amp;#39;package:flutter/material.dart&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// ignore: depend_on_referenced_packages
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import &amp;#39;package:widgetbook/widgetbook.dart&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import &amp;#39;你的组件&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">void main() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> runApp(const HotReload());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class HotReload extends StatelessWidget {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> const HotReload({Key? key}) : super(key: key);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Widget build(BuildContext context) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return Widgetbook.material(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Widgetbook 属性选择
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> addons: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 主题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // buildMaterialThemeAddon(),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 字体大小
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // buildTextScaleAddon(),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 可以容纳包、文件夹、类别、组件和用例
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> directories: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> buildWidgetbookCategory(),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //buildWidgetbookCategory2(),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> );
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> TextScaleAddon buildTextScaleAddon() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return TextScaleAddon(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> setting: TextScaleSetting.firstAsSelected(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> textScales: [1.0, 1.25, 1.5, 1.75, 2]));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> MaterialThemeAddon buildMaterialThemeAddon() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return MaterialThemeAddon(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> setting: MaterialThemeSetting.firstAsSelected(themes: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> WidgetbookTheme(name: &amp;#34;dark&amp;#34;, data: ThemeData.dark()),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> WidgetbookTheme(name: &amp;#34;light&amp;#34;, data: ThemeData.light()),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ]));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> WidgetbookCategory buildWidgetbookCategory() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return WidgetbookCategory(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 分类名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name: &amp;#39;公共组件&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> children: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> WidgetbookComponent(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 组件名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name: &amp;#39;Spinkit加载&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> useCases: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> WidgetbookUseCase.center(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 组件用例名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name: &amp;#34;SpinKitFadingCircle&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> child: mySpinkit(),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> );
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="plugin">Plugin&lt;/h2>
&lt;p>Flutter Plugin是可以插入到主程序中，扩展功能的独立组件，我们实现原生平台的功能就需要用到。&lt;/p>
&lt;p>&lt;strong>创建&lt;/strong>&lt;/p>
&lt;p>使用 Android Studio 创建 Flutter 项目，项目类型选 plugin 。目录如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">project
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── android // 原生代码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── example // 运行调试
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── android // 创建插件后用Android Studio运行此目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── ios // 原生代码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── lib //
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>依赖：&lt;/strong>
由于该项目作为 Flutter 插件加载，不能识别Android依赖，在 Android Studio 中打开 Tools -&amp;gt; Flutter -&amp;gt; Open For Editing In Android Studio 可以看到依赖。缺java本地依赖请回看本文gradle小节。&lt;/p>
&lt;h3 id="flutter-1">Flutter&lt;/h3>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/flutter/PlatformChannels.png"
width="580"
height="647"
srcset="https://xiaoxiano.github.io/p/flutter/PlatformChannels_hu9187f560825b219b5824e0b76846e06f_23082_480x0_resize_box_3.png 480w, https://xiaoxiano.github.io/p/flutter/PlatformChannels_hu9187f560825b219b5824e0b76846e06f_23082_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="89"
data-flex-basis="215px"
>&lt;/p>
&lt;p>&lt;strong>Flutter有三种类型的Channel:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>BasicMessageChannel:用于传递字符串和半结构化的信息。持续通信，收到消息后可以回复此次消息，如：Native将遍历到的文件信息陆续传递到Dart。&lt;/li>
&lt;li>MethodChannel:用于传递方法调用(method invocation)。一次性通信：如Flutteri调用Native拍照；&lt;/li>
&lt;li>EventChannel:用于数据流(event streams)的通信。持续通信，收到消息后无法回复此次消息，通过长用于Native向Dat的通信，如：手机电量变化，网络连接变化，陀螺仪，传感器等；&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Channel支持的数据类型：&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Dart&lt;/th>
&lt;th>Android&lt;/th>
&lt;th>ios&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>null&lt;/td>
&lt;td>null&lt;/td>
&lt;td>nil (NSNull when nested)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bool&lt;/td>
&lt;td>java.lang.Boolean&lt;/td>
&lt;td>NSNumber numberWithBool:&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int&lt;/td>
&lt;td>java.lang.Integer&lt;/td>
&lt;td>NSNumber numberWithInt:&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int, if 32 bits notenough&lt;/td>
&lt;td>java.lang.Long&lt;/td>
&lt;td>NSNumber numberWithLong:&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>double&lt;/td>
&lt;td>java.lang.Double&lt;/td>
&lt;td>NSNumber numberWithDouble:&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>String&lt;/td>
&lt;td>java.lang.String&lt;/td>
&lt;td>NSString&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Uint8List&lt;/td>
&lt;td>byte[]&lt;/td>
&lt;td>FlutterStandardTypedData typedDataWithBytes:&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Int32List&lt;/td>
&lt;td>int][]&lt;/td>
&lt;td>FlutterStandardTypedData typedDataWithInt32:&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Int64List&lt;/td>
&lt;td>long[]&lt;/td>
&lt;td>FlutterStandardTypedData typedDataWithInt64:&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Float64List&lt;/td>
&lt;td>double[]&lt;/td>
&lt;td>FlutterStandardTypedData typedDataWithFloat64:&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>List&lt;/td>
&lt;td>java.util.ArrayList&lt;/td>
&lt;td>NSArray&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Map&lt;/td>
&lt;td>java.util.HashMap&lt;/td>
&lt;td>NSDictionary&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="android">Android&lt;/h3>
&lt;h4 id="java">Java&lt;/h4>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/flutter/10.jpg"
width="757"
height="292"
srcset="https://xiaoxiano.github.io/p/flutter/10_hu9850a35ccc7cfd8280aafa0e3eada853_24691_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/flutter/10_hu9850a35ccc7cfd8280aafa0e3eada853_24691_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="259"
data-flex-basis="622px"
>&lt;/p>
&lt;ul>
&lt;li>访问修饰符&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>访问范围&lt;/th>
&lt;th>private&lt;/th>
&lt;th>default&lt;/th>
&lt;th>protected&lt;/th>
&lt;th>public&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>同一类中&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>同一包中(子类和非子类)&lt;/td>
&lt;td>×&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>不同包中的子类&lt;/td>
&lt;td>×&lt;/td>
&lt;td>×&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>不同包中的非子类&lt;/td>
&lt;td>×&lt;/td>
&lt;td>×&lt;/td>
&lt;td>×&lt;/td>
&lt;td>√&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="进程和线程">进程和线程&lt;/h4>
&lt;p>&lt;strong>进程&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Android系统会为每个应用程序创建一个进程&lt;/li>
&lt;li>如果该应用程序的进程已经存在（已有组件已经在运行），那么刚启动的组件会在已有的进程和线程中启动运行&lt;/li>
&lt;li>组件可以运行在指定的其他线程，在AndroidManifest文件中的每种组件标签都支持设置 android:process 属性&lt;/li>
&lt;li>系统会依据进程的“importance hierarchy”等级清除进程，这是为了回收系统资源和新建进程&lt;/li>
&lt;li>Binder/Socket用于进程间通信&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>线程&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>系统会为应用程序创建一个名为“main”的主线程，不会为每个组件的实例创建单独的线程&lt;/li>
&lt;li>通常实现Runnable接口来定义线程的执行逻辑，然后将其传递给Thread类来启动线程&lt;/li>
&lt;li>Handler用于同进程的线程间通信，子线程运行并生成Message，Looper获取message并传递给Handler，Handler逐个获取子线程中的Message&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>概念&lt;/th>
&lt;th>定义&lt;/th>
&lt;th>作用&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>主线程 (UI线程、Main Thread)&lt;/td>
&lt;td>当应用程序启动时，会自动开启1条主线程&lt;/td>
&lt;td>处理与UI相关的事件(如更新、操作等)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>子线程 (工作线程)&lt;/td>
&lt;td>人为手动开启的线程&lt;/td>
&lt;td>执行耗时操作(如网络请求、数据加载等)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>消息 (Message)&lt;/td>
&lt;td>线程间通讯的数据单元 (即Handler接受&amp;amp;处理的消息对象)&lt;/td>
&lt;td>存储需操作的通信信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>消息队列 (Message Queue)&lt;/td>
&lt;td>一种数据结构(存储特点：先进先出)&lt;/td>
&lt;td>存储Handler发送过来的消息(Message)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>处理者 (Handler)&lt;/td>
&lt;td>主线程与子线程的通信媒介线程消息的主要处理者&lt;/td>
&lt;td>* 添加消息(Message)到消息队列(Message Queue) &lt;br />*处理循环器(Looper)分派过来的消息(Message)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>循环器 (Looper)&lt;/td>
&lt;td>消息队列(Message Queue)与处理者(Handler)的通信媒介 &lt;br />每个线程中只能拥有1个Looper，多个线程可往1个Looper所持有的MessageQueue 中发送消息，提供了线程间通信的可能&lt;/td>
&lt;td>* 消息获取：循环取出消息队列(Message Queue)的消息(Message) &lt;br />* 消息分发：将取出的消息(Message)发送给对应的处理者(Handler)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>View.post()&lt;/td>
&lt;td>View类中的方法，适用于任何View对象&lt;/td>
&lt;td>* 将Runnable对象添加到View的事件队列中 &lt;br />* 获取View的宽高等属性值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ThreadLocal&lt;/td>
&lt;td>提供线程本地变量&lt;/td>
&lt;td>ThreadLocal为每一个线程开辟了一个独立的存储器，只有对应的线程才能够访问其数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>runOnUiThread()&lt;/td>
&lt;td>Activity类中的方法，仅适用于Activity&lt;/td>
&lt;td>将Runnable对象添加到Activity的事件队列中，可以确保其在当前主线程中执行&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>参考：&lt;a class="link" href="https://blog.csdn.net/qq_32907491/article/details/132645806" target="_blank" rel="noopener"
>Handler&lt;/a>、&lt;a class="link" href="https://www.cnblogs.com/andy-songwei/category/1609976.html" target="_blank" rel="noopener"
>Android多线程&lt;/a>&lt;/p>
&lt;h4 id="android四大组件">android四大组件&lt;/h4>
&lt;p>1、activity
（1）一个Activity通常就是一个单独的屏幕（窗口）。&lt;/p>
&lt;p>（2）Activity之间通过Intent进行通信。&lt;/p>
&lt;p>（3）android应用中每一个Activity都必须要在AndroidManifest.xml配置文件中声明，否则系统将不识别也不执行该Activity。&lt;/p>
&lt;p>2、service
（1）service用于在后台完成用户指定的操作。service分为两种：&lt;/p>
&lt;p>（a）started（启动）：当应用程序组件（如activity）调用startService()方法启动服务时，服务处于started状态。&lt;/p>
&lt;p>（b）bound（绑定）：当应用程序组件调用bindService()方法绑定到服务时，服务处于bound状态。&lt;/p>
&lt;p>（2）startService()与bindService()区别：&lt;/p>
&lt;p>（a）started service（启动服务）是由其他组件调用startService()方法启动的，这导致服务的onStartCommand()方法被调用。当服务是started状态时，其生命周期与启动它的组件无关，并且可以在后台无限期运行，即使启动服务的组件已经被销毁。因此，服务需要在完成任务后调用stopSelf()方法停止，或者由其他组件调用stopService()方法停止。&lt;/p>
&lt;p>（b）使用bindService()方法启用服务，调用者与服务绑定在了一起，调用者一旦退出，服务也就终止，大有“不求同时生，必须同时死”的特点。&lt;/p>
&lt;p>（3）开发人员需要在应用程序配置文件中声明全部的service，使用&lt;service>&lt;/service>标签。&lt;/p>
&lt;p>（4）Service通常位于后台运行，它一般不需要与用户交互，因此Service组件没有图形用户界面。Service组件需要继承Service基类。Service组件通常用于为其他组件提供后台服务或监控其他组件的运行状态。&lt;/p>
&lt;p>3、content provider
（1）android平台提供了Content Provider使一个应用程序的指定数据集提供给其他应用程序。其他应用可以通过ContentResolver类从该内容提供者中获取或存入数据。&lt;/p>
&lt;p>（2）只有需要在多个应用程序间共享数据是才需要内容提供者。例如，通讯录数据被多个应用程序使用，且必须存储在一个内容提供者中。它的好处是统一数据访问方式。&lt;/p>
&lt;p>（3）ContentProvider实现数据共享。ContentProvider用于保存和获取数据，并使其对所有应用程序可见。这是不同应用程序间共享数据的唯一方式，因为android没有提供所有应用共同访问的公共存储区。&lt;/p>
&lt;p>（4）开发人员不会直接使用ContentProvider类的对象，大多数是通过ContentResolver对象实现对ContentProvider的操作。&lt;/p>
&lt;p>（5）ContentProvider使用URI来唯一标识其数据集，这里的URI以content://作为前缀，表示该数据由ContentProvider来管理。&lt;/p>
&lt;p>4、broadcast receiver
（1）你的应用可以使用它对外部事件进行过滤，只对感兴趣的外部事件(如当电话呼入时，或者数据网络可用时)进行接收并做出响应。广播接收器没有用户界面。然而，它们可以启动一个activity或serice来响应它们收到的信息，或者用NotificationManager来通知用户。通知可以用很多种方式来吸引用户的注意力，例如闪动背灯、震动、播放声音等。一般来说是在状态栏上放一个持久的图标，用户可以打开它并获取消息。&lt;/p>
&lt;p>（2）广播接收者的注册有两种方法，分别是程序动态注册和AndroidManifest文件中进行静态注册。&lt;/p>
&lt;p>（3）动态注册广播接收器特点是当用来注册的Activity关掉后，广播也就失效了。静态注册无需担忧广播接收器是否被关闭，只要设备是开启状态，广播接收器也是打开着的。也就是说哪怕app本身未启动，该app订阅的广播在触发时也会对它起作用。&lt;/p>
&lt;h4 id="channel">Channel&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>创建Channel&lt;/p>
&lt;p>三种Channel 的构造十分相似：&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">BasicMessageChannel(BinaryMessenger messenger,String name,MessageCodec&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> codec)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">MethodChannel(BinaryMessenger messenger,String name,MethodCodec codec)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">EventChannel(BinaryMessenger messenger,String name,MethodCodec codec)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>BinaryMessenger messenger&lt;/code> 消息的发送与接收的工具；&lt;/li>
&lt;li>&lt;code>String name&lt;/code> Channel的名字；&lt;/li>
&lt;li>&lt;code>MessageCodec&amp;lt;T&amp;gt; codec&lt;/code> 消息的编解码器，它有几种不同类型的实现：
&lt;ul>
&lt;li>&lt;code>BinaryCodec&lt;/code> 最为简单的一种Codec,因为其返回值类型和入参的类型相同，均为二进制格式(Android中为ByteBuffer,.iS中为NSData)。实际上，BinaryCodec在编解码过程中什么都没做，只是原封不动将二进制数据消息返回而已。或许你会因此觉得BinaryCodec没有意义，但是在某些情况下它非常有用，比如使用BinaryCodec可以使传递内存数据块时在编解码阶段免于内存拷贝；&lt;/li>
&lt;li>&lt;code>StringCodec&lt;/code> 用于字符串与二进制数据之间的编解码，其编码格式为UTF-8;&lt;/li>
&lt;li>&lt;code>JSONMessageCodec&lt;/code> 用于基础数据与二进制数据之间的编解码，其支持基础数据类型以及列表、字典。其在iOS端使用了NSJSONSerialization作为序列化的工具，而在Android端则使用了其自定义的JSONUtil.与StringCodec作为序列化工具；&lt;/li>
&lt;li>&lt;code>StandardMessageCodec&lt;/code> 是BasicMessageChannel的默认编解码器，其支持基础数据类型、二进制数据、列表、字典；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>接收/发送消息&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>接收Dart发来的消息：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">// BasicMessageChannel
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">setMessageHandler(MessageHandler&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> handler)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// MethodChannel
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">setMethodCallHandler(MethodCallHandler handler)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// EventChannel
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">void setstreamHandler(EventChannel.StreamHandler handler)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其参数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">// BasicMessageChannel
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// var1 是消息内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// var2 是回复此消息的回调函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public interface MessageHandler&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void onMessage(T var1, BasicMessageChannel.Reply&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> var2);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// MethodChannel
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// var1.methed 表示 var1方法名的String
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// var1.arguments 表示 var1方法的参数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// var2：提供 var2.success、 var2.error、 var2.notImplemented 三种回复
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public interface MethodCallHandler {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void onMethodCall(MethodCall var1,Result var2);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// EventChannel
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// args 是传递的参数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// eventSink 提供 success、error、endOfStream 三个回调方法
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// onCancel 取消监听时调用
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public interface StreamHandler {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void onListen(Object args,EventChannel.Eventsink eventsink);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void onCancel(Object o);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>向dart发送消息：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">void send(T message) // dart不回复
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">void send(T message,BasicMessageChannel.Reply&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> callback) //dart回复
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="androidmanifestxml">AndroidManifest.xml&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">manifest&lt;/span> &lt;span class="na">xmlns:android&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;http://schemas.android.com/apk/res/android&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">&amp;lt;!&lt;/span>&lt;span class="na">--&lt;/span> &lt;span class="err">应用的包名、版本&lt;/span> &lt;span class="na">--&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> package=&amp;#34;com.example.app&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> android:versionCode=&amp;#34;1&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> android:versionName=&amp;#34;1.0.1&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!-- 权限设置 ---&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.INTERNET&amp;#34;&lt;/span>&lt;span class="p">/&amp;gt;&lt;/span> &lt;span class="c">&amp;lt;!---访问网络&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"> &amp;lt;uses-permission android:name=&amp;#34;android.permission.ACCESS_NETWORK_STATE&amp;#34;/&amp;gt; &amp;lt;!---网络连接是否有效&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"> &amp;lt;uses-permission android:name=&amp;#34;android.permission.WRITE_EXTERNAL_STORAGE&amp;#34;/&amp;gt; &amp;lt;!--读写外部存储器&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"> &amp;lt;application
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"> &amp;lt;!---参考：https://juejin.cn/post/7006296858494500877--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> android:allowBackup=&amp;#34;true&amp;#34; &lt;span class="c">&amp;lt;!---允许app数据备份--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> android:icon=&amp;#34;@mipmap/ic_launcher&amp;#34; &lt;span class="c">&amp;lt;!--图标--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> android:label=&amp;#34;@string/app_name&amp;#34; &lt;span class="c">&amp;lt;!--标题--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> android:name=&amp;#34;.App&amp;#34; &lt;span class="c">&amp;lt;!--应用程序开始的类名--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> android:theme=&amp;#34;@style/AppTheme&amp;#34; &amp;gt; &lt;span class="c">&amp;lt;!--主题--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">activity&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;.ui.activities.MainActivity&amp;#34;&lt;/span> &lt;span class="err">&amp;lt;!&lt;/span>&lt;span class="na">--activity&lt;/span>&lt;span class="err">名称&lt;/span>&lt;span class="na">--&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> android:screenOrientation=&amp;#34;portrait&amp;#34; &lt;span class="c">&amp;lt;!--限制此页为竖屏显示--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> android:label=&amp;#34;@string/app_name&amp;#34; &amp;gt; &lt;span class="c">&amp;lt;!--标签名称--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">intent-filter&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">action&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.intent.action.MAIN&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span> &lt;span class="c">&amp;lt;!--Main point--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">category&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.intent.category.LAUNCHER&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span> &lt;span class="c">&amp;lt;!--启动时有效--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">intent-filter&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">activity&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">activity&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;.ui.activities.LoginActivity&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">android:screenOrientation&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;portrait&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">android:label&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;@string/app_name&amp;#34;&lt;/span> &lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">activity&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">service&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;com.csr.csrmesh2.MeshService&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">android:enabled&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">android:exported&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;false&amp;#34;&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="c">&amp;lt;!--禁止此服务被其他组件调用和交互--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">service&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">receiver&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;.events.ConnectionChangeReceiver&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">android:label&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;ConnectionChangeReceiver&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">intent-filter&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">action&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.net.conn.CONNECTIVITY_CHANGE&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span> &lt;span class="c">&amp;lt;!--网络连接发生变化--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!-- &amp;lt;action android:name=&amp;#34;android.net.wifi.WIFI_STATE_CHANGED&amp;#34; /&amp;gt;--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">intent-filter&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">receiver&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!--组件相关配置--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta-data&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;com.facebook.sdk.ApplicationId&amp;#34;&lt;/span> &lt;span class="na">android:value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;@string/facebook_app_id&amp;#34;&lt;/span>&lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta-data&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;com.facebook.sdk.ApplicationName&amp;#34;&lt;/span> &lt;span class="na">android:value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;@string/app_name&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">application&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">manifest&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>常用权限（&lt;a class="link" href="https://www.ecjson.com/android/" target="_blank" rel="noopener"
>查看权限大全&lt;/a>）&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!--网络--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.INTERNET&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.ACCESS_NETWORK_STATE&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.ACCESS_WIFI_STATE&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.CHANGE_WIFI_STATE&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.MODIFY_AUDIO_SETTINGS&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!--文件读写--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.READ_EXTERNAL_STORAGE&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.WRITE_EXTERNAL_STORAGE&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!--录音机--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.RECORD_AUDIO&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!--读取手机状态，获取IMEI --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.READ_PHONE_STATE&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.MANAGE_EXTERNAL_STORAGE&amp;#34;&lt;/span>&lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!--蓝牙--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.BLUETOOTH&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.BLUETOOTH_ADMIN&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!--相机，及硬件支持--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.CAMERA&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-feature&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.hardware.camera&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-feature&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.hardware.camera.autofocus&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!--接收彩信--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.RECEIVE_MMS&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!--访问GMail账户列表--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.GET_ACCOUNTS&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!--精确位置、粗略位置--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.ACCESS_FINE_LOCATION&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.ACCESS_COARSE_LOCATION&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!--以下不太常用--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!--读写日历--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.READ_CALENDAR&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.WRITE_CALENDAR&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!--读写通讯录--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.READ_CONTACTS&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.WRITE_CONTACTS&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!--读取电话号码，Android11及以上使用READ_PHONE_NUMBERS--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.READ_PHONE_STATE&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">android:maxSdkVersion&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;29&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.READ_PHONE_NUMBERS&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!--获取传感器（心率等）信息--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.BODY_SENSORS&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!--收发短信--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.RECEIVE_SMS&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.SEND_SMS&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!--悬浮窗、在其他应用上显示--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.SYSTEM_ALERT_WINDOW&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">uses-permission&lt;/span> &lt;span class="na">android:name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;android.permission.SYSTEM_OVERLAY_WINDOW&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>存储权限&lt;/strong>&lt;/p>
&lt;p>&lt;a class="link" href="https://juejin.cn/post/7306815404562137128?from=search-suggest#heading-6" target="_blank" rel="noopener"
>参考&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/flutter/11.png"
width="4790"
height="1559"
srcset="https://xiaoxiano.github.io/p/flutter/11_hu2dbc4b639928f45267efbc5a735e5ee6_617115_480x0_resize_box_3.png 480w, https://xiaoxiano.github.io/p/flutter/11_hu2dbc4b639928f45267efbc5a735e5ee6_617115_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="307"
data-flex-basis="737px"
>&lt;/p>
&lt;h4 id="xml视图">XML视图&lt;/h4>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/flutter/layout-editor.png"
width="3788"
height="2182"
srcset="https://xiaoxiano.github.io/p/flutter/layout-editor_hu7509936c93e21b6fdf351cf9effaac61_485398_480x0_resize_box_3.png 480w, https://xiaoxiano.github.io/p/flutter/layout-editor_hu7509936c93e21b6fdf351cf9effaac61_485398_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="416px"
>&lt;/p>
&lt;h3 id="常用-api">常用 API：&lt;/h3>
&lt;p>&lt;a class="link" href="https://api.flutter.dev/javadoc/io/flutter/embedding/engine/plugins/FlutterPlugin.FlutterPluginBinding.html" target="_blank" rel="noopener"
>FlutterPluginBinding&lt;/a>: 向所有 FlutterEngine 注册的插件提供可用的资源。&lt;/p>
&lt;p>&lt;a class="link" href="https://api.flutter.dev/javadoc/io/flutter/embedding/engine/plugins/activity/ActivityPluginBinding.html" target="_blank" rel="noopener"
>ActivityPluginBinding&lt;/a> : 绑定使ActivityAware插件可以访问关联的Activity和Activity的生命周期方法。&lt;/p>
&lt;p>&lt;a class="link" href="https://api.flutter.dev/javadoc/io/flutter/embedding/engine/plugins/activity/ActivityAware.html" target="_blank" rel="noopener"
>ActivityAware&lt;/a>: FlutterPlugin 把 Activity生命周期事件 关联到 FlutterEngine中运行的Activity&lt;/p>
&lt;p>&lt;a class="link" href="https://api.flutter-io.cn/javadoc/io/flutter/embedding/android/FlutterView.html" target="_blank" rel="noopener"
>FlutterView&lt;/a>: 在 Android 设备上显示 Flutter UI&lt;/p>
&lt;p>&lt;a class="link" href="https://developer.android.com/reference/android/app/NotificationManager" target="_blank" rel="noopener"
>NotificationManager&lt;/a>：用于通知用户发生的事件&lt;/p>
&lt;p>&lt;a class="link" href="https://developer.android.com/reference/android/content/res/Resources" target="_blank" rel="noopener"
>Resources&lt;/a>: 用于访问应用程序资源的类。&lt;/p>
&lt;h2 id="调试">调试&lt;/h2>
&lt;h3 id="vs-code-debug">VS Code debug&lt;/h3>
&lt;p>&lt;a class="link" href="https://www.bilibili.com/video/BV1Jf4y1S7Bw/?spm%5C_id%5C_from=333.788.videocard.0&amp;amp;vd_source=e3bb7819c2465f903aea3ffaa2d0773b" target="_blank" rel="noopener"
>参考&lt;/a>&lt;/p>
&lt;p>&lt;strong>运行前提&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>当前编程语言环境&lt;/li>
&lt;li>当前编程语言用于调试的扩展，例如Java Extension Pack&lt;/li>
&lt;li>配置文件launch.json&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>按钮介绍&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/flutter/toolbar.png"
width="216"
height="32"
srcset="https://xiaoxiano.github.io/p/flutter/toolbar_hu7580616d3674f764d0b734204110ef29_439_480x0_resize_box_3.png 480w, https://xiaoxiano.github.io/p/flutter/toolbar_hu7580616d3674f764d0b734204110ef29_439_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="675"
data-flex-basis="1620px"
>&lt;/p>
&lt;p>继续：跳到下一个断点&lt;/p>
&lt;p>单步跳过：跳过当前语句（调用其他文件夹的所有语句），运行下一行&lt;/p>
&lt;p>单步调试：进入当前函数内，运行下一行&lt;/p>
&lt;p>单步跳出：当debug陷入某个循环时，跳出循环并执行循环外的语句&lt;/p>
&lt;p>重启&lt;/p>
&lt;p>&lt;strong>配置文件&lt;/strong>&lt;/p>
&lt;p>launch.json是用于调试的配置文件，位于&lt;code>.vscode&lt;/code>文件夹，大多数情况下会自动创建，也可以在左侧边栏&lt;code>Run and Debug&lt;/code>点击&lt;code>create a launch.json file&lt;/code>
&lt;details class="spoiler " id="spoiler-23">
&lt;summary>launch.json注释（无需了解）&lt;/summary>
&lt;p>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"> &amp;#34;configurations&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 正在调试的项目名称（左侧边栏下拉菜单）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;name&amp;#34;: &amp;#34;flutter_project&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 指定调试模式
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // launch模式：支持断点调试
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // attach模式：支持对运行中的程序（多为远程服务器)断点调试，点击Add Configuration，选择Attach to Process
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;request&amp;#34;: &amp;#34;launch&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 编程语言
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;dart&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/details>&lt;/p>
&lt;p>&lt;strong>断点类型&lt;/strong>&lt;/p>
&lt;p>在代码行左侧断点出右键看到3种类型：&lt;/p>
&lt;ul>
&lt;li>Add Breakpoint：在断点处阻塞程序&lt;/li>
&lt;li>Add Conditional Breakpoint：在条件为true时断点生效&lt;/li>
&lt;li>Add Logpoint：程序运行中，以非阻塞的方式，记录调试日志&lt;/li>
&lt;li>Inline Breakpoint：当一行代码中有多个函数，光标定位在函数前，Run -&amp;gt; New Breakpoint -&amp;gt; Inline Breakpoint，断点在当前函数之前生效，点击单步调试可以进入当前函数&lt;/li>
&lt;/ul>
&lt;h3 id="布局调试">布局调试&lt;/h3>
&lt;p>&lt;a class="link" href="https://www.bilibili.com/video/BV1qN4y1M7nR/?spm_id_from=888.80997.embed_other.whitelist&amp;amp;t=48.359897&amp;amp;bvid=BV1qN4y1M7nR&amp;amp;vd_source=e3bb7819c2465f903aea3ffaa2d0773b" target="_blank" rel="noopener"
>参考&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/flutter/8.png"
width="1988"
height="1660"
srcset="https://xiaoxiano.github.io/p/flutter/8_hud8585a5925bc821c6f6926c73e3a70ba_436204_480x0_resize_box_3.png 480w, https://xiaoxiano.github.io/p/flutter/8_hud8585a5925bc821c6f6926c73e3a70ba_436204_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="119"
data-flex-basis="287px"
>&lt;/p>
&lt;h3 id="模拟器">模拟器&lt;/h3>
&lt;p>&lt;strong>开启hyper-v&lt;/strong>()&lt;/p>
&lt;p>Windows搜索 -&amp;gt; 启用与关闭Windows功能 -&amp;gt; hyper-v&lt;/p>
&lt;p>模拟器报错：找不到libandroid-emu-metrics.dll，重启hyper-v&lt;/p>
&lt;p>&lt;strong>vscode连接第三方模拟器&lt;/strong>&lt;/p>
&lt;p>项目目录下执行：&lt;code>adb connect 127.0.0.1:[port]&lt;/code>&lt;/p>
&lt;h2 id="ai画图">AI画图&lt;/h2>
&lt;p>Ai 设置：视图-&amp;gt;显示网格&lt;/p>
&lt;p>多边形变换：多边形工具-&amp;gt;自定义变换工具&lt;/p>
&lt;p>缩放：鼠标左键向右划放大、向左划缩小&lt;/p>
&lt;p>形状合成：选中区域-&amp;gt;形状生成器工具-&amp;gt;穿过需要的区域-&amp;gt;按住Alt穿过不要的区域&lt;/p>
&lt;p>渐变：双击圆圈弹出调色板&lt;/p>
&lt;h2 id="动画">动画&lt;/h2>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/flutter/donghua.png"
width="1396"
height="785"
srcset="https://xiaoxiano.github.io/p/flutter/donghua_hub3ab5e6cde8a9a4aeac5a591ce269148_435997_480x0_resize_box_3.png 480w, https://xiaoxiano.github.io/p/flutter/donghua_hub3ab5e6cde8a9a4aeac5a591ce269148_435997_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>lottie需要用到Ae，rive是在线编辑。&lt;/p>
&lt;h2 id="上架">上架&lt;/h2>
&lt;h3 id="包名">包名&lt;/h3>
&lt;ul>
&lt;li>Android 是在 &lt;code>android&lt;/code> ▸ &lt;code>app&lt;/code> ▸ &lt;code>src&lt;/code> ▸ &lt;code>main&lt;/code> ▸ &lt;code>AndroidManifest.xml&lt;/code>&lt;/li>
&lt;li>iOS 在 &lt;code>ios&lt;/code> ▸ &lt;code>Runner&lt;/code> ▸ &lt;code>Info.plist&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="应用名称">应用名称&lt;/h3>
&lt;ul>
&lt;li>Android 是在 &lt;code>android&lt;/code> ▸ &lt;code>app&lt;/code> ▸ &lt;code>src&lt;/code> ▸ &lt;code>main&lt;/code> ▸ &lt;code>AndroidManifest.xml&lt;/code> 中修改&lt;code>android:label=&amp;quot;XXX&amp;quot;&lt;/code>;&lt;/li>
&lt;li>iOS 在 &lt;code>ios&lt;/code> ▸ &lt;code>Runner&lt;/code> ▸ &lt;code>Info.plist&lt;/code> 中修改&lt;code>CFBundleName&lt;/code>对应的Value&lt;/li>
&lt;/ul>
&lt;h3 id="图标">图标&lt;/h3>
&lt;ul>
&lt;li>Android 在&lt;code>android&lt;/code> ▸ &lt;code>app&lt;/code> ▸ &lt;code>src&lt;/code> ▸ &lt;code>res&lt;/code> ▸ &lt;code>mipmap-...&lt;/code> 文件夹中替换相应图片&lt;/li>
&lt;li>iOS 在 &lt;code>ios&lt;/code> ▸ &lt;code>Runner&lt;/code> ▸ &lt;code>Assets.xcassets&lt;/code> ▸ &lt;code>AppIcon.appiconset&lt;/code>文件夹中替换相应尺寸的图片， 如果使用不同的文件名，那还必须更新同一目录中的&lt;code>Contents.json&lt;/code>文件。&lt;/li>
&lt;/ul>
&lt;h3 id="启动图片">启动图片&lt;/h3>
&lt;ul>
&lt;li>Android 在&lt;code>android&lt;/code> ▸ &lt;code>app&lt;/code> ▸ &lt;code>src&lt;/code> ▸ &lt;code>res&lt;/code> ▸ &lt;code>drawable&lt;/code> ▸ &lt;code>launch_background.xml&lt;/code> 通过自定义drawable来实现自定义启动界面。&lt;/li>
&lt;li>iOS 在 &lt;code>ios&lt;/code> ▸ &lt;code>Runner&lt;/code> ▸ &lt;code>Assets.xcassets&lt;/code> ▸ &lt;code>LaunchImage.imageset&lt;/code>文件夹中替换相应尺寸的图片， 如果使用不同的文件名，那还必须更新同一目录中的&lt;code>Contents.json&lt;/code>文件。&lt;/li>
&lt;/ul>
&lt;h3 id="签名安卓">签名（安卓）&lt;/h3>
&lt;ol>
&lt;li>创建&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>android studio方法&lt;/li>
&lt;/ul>
&lt;p>以管理员身份运行 android studio -&amp;gt; 打开项目下的Android文件夹 -&amp;gt; Build -&amp;gt; Generate Signed Bundle / APK -&amp;gt; 选择 APK 点击 Next -&amp;gt; Create new&lt;/p>
&lt;p>&lt;img src="https://xiaoxiano.github.io/p/flutter/keystore.png"
width="658"
height="669"
srcset="https://xiaoxiano.github.io/p/flutter/keystore_hu9e11625d68bcb57a0089d116b2122c43_27301_480x0_resize_box_3.png 480w, https://xiaoxiano.github.io/p/flutter/keystore_hu9e11625d68bcb57a0089d116b2122c43_27301_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="98"
data-flex-basis="236px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>命令行ketool方法（推荐）&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>ketool容易修改密钥，参考&lt;a class="link" href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/keytool.html#keytool_option_gencert" target="_blank" rel="noopener"
>Java8版官方文档&lt;/a>或&lt;a class="link" href="https://docs.oracle.com/en/java/javase/index.html" target="_blank" rel="noopener"
>更多版本&lt;/a>。&lt;/p>
&lt;p>&lt;strong>使用：&lt;/strong>&lt;/p>
&lt;p>项目下的Android/app文件夹打开cmd&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">// 创建keystore和密钥对
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">keytool -genkeypair -alias key -keyalg RSA -keysize 2048 -validity 10000 -keystore ./release.keystore.jks
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 列出可用的证书别名（指定路径）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">keytool -list -v -keystore ./release.keystore.jks
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 删除证书（指定别名、路径）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">keytool -delete -alias key -keystore ./release.keystore.jks
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;details class="spoiler " id="spoiler-24">
&lt;summary>详细参数&lt;/summary>
&lt;p>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">-genkeypair 生成密钥对（公钥和关联的私钥）。将该证书链和私钥存储在由alias标识的新密钥库条目中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-alias 别名，每个keystore都关联这一个独一无二的alias，这个alias通常不区分大小写
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-keystore 密钥库位置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-keyalg 指定密钥的算法 (默认值：DSA)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-keysize 指定密钥长度 （默认值取决于keyalg：RSA为2048，DSA为1024）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-validity 指定创建的证书有效期多少天(默认 90)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-storepass 指定密钥库的密码(获取keystore信息所需的密码)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-keypass 指定别名条目的密码(私钥的密码)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-dname 指定证书发行者信息 其中： “CN=名字与姓氏,OU=组织单位名称,O=组织名称,L=城市或区域名 称,ST=州或省份名称,C=单位的两字母国家代码”
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-list 显示密钥库中的证书信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-export 将别名指定的证书导出到文件 keytool -export -alias 需要导出的别名 -keystore 指定keystore -file 指定导出的证书位置及证书名称 -storepass 密码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-file 参数指定导出到文件的文件名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-delete 删除密钥库中某条目 keytool -delete -alias 指定需删除的别 -keystore 指定keystore – storepass 密码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-printcert 查看导出的证书信息 keytool -printcert -file g:\sso\michael.crt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-keypasswd 修改密钥库中指定条目口令 keytool -keypasswd -alias 需修改的别名 -keypass 旧密码 -new 新密码 -storepass keystore密码 -keystore sage
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-storepasswd 修改keystore口令 keytool -storepasswd -keystore g:\sso\michael.keystore(需修改口令的keystore) -storepass pwdold(原始密码) -new pwdnew(新密码)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-import 将已签名数字证书导入密钥库 keytool -import -alias 指定导入条目的别名 -keystore 指定keystore -file 需导入的证书
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">中创建一个默认文件”.keystore”,还会产生一个mykey的别名，mykey中包含用户的公钥、私钥和证书(在没有指定生成位置的情况下,keystore会存在用户系统默认目录)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/details>
&lt;ol start="2">
&lt;li>&lt;strong>配置&lt;/strong>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>为防止 build.gradle 协作时被修改、上线后反编译泄露，把密钥信息保存到 android/local.properties：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">storePassword=12345678
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">keyPassword=12345678
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">keyAlias=key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">storeFile=./release.keystore.jks
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>local.properties默认不会被添加到Git提交到远程仓库。&lt;/p>
&lt;ul>
&lt;li>在android/app/build.gradle添加：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">// 读取 local.properties
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def mystoreFile = file(localProperties.getProperty(&amp;#39;storeFile&amp;#39;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def mystorePassword = localProperties.getProperty(&amp;#39;storePassword&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def mykeyAlias = localProperties.getProperty(&amp;#39;keyAlias&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def mykeyPassword = localProperties.getProperty(&amp;#39;keyPassword&amp;#39;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"> // 签名配置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> signingConfigs {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> release {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> keyAlias mykeyAlias
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> keyPassword mykeyPassword
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> storeFile mystoreFile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> storePassword mystorePassword
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // // debug模式使用默认的 C:\Users&lt;span class="err">&amp;lt;&lt;/span>用户名&amp;gt;.Android\debug.keystore 进行签名，密码是 android
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // debug {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // keyAlias &amp;#39;androiddebugkey&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // keyPassword &amp;#39;android&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // storeFile file(&amp;#39;C:\\Users\\90487\\.android\\debug.keystore&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // storePassword &amp;#39;android&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> buildTypes {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> release {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // TODO: Add your own signing config for the release build.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Signing with the debug keys for now, so `flutter run --release` works.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> signingConfig signingConfigs.release
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // // 混淆
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // minifyEnabled false
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // // 混淆文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // proguardFiles getDefaultProguardFile(&amp;#39;proguard-android-optimize.txt&amp;#39;), &amp;#39;proguard-rules.pro&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // debug {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // signingConfig signingConfigs.debug
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // // // 包名后添加.debug，可以同时安装多个应用
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // // applicationIdSuffix &amp;#39;.debug&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>android studio验证配置：File -&amp;gt; Project Structure -&amp;gt; Modules -&amp;gt; Signing Configs&lt;/p>
&lt;p>参考：&lt;a class="link" href="https://developer.android.com/studio/publish/app-signing#generate-key" target="_blank" rel="noopener"
>官方文档&lt;/a> &lt;a class="link" href="https://juejin.cn/post/6844903942007029773#heading-5" target="_blank" rel="noopener"
>buildTypes&lt;/a>&lt;/p>
&lt;ol start="3">
&lt;li>&lt;strong>生成签名报告（可以获得md5）&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>点击右侧Gradle选项卡，android -&amp;gt; app -&amp;gt; Tasks -&amp;gt; android -&amp;gt; signingReport。&lt;/p>
&lt;p>如果 Gradle 面板目录中没有 signingReport 文件，进入设置项：File -&amp;gt; Settings -&amp;gt; Experimental -&amp;gt; 取消选中 Only include&amp;hellip;during Gradle Sync。然后同步一下：File -&amp;gt; Sync Project with Gradle Files。&lt;/p>
&lt;h3 id="编译">编译&lt;/h3>
&lt;ul>
&lt;li>apk&lt;/li>
&lt;/ul>
&lt;p>项目根目录下执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">flutter build apk --split-per-abi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>bundles（google 平台需要 bundle 文件格式）&lt;/li>
&lt;/ul>
&lt;p>项目根目录下执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">flutter build appbundle
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出 build/app/outputs/bundle/release/app-release.aab&lt;/p>
&lt;h2 id="其他-1">其他&lt;/h2>
&lt;p>double width = MediaQuery.of(context).size.width; 屏幕宽度&lt;/p>
&lt;p>double height = MediaQuery.of(context).size.height; 屏幕高度&lt;/p></description></item><item><title>freenom自动续期（废弃）</title><link>https://xiaoxiano.github.io/p/freenom/</link><pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate><guid>https://xiaoxiano.github.io/p/freenom/</guid><description>&lt;h1 id="本github-actions方法已于2022-07-15完全被封请去仓库看文档">本github actions方法已于2022-07-15完全被封，请去仓库看文档&lt;/h1>
&lt;h1 id="freenom自动续期">freenom自动续期&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>Fork &lt;a class="link" href="https://github.com/luolongfei/freenom" target="_blank" rel="noopener"
>luolongfei大佬的freenom库&lt;/a>，再添加以下workflow：
&lt;details class="spoiler " id="spoiler-0">
&lt;summary>“点击展开完整代码”&lt;/summary>
&lt;p>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># 1、Fork 本仓库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 2、在你 Fork 的本仓库下的 Settings &amp;gt; Secrets 画面追加以下几个 secret 变量：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># FREENOM_USERNAME、FREENOM_PASSWORD、MULTIPLE_ACCOUNTS、MAIL_USERNAME、MAIL_PASSWORD、TO、MAIL_ENABLE、TELEGRAM_CHAT_ID、
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># TELEGRAM_BOT_TOKEN、TELEGRAM_BOT_ENABLE、NOTICE_FREQ
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># （注：此处列出了所有可用变量，你只用追加你需要用到的变量，变量的具体含义请参考本项目的 .env 文件中的说明，一般情况下，.env 文件中的某些
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 项存在默认值，如果默认值满足你的需求则可不追加到 Secrets，它们会保持默认）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 下面定时任务中的时间是世界时间，每天 10:00（本示例已改为2:00） 执行，由于创建虚拟环境会消耗时间，故任务会延迟 30 秒左右执行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># @Author of yml configuration file: RouRouX &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">https:&lt;/span>&lt;span class="err">//&lt;/span>&lt;span class="na">github&lt;/span>&lt;span class="err">.&lt;/span>&lt;span class="na">com&lt;/span>&lt;span class="err">/&lt;/span>&lt;span class="na">RouRouX&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="err">&amp;amp;&lt;/span> mybsdc &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">mybsdc&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="na">gmail&lt;/span>&lt;span class="err">.&lt;/span>&lt;span class="na">com&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">###### end 说明 ######
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">name: Run it on action
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">on:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> branches:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> schedule:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - cron: 00 02 * * *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> workflow_dispatch:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">jobs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run-it:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> runs-on: ubuntu-18.04
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name: Run it on action
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> steps:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Checkout master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: actions/checkout@v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Setup PHP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: shivammathur/setup-php@v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> php-version: &amp;#39;7.2&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Setting
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run: |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo &amp;#39;Renew freenom domain name automatically.&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo &amp;#39;@Author of yml configuration file: RouRouX &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">https:&lt;/span>&lt;span class="err">//&lt;/span>&lt;span class="na">github&lt;/span>&lt;span class="err">.&lt;/span>&lt;span class="na">com&lt;/span>&lt;span class="err">/&lt;/span>&lt;span class="na">RouRouX&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="err">&amp;amp;&lt;/span> mybsdc &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">mybsdc&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="na">gmail&lt;/span>&lt;span class="err">.&lt;/span>&lt;span class="na">com&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo &amp;#39;@Url: https://github.com/luolongfei/freenom&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cp .env.example .env
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [[ (&amp;#39;${{ secrets.FREENOM_USERNAME }}&amp;#39; == &amp;#39;&amp;#39; || &amp;#39;${{ secrets.FREENOM_PASSWORD }}&amp;#39; == &amp;#39;&amp;#39;) &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> &amp;#39;${{ secrets.MULTIPLE_ACCOUNTS }}&amp;#39; == &amp;#39;&amp;#39; ]]; then echo &amp;#39;你在 Github 的当前项目的 Settings &amp;gt; Secrets 画面没有设置任何与账户信息相关的 secret 值，无法正常运行，请添加新的 secret 值，设置 FREENOM_USERNAME 与 FREENOM_PASSWORD，或者设置 MULTIPLE_ACCOUNTS，以及 .env 文件中其它必要项，各项的具体含义与格式参考本项目 .env 文件中的说明。&amp;#39;; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.FREENOM_USERNAME }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^FREENOM_USERNAME=.*$/FREENOM_USERNAME=&amp;#39;${{ secrets.FREENOM_USERNAME }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.FREENOM_PASSWORD }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^FREENOM_PASSWORD=.*$/FREENOM_PASSWORD=&amp;#39;${{ secrets.FREENOM_PASSWORD }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.MULTIPLE_ACCOUNTS }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^MULTIPLE_ACCOUNTS=.*$/MULTIPLE_ACCOUNTS=&amp;#39;${{ secrets.MULTIPLE_ACCOUNTS }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.MAIL_USERNAME }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^MAIL_USERNAME=.*$/MAIL_USERNAME=&amp;#39;${{ secrets.MAIL_USERNAME }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.MAIL_PASSWORD }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^MAIL_PASSWORD=.*$/MAIL_PASSWORD=&amp;#39;${{ secrets.MAIL_PASSWORD }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.TO }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^TO=.*$/TO=&amp;#39;${{ secrets.TO }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.MAIL_ENABLE }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^MAIL_ENABLE=.*$/MAIL_ENABLE=&amp;#39;${{ secrets.MAIL_ENABLE }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.TELEGRAM_CHAT_ID }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^TELEGRAM_CHAT_ID=.*$/TELEGRAM_CHAT_ID=&amp;#39;${{ secrets.TELEGRAM_CHAT_ID }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.TELEGRAM_BOT_TOKEN }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^TELEGRAM_BOT_TOKEN=.*$/TELEGRAM_BOT_TOKEN=&amp;#39;${{ secrets.TELEGRAM_BOT_TOKEN }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.TELEGRAM_BOT_ENABLE }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^TELEGRAM_BOT_ENABLE=.*$/TELEGRAM_BOT_ENABLE=&amp;#39;${{ secrets.TELEGRAM_BOT_ENABLE }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if [ &amp;#39;${{ secrets.NOTICE_FREQ }}&amp;#39; != &amp;#39;&amp;#39; ]; then sed -i &amp;#34;s/^NOTICE_FREQ=.*$/NOTICE_FREQ=&amp;#39;${{ secrets.NOTICE_FREQ }}&amp;#39;/&amp;#34; .env; fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sed -i &amp;#34;s/^ON_GITHUB_ACTIONS=.*$/ON_GITHUB_ACTIONS=true/&amp;#34; .env
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Run
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run: |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> php run
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 以下为保活所需step
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: curl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> id: enable_workflow
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> env:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> REST_TOKEN: ${{ secrets.REST_TOKEN }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> API_ADDRESS: ${{ secrets.API_ADDRESS }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run: |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo &amp;#34;Enable Workflow Start...&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> curl -X PUT -H &amp;#34;Authorization: token $REST_TOKEN&amp;#34; &amp;#34;$API_ADDRESS&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo &amp;#34;Finished&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/details>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在你 Fork 的本仓库下的 &lt;code>Settings&lt;/code> -&amp;gt; &lt;code>Secrets&lt;/code> 页面追加以下几个&lt;code>secret&lt;/code>秘密环境变量&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">变量名&lt;/th>
&lt;th style="text-align:center">含义&lt;/th>
&lt;th style="text-align:center">默认值&lt;/th>
&lt;th style="text-align:center">是否必须&lt;/th>
&lt;th style="text-align:center">备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">FREENOM_USERNAME&lt;/td>
&lt;td style="text-align:center">freenom 账户&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">只支持邮箱账户，不支持也不打算支持第三方社交账户登录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">FREENOM_PASSWORD&lt;/td>
&lt;td style="text-align:center">freenom 密码&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">某些特殊字符可能需要转义，在&lt;code>Github actions&lt;/code>环境，请在除字母数字以外的字符前加上“\”，否则可能无法正确读取密码，此举是防止某些字符在&lt;code>shell&lt;/code>命令行被解析，举个例子，比如我密码是&lt;code>fei.,:!~@#$%^&amp;amp;*?233-_abcd^$$&lt;/code>，那么写到秘密变量时就应写为&lt;code>fei\.\,\:\!\~\@\#\$\%\^\&amp;amp;\*\?233\-\_abcd\^\$\$&lt;/code>。而在普通&lt;code>VPS&lt;/code>环境，则只用在密码中的“#”或单双引号前加“\”，请参考&lt;code>.env.example&lt;/code>文件内的注释，应该没人会设置那么变态的密码吧&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">MULTIPLE_ACCOUNTS&lt;/td>
&lt;td style="text-align:center">多账户支持&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">多个账户和密码的格式必须是“&lt;code>&amp;lt;账户1&amp;gt;@&amp;lt;密码1&amp;gt;|&amp;lt;账户2&amp;gt;@&amp;lt;密码2&amp;gt;|&amp;lt;账户3&amp;gt;@&amp;lt;密码3&amp;gt;&lt;/code>”，如果设置了多账户，上面的&lt;code>FREENOM_USERNAME&lt;/code>和&lt;code>FREENOM_PASSWORD&lt;/code>可不设置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">MAIL_USERNAME&lt;/td>
&lt;td style="text-align:center">机器人邮箱账户&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">支持&lt;code>Gmail&lt;/code>、&lt;code>QQ邮箱&lt;/code>以及&lt;code>163邮箱&lt;/code>，尽可能使用&lt;code>163邮箱&lt;/code>或者&lt;code>QQ邮箱&lt;/code>，而非之前推荐的&lt;code>Gmail&lt;/code>。因为谷歌的安全机制，每次在新设备登录 &lt;code>Gmail&lt;/code> 都会先被限制，需要手动解除限制才行，而&lt;code>Github Actions&lt;/code>每次创建的虚拟环境都会分配一个新的设备&lt;code>IP&lt;/code>，相当于每次都是从新设备登录&lt;code>Gmail&lt;/code>，而我们不可能每次都去手动为&lt;code>Gmail&lt;/code>解除登录限制，所以这种机制会导致无法发出通知邮件。具体的配置方法参考「 &lt;a class="link" href="#--%e9%85%8d%e7%bd%ae%e5%8f%91%e4%bf%a1%e9%82%ae%e7%ae%b1" >配置发信邮箱&lt;/a> 」&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">MAIL_PASSWORD&lt;/td>
&lt;td style="text-align:center">机器人邮箱密码&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">&lt;code>Gmail&lt;/code>填密码，&lt;code>QQ邮箱&lt;/code>或&lt;code>163邮箱&lt;/code>填授权码&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">TO&lt;/td>
&lt;td style="text-align:center">接收通知的邮箱&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">你自己最常用的邮箱，推荐使用&lt;code>QQ邮箱&lt;/code>，用来接收机器人邮箱发出的域名相关邮件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">MAIL_ENABLE&lt;/td>
&lt;td style="text-align:center">是否启用邮件推送功能&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">&lt;code>true&lt;/code>：启用&lt;br>&lt;code>false&lt;/code>：不启用&lt;br>默认启用，如果设为&lt;code>false&lt;/code>，不启用邮件推送功能，则上面的&lt;code>MAIL_USERNAME&lt;/code>、&lt;code>MAIL_PASSWORD&lt;/code>、&lt;code>TO&lt;/code>变量变为非必须，可不设置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">TELEGRAM_CHAT_ID&lt;/td>
&lt;td style="text-align:center">你的&lt;code>chat_id&lt;/code>&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">通过发送&lt;code>/start&lt;/code>给&lt;code>@userinfobot&lt;/code>可以获取自己的&lt;code>id&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">TELEGRAM_BOT_TOKEN&lt;/td>
&lt;td style="text-align:center">你的&lt;code>Telegram bot&lt;/code>的&lt;code>token&lt;/code>&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">TELEGRAM_BOT_ENABLE&lt;/td>
&lt;td style="text-align:center">是否启用&lt;code>Telegram Bot&lt;/code>推送功能&lt;/td>
&lt;td style="text-align:center">false&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">&lt;code>true&lt;/code>：启用&lt;br>&lt;code>false&lt;/code>：不启用&lt;br>默认不启用，如果设为&lt;code>true&lt;/code>，则必须设置上面的&lt;code>TELEGRAM_CHAT_ID&lt;/code>和&lt;code>TELEGRAM_BOT_TOKEN&lt;/code>变量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">NOTICE_FREQ&lt;/td>
&lt;td style="text-align:center">通知频率&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">&lt;code>0&lt;/code>：仅当有续期操作的时候&lt;br>&lt;code>1&lt;/code>：每次执行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">REST_TOKEN&lt;/td>
&lt;td style="text-align:center">如后文所示&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">保活所需&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">API_ADDRESS&lt;/td>
&lt;td style="text-align:center">如后文所示&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">保活所需&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ol>
&lt;p>（注：你只用关注上面表格中的必须项，非必须项可不设置，将保持默认值。更多相关变量的含义、格式以及默认值，请参考本项目的&lt;code>.env.example&lt;/code>文件内的注释）&lt;/p>
&lt;ol start="3">
&lt;li>启用 Actions ，完成。&lt;/li>
&lt;/ol>
&lt;h1 id="保活">保活&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>Fork &lt;a class="link" href="https://github.com/zhzhzhy/Workflow-Keep-Alive" target="_blank" rel="noopener"
>zhzhzhy/Workflow-Keep-Alive库&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建 sercets ：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">变量名&lt;/th>
&lt;th style="text-align:center">值&lt;/th>
&lt;th style="text-align:center">备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">REST_TOKEN&lt;/td>
&lt;td style="text-align:center">个人访问令牌（Personal access tokens）&lt;/td>
&lt;td style="text-align:center">个人资料照片-&amp;gt;设置-&amp;gt;Developer settings&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">API_ADDRESS&lt;/td>
&lt;td style="text-align:center">&lt;code>https://api.github.com/repos/{owner}/{target-repo}/actions/workflows/enable_workflow/enable&lt;/code>&lt;/td>
&lt;td style="text-align:center">修改{owner}/{target-repo}&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>运行 github action。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>相互唤醒，再次在目标 repo 的工作流程中执行上述步骤，并添加所需 step（已在代码中注释）。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="附">附&lt;/h1>
&lt;p>&lt;a class="link" href="https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions" target="_blank" rel="noopener"
>github workflow 语法文档&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://crontab.guru/examples.html" target="_blank" rel="noopener"
>修改定时任务 —— Cron示例&lt;/a>&lt;/p></description></item><item><title>docker和docker-compose</title><link>https://xiaoxiano.github.io/p/docker-compose/</link><pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate><guid>https://xiaoxiano.github.io/p/docker-compose/</guid><description>&lt;h1 id="docker">docker&lt;/h1>
&lt;p>&lt;a class="link" href="https://docs.docker.com/engine/install/debian/" target="_blank" rel="noopener"
>安装docker&lt;/a>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">#更新apt包索引
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sudo apt-get update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#安装包以允许apt通过 HTTPS 使用存储库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sudo apt-get install \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ca-certificates \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> curl \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> gnupg \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> lsb-release
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#添加Docker官方的GPG密钥
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#设置稳定存储库
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $(lsb_release -cs) stable&amp;#34; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#安装最新版本的Docker Engine和containerd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sudo apt-get update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sudo apt-get install docker-ce docker-ce-cli containerd.io
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#hello-world 映像验证
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sudo docker run hello-world
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># 使用脚本安装
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> curl -fsSL https://get.docker.com -o get-docker.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sudo sh get-docker.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="dockerfile">Dockerfile&lt;/h2>
&lt;details class="spoiler " id="spoiler-0">
&lt;summary>“点击展开go语言示例”&lt;/summary>
&lt;p>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># 这个参考示例来自李文周大佬的bluebell项目
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">FROM golang:alpine AS builder
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 为我们的镜像设置必要的环境变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ENV GO111MODULE=on \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CGO_ENABLED=0 \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> GOOS=linux \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> GOARCH=amd64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 移动到工作目录：/build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WORKDIR /build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 复制项目中的 go.mod 和 go.sum文件并下载依赖信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY go.mod .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY go.sum .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN go mod download
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 将代码复制到容器中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY . .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 将我们的代码编译成二进制可执行文件 bluebell_app
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN go build -o bluebell_app .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">###################
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 接下来创建一个小镜像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">###################
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">FROM debian:stretch-slim
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY ./wait-for.sh /
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY ./templates /templates
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY ./static /static
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY ./conf /conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 从builder镜像中把/dist/app 拷贝到当前目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY --from=builder /build/bluebell_app /
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN set -eux; \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> apt-get update; \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> apt-get install -y \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --no-install-recommends \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> netcat; \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> chmod 755 wait-for.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 声明服务端口
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">EXPOSE 8084
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 需要运行的命令
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#ENTRYPOINT [&amp;#34;/bluebell_app&amp;#34;, &amp;#34;conf/config.yaml&amp;#34;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/details>
&lt;h2 id="基础知识参考">基础知识参考&lt;/h2>
&lt;p>以下简介节选自&lt;a class="link" href="https://docs.docker.com/get-started/" target="_blank" rel="noopener"
>docker文档&lt;/a>：&lt;/p>
&lt;ol>
&lt;li>**卷（volumes）**存储在由 Docker管理的主机文件系统（在 Linux 上的/var/lib/docker/volumes/ ）。卷完全由 Docker 管理，非 Docker 进程不应修改文件系统的这一部分。卷是在 Docker 中持久化数据的最佳方式。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># 将当前目录的相对路径挂载到/app目录中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> volumes:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - ./:/app
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="docker-compose">docker compose&lt;/h1>
&lt;p>&lt;a class="link" href="https://docs.docker.com/compose/install/compose-plugin/#install-the-plugin-manually" target="_blank" rel="noopener"
>安装docker compose&lt;/a>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">#单独下载和安装 Compose，不装Docker CLI
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#下载 Docker Compose 的当前稳定版本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -SL https://github.com/docker/compose/releases/download/v2.7.0/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#对二进制文件应用可执行权限
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo chmod +x /usr/local/bin/docker-compose
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#测试安装
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker compose version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># 脚本
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -fsSL https://get.docker.com -o get-docker.sh &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo sh get-docker.sh &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker -v &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -SL https://github.com/docker/compose/releases/download/v2.7.0/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo chmod +x /usr/local/bin/docker-compose &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker compose version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="docker-composeyaml">docker-compose.yaml&lt;/h2>
&lt;details class="spoiler " id="spoiler-1">
&lt;summary>“点击展开和折叠代码”&lt;/summary>
&lt;p>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">version: &amp;#39;3.7&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">services:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mysql5.7:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 镜像名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> image: &amp;#39;mysql:5.7&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 容器名(以后的控制都通过这个)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> container_name: mysql5.7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 重启策略
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> restart: always
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> environment:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 时区上海
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> TZ: Asia/Shanghai
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # root 密码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> MYSQL_ROOT_PASSWORD: root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 初始化数据库(后续的初始化sql会在这个库执行)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> MYSQL_DATABASE: nacos_config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 初始化用户(不能是root 会报错, 后续需要给新用户赋予权限)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> MYSQL_USER: nacos
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 用户密码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> MYSQL_PASSWORD: nacos
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 映射端口
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ports:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 3306:3306
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> volumes:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 数据挂载
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #- /root/mysql/data/:/var/lib/mysql/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 配置挂载
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #- /root/mysql/conf/:/etc/mysql/conf.d/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 初始化目录挂载，注意此处我只跑了这个挂载，只是为了说明其他配置不应该数据初始化
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - /root/mysql/init/:/docker-entrypoint-initdb.d/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> command:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 将mysql8.0默认密码策略 修改为 原先 策略 (mysql8.0对其默认策略做了更改 会导致密码无法匹配)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --default-authentication-plugin=mysql_native_password
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --character-set-server=utf8mb4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --collation-server=utf8mb4_general_ci
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --explicit_defaults_for_timestamp=true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --lower_case_table_names=1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> server:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> image: ghcr.io/USERNAME/server:master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> container_name: server
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ports:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 8082:8082
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> expose:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &amp;#34;8082&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> depends_on:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - mysql5.7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> restart: always
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> volumes:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &amp;#39;./data:/data/&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> web:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> image: ghcr.io/USERNAME/web:master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> container_name: web
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> depends_on:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - server
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> restart: always
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ports:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 3000:3000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> expose:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &amp;#34;3000&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> environment:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - VIRTUAL_HOST=example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - VIRTUAL_PORT=3000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - LETSENCRYPT_HOST=example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - LETSENCRYPT_EMAIL=mail@example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proxy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name: nginx-proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> external: true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/details>
&lt;details class="spoiler " id="spoiler-2">
&lt;summary>“点击展开nginx-proxy代码”&lt;/summary>
&lt;p>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">version: &amp;#39;3&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">services:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> nginx-proxy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> image: jwilder/nginx-proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> container_name: nginx-proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ports:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &amp;#34;80:80&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &amp;#34;443:443&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> volumes:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - conf:/etc/nginx/conf.d
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - vhost:/etc/nginx/vhost.d
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - html:/usr/share/nginx/html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - dhparam:/etc/nginx/dhparam
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - certs:/etc/nginx/certs:ro
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - /var/run/docker.sock:/tmp/docker.sock:ro
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> restart: always
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - nginxproxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> labels:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &amp;#34;com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> letsencrypt:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> image: jrcs/letsencrypt-nginx-proxy-companion
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> container_name: nginx-proxy-le
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> depends_on:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - nginx-proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> volumes:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - vhost:/etc/nginx/vhost.d
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - html:/usr/share/nginx/html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - dhparam:/etc/nginx/dhparam:ro
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - certs:/etc/nginx/certs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - acme:/etc/acme.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - /var/run/docker.sock:/var/run/docker.sock:ro
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ##################
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 由于LETSENCRYPT证书速率限制，可使用ZeroSSL
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 注释掉web服务environment中的：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - LETSENCRYPT_HOST=example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - LETSENCRYPT_EMAIL=mail@example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 需添加如下environment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> environment:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - ACME_CA_URI=https://acme.zerossl.com/v2/DV90
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - ZEROSSL_API_KEY=
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ##################
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> restart: always
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - nginxproxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">volumes:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> conf:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> vhost:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> html:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dhparam:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> certs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> acme:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> nginxproxy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name: nginx-proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> external: true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/details>
&lt;h2 id="基础知识参考-1">基础知识参考&lt;/h2>
&lt;p>以下简介节选自&lt;a class="link" href="https://docs.docker.com/compose/" target="_blank" rel="noopener"
>docker compose文档&lt;/a>：&lt;/p>
&lt;ol>
&lt;li>Compose 中的&lt;strong>网络&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;p>Compose默认为您的应用程序设置单个网络。服务中的每个容器都加入默认网络。例如，假设您的应用程序是在一个名为myapp的目录，运行docker-compose up时会创建一个名为myapp_default的网络，服务中使用web和db的配置创建的容器会以web和db的名字加入myapp_default。&lt;/p>
&lt;p>但是，当你使用&lt;a class="link" href="https://docs.docker.com/compose/compose-file/compose-file-v3/#external-1" target="_blank" rel="noopener"
>external&lt;/a>（外部网络，例如你有2个或多个docker-compose.yml）时，Compose不会创建默认网络，你必须使用&lt;code>docker network create Your_Nerwork&lt;/code>预先创建网络。&lt;/p>
&lt;p>注意：文档中示例写法错误，会&lt;a class="link" href="https://github.com/docker/compose-cli/issues/1856" target="_blank" rel="noopener"
>报错&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proxy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> external:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name: nginx-proxy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>应写为:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proxy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name: nginx-proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> external: true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="常用命令">常用命令&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">Docker命令
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker run [可选参数] imagename #新建并启动容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　--name = &amp;#34;name&amp;#34; 容器取名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　-it 交互模式进入容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　-d 后台启动容器 注意：一般后台启动要有前台的应用，否则很可能被守护程序杀掉
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　-p ip:主机端口:容器端口 #指定端口映射
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　-v或--volume /卷名称的路径:/容器中的挂载路径
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">查看：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker search xxx #搜索dockerhub-镜像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker images [-a][-q] #列出本地主机的-镜像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -a 显示所有信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -q 显示所有id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker ps [-a][-q] #显示当前正在运行的容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　-a 显示当前运行的容器，并显示历史运行过的容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　-q 只显示运行容器的编号
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker logs 容器id #日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker top 容器id #查看容器中进程信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker inspect 容器id #查看容器的详细信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">操作：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker build -t tag . #构建标签为tag的镜像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker pull 镜像：版本号 #拉取-镜像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker start 容器id #启动容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker restart 容器id #重启容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker stop 容器id #停止容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker kill 容器id #强制停止容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker rm 容器id #删除停止状态的容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker rm -f 容器id #强制删除容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker rmi -f xxx #删除单个-镜像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker rmi -f $(docker images -aq) #删除所有-镜像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker stop $(docker ps -a -q) #停止所有容器运行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker rm $(docker ps -a -q) #删除所有容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker network rm $(docker network ls -q) #删除所有network
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker system prune --all --force --volumes #删除一切
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">exit 容器停止并退出
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ctrl+p+q 容器不停止退出
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker exec -it mysql /bin/bash #进入正在执行的mysql容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker exec -it 容器名 /bin/sh #进入容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker exec -it 容器名 -c &amp;#34;apt-get update &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> apt-get install -y vim&amp;#34; #进入容器安装vim编辑器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker exec -it 容器名 -c &amp;#34; apk add --update vim&amp;#34; #进入alpine容器安装vim编辑器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker inspect -f &amp;#39;{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}&amp;#39; [container_name_or_id] #查看容器ip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">从容器拷贝内容到主机：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker cp 容器id: 路径 主机目的路径 #此处不必进入容器，容器可以是关闭的。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">Docker-compose命令
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose up -d # 在后台启动服务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose pull # 拉取
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> docker-compose -f docker-compose.yml up -d # 指定docker-compose.yml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> docker-compose -f docker-compose.yml pull # 指定docker-compose.yml，后同
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">查看：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose ps # 查看正在运行中的容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose ps -a # 查看所有编排容器，包括已停止的容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose images # 列出Compose文件构建的镜像
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose logs # 查看日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose logs [serviceName] # 查看某服务的日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose logs -f [serviceName] # 查看某服务的实时日志
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">操作：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose stop # 停止服务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose start # 启动已经存在的服务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose pause [serviceName] # 暂停服务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose unpause [serviceName] # 恢复服务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose restart [serviceName] # 重启服务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose rm # 删除所有（停止状态的）服务容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose down # 删除所有容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose down --remove-orphans # 删除orphans容器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose config -q # 验证（docker-compose.yml）文件配置，当配置正确时，不输出任何内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose exec --index=1 [serviceName] sh # 进入某服务的第1个容器执行命令
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-compose --help # 帮助
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="actions自动化部署前后端分离项目">actions自动化部署前后端分离项目&lt;/h1>
&lt;p>&lt;a class="link" href="https://dev.to/2nit/rails-cd-with-docker-github-actions-and-vps-4hi4" target="_blank" rel="noopener"
>参考文章&lt;/a>&lt;/p>
&lt;p>本文使用github actions + docker compose部署到github container registry（这适用于中小型项目） 附：&lt;a class="link" href="https://cloudonaut.io/amazon-ecr-vs-docker-hub-vs-github-container-registry/" target="_blank" rel="noopener"
>容器注册平台对比&lt;/a>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>准备好你的dockerfile&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用github actions
&lt;details class="spoiler " id="spoiler-3">
&lt;summary>“点击展开示例actions”&lt;/summary>
&lt;p>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">on:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> branches:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> workflow_dispatch:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">env:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> REGISTRY: ghcr.io
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> IMAGE_NAME: ${{ github.repository }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">jobs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> build-and-push-image:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> runs-on: ubuntu-latest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> permissions:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> contents: read
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> packages: write
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> strategy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> matrix:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> node: [ &amp;#39;14&amp;#39; ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> steps:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Checkout repository
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: actions/checkout@v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Setup node
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: actions/setup-node@v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> node-version: ${{ matrix.node }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: npm install
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> run: |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cd web #进入前端dockerfile目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> npm install
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Set up QEMU
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: docker/setup-qemu-action@v1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - uses: docker/setup-buildx-action@v1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> id: builder1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - uses: docker/setup-buildx-action@v1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> id: builder2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Log in to the Container registry
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: docker/login-action@v1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> registry: ${{ env.REGISTRY }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> username: ${{ github.actor }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> password: ${{ secrets.GITHUB_TOKEN }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # 用于消毒标签，tag是此动作的重要功能之一，本示例没使用，请见文档
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Extract metadata (tags, labels) for Docker
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> id: meta1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: docker/metadata-action@v3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> images: ghcr.io/username/server # images地址
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Extract metadata (tags, labels) for Docker
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> id: meta2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: docker/metadata-action@v3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> images: ghcr.io/username/web # images地址
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Build and push Docker image 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: docker/build-push-action@v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> builder: ${{ steps.builder1.outputs.name }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> context: ./server # 服务端dockerfile目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> file: ./server/Dockerfile # 服务端dockerfile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push: true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> tags: ${{ steps.meta1.outputs.tags }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> labels: ${{ steps.meta1.outputs.labels }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cache-from: type=gha
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cache-to: type=gha,mode=max
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: Build and push Docker image 2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uses: docker/build-push-action@v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> builder: ${{ steps.builder2.outputs.name }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> context: ./web # 前端dockerfile目录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> file: ./web/Dockerfile # 前端dockerfile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> push: true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> tags: ${{ steps.meta2.outputs.tags }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> labels: ${{ steps.meta2.outputs.labels }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cache-from: type=gha
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cache-to: type=gha,mode=max
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> deploy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> runs-on: ubuntu-latest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> needs: build-and-push-image
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> steps:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - uses: appleboy/ssh-action@master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> host: ${{ secrets.host }} #仓库设置中添加Secrets：HOST
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> username: root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> password: ${{ secrets.PASSWORD }} #仓库设置中添加Secrets：PASSWORD
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> port: 22
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> script: |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> echo $CR_PAT | docker login ghcr.io -u USERNAME --password-stdin # 用户名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> docker-compose -f docker-compose-nginx.yaml -f docker-compose-app.yaml pull # docker-compose名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> docker-compose -f docker-compose-nginx.yaml -f docker-compose-app.yaml up -d # docker-compose名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 此actions许多参数由github自动提供，无需添加，需修改的均已注释
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/details>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在服务器上完成&lt;a class="link" href="https://docs.github.com/cn/packages/working-with-a-github-packages-registry/working-with-the-container-registry#" target="_blank" rel="noopener"
>向 Container registry 验证&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>具体操作：打开/etc/profile&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">export CR_PAT=YOUR_TOKEN
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">source /etc/profile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo $CR_PAT | docker login ghcr.io -u USERNAME --password-stdin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>新建docker-compose-app.yaml和代理容器docker-compose-nginx.yaml,&lt;a class="link" href="https://github.com/buchdag/letsencrypt-nginx-proxy-companion-compose" target="_blank" rel="noopener"
>示例文档&lt;/a>。如有不懂，请多看几遍&lt;a class="link" href="https://github.com/nginx-proxy/acme-companion/tree/main/docs" target="_blank" rel="noopener"
>acme-companion&lt;/a>和示例文档。最后，&lt;a class="link" href="https://github.com/nginx-proxy/nginx-proxy/discussions/1755" target="_blank" rel="noopener"
>Issues中的实例&lt;/a>可能会有帮助。&lt;/li>
&lt;/ol></description></item><item><title>常用命令</title><link>https://xiaoxiano.github.io/p/command/</link><pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate><guid>https://xiaoxiano.github.io/p/command/</guid><description>&lt;h1 id="git">git&lt;/h1>
&lt;h2 id="git命令">git命令&lt;/h2>
&lt;p>&lt;a class="link" href="https://training.github.com/downloads/zh_CN/github-git-cheat-sheet/" target="_blank" rel="noopener"
>官网git备忘表&lt;/a>&lt;/p>
&lt;p>&lt;strong>submodule&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">git submodule add [git@github.com:xxx/submodule.git] [directory] # 添加子模块
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">git clone [git@github.com:xxx/submodule.git] [directory] --recurse-submodules # 克隆一个存储库,并自动更新仓库中所有子模块（更新可能不兼容，慎用）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">git submodule update # 更新
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>问题&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>更新被拒绝，因为远程仓库包含您本地尚不存在的提交。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">git push -u origin +master # 强制push
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>gitmodules错误&lt;/li>
&lt;/ol>
&lt;p>删掉.git和.gitmodules重新初始化更容易。&lt;/p>
&lt;h2 id="push脚本">push脚本&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">#!/bin/bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -e &amp;#34;\033[0;32mDeploying updates to GitHub...\033[0m&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Add changes to git.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git add .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Commit changes.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">msg=&amp;#34;rebuilding site `date`&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">if [ $# -eq 1 ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> then msg=&amp;#34;$1&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit -m &amp;#34;$msg&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Push source and build repos.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push origin master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="公开仓库fork为私有仓库">公开仓库fork为私有仓库&lt;/h2>
&lt;ol>
&lt;li>fork一个公开仓库&lt;/li>
&lt;li>使用github&lt;a class="link" href="https://github.com/new/import" target="_blank" rel="noopener"
>导入功能&lt;/a>，写fork仓库的地址，并创建私有仓库&lt;/li>
&lt;li>本地操作&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">git clone git@github.com:&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">your_username&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>/&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">your_repo&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>.git # 克隆到本地
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote add upstream git@github.com:&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">original_owner&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>/&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">original_repo&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>.git # 添加上游(源)仓库用于更新
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote set-url --push upstream DISABLE # 禁用推送到上游(源)仓库
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果上游(源)仓库有更新&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">git fetch upstream # 获取主分支的最新修改到本地
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git merge upstream/master # 将upstream分支修改内容合并到本地master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>&lt;code>git remote -v&lt;/code>可以看到：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">origin git@github.com:&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">your_username&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>/&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">your_repo&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>.git (fetch)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">origin git@github.com:&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">your_username&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>/&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">your_repo&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>.git (push)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">upstream git@github.com:&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">original_owner&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>/&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">original_repo&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>.git (fetch)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">upstream DISABLE (push)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>拉取更新&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">git fetch upstream
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git merge upstream/master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="linux">Linux&lt;/h1>
&lt;h2 id="文件">文件&lt;/h2>
&lt;p>i 键可以对文件进行修改， &lt;code>Esc + :+ wq&lt;/code> 退出并保存修改之后的文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">sudo gedit ~/File //编辑
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">touch File //新建文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir -p Folder/a/src //新建文件夹
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo rm -r Folder //删除文件夹
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装包">安装包&lt;/h2>
&lt;ul>
&lt;li>apt&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">sudo apt update &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> apt upgrade //更新
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dpkg --list //显示所有软件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install 包名 //安装
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get remove 包名 //卸载不删除配置文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get --purge remove 包名 //软件及其配置文件一并删除
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>snap&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">sudo snap list //列出已经安装的snap包
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo snap install &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">snap&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> //安装一个snap包
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo snap refresh &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">snap&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> //更新一个snap包，如果后面不加包的名字更新所有的snap包
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo snap remove &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">snap&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> //删除一个snap包
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="端口">端口&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">sudo apt-get install lsof //安装lsof
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lsof -i:80 //查看80端口
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kill -9 pid //强制杀进程
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="命令">命令&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">local #用于声明局部变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">source
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">systemctl stop service # 停止一个服务
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">systemctl daemon-reload # 重载所有修改过的配置文件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">systemctl enable #将服务设置为每次开机启动
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">set -eux #用于脚本开头设置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#-e 　若指令传回值不等于0，则立即退出shell。0表示没有错误
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#-u 　当执行时使用到未定义过的变量，则显示错误信息。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#-x 　执行指令后，会先显示该指令及所下的参数。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="grep-sedawk">grep 、sed、awk&lt;/h3>
&lt;p>&lt;strong>grep 、sed、awk被称为linux中的&amp;quot;三剑客&amp;quot;。&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>grep 更适合单纯的查找或匹配文本&lt;/li>
&lt;li>sed 更适合编辑匹配到的文本&lt;/li>
&lt;li>awk 更适合格式化文本，对文本进行较复杂格式处理&lt;/li>
&lt;/ul>
&lt;hr>
&lt;link href="https://fonts.googleapis.com/css?family=font-family" rel="stylesheet" type="text/css">
&lt;div style="font-family:'font-family'; font-size:25px; font-style:normal; font-weight:bold; color: blue">
sed
&lt;/div>
&lt;p>&lt;code>sed&lt;/code>是&lt;code>stream editor&lt;/code>的简称，也就是流编辑器。它一次处理一行内容，处理时，把当前处理的行存储在临时缓冲区中，称为&lt;code>&amp;quot;pattern space&amp;quot;&lt;/code>，接着用&lt;code>sed&lt;/code>命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。&lt;/p>
&lt;ul>
&lt;li>语法&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">sed [option] &amp;#39;command&amp;#39; fileName
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>选项&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>-n&lt;/code> 使用安静&lt;code>silent&lt;/code>模式。在一般&lt;code>sed&lt;/code>的用法中，所有来自&lt;code>stdin&lt;/code>的内容一般都会被列出到屏幕上。但如果加上&lt;code>-n&lt;/code>参数后，则只有经过&lt;code>sed&lt;/code>特殊处理的那一行(或者动作)才会被列出来&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-e&lt;/code> 直接在指令列模式上进行 &lt;code>sed&lt;/code> 的动作编辑&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-f&lt;/code> 直接将 &lt;code>sed&lt;/code> 的动作写在一个文件内，&lt;code>-f filename&lt;/code>则可以执行&lt;code>filename&lt;/code>内的&lt;code>sed&lt;/code>命令&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-r&lt;/code> 让&lt;code>sed&lt;/code>命令支持扩展的正则表达式(默认是基础正则表达式)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-i&lt;/code> 直接修改读取的文件内容，而不是由屏幕输出&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>命令&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>a\&lt;/code>：追加行，&lt;code>a\&lt;/code>的后面跟上字符串&lt;code>s&lt;/code>(多行字符串可以用&lt;code>\n&lt;/code>分隔)，则会在当前选择的行的后面都加上字符串&lt;code>s&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>c\&lt;/code>：替换行，&lt;code>c\&lt;/code>后面跟上字符串&lt;code>s&lt;/code>(多行字符串可以用&lt;code>\n&lt;/code>分隔)，则会将当前选中的行替换成字符串&lt;code>s&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>i\&lt;/code>：插入行，&lt;code>i\&lt;/code>后面跟上字符串&lt;code>s&lt;/code>(多行字符串可以用&lt;code>\n&lt;/code>分隔)，则会在当前选中的行的前面都插入字符串&lt;code>s&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>d&lt;/code>：删除行&lt;code>delete&lt;/code>，该命令会将当前选中的行删除&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>p&lt;/code>：打印&lt;code>print&lt;/code>，该命令会打印当前选择的行到屏幕上&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>y&lt;/code>：替换字符，通常&lt;code>y&lt;/code>命令的用法是这样的：&lt;code>y/Source-chars/Dest-chars/&lt;/code>，分割字符&lt;code>/&lt;/code>可以用任意单字符代替，用&lt;code>Dest-chars&lt;/code>中对应位置的字符替换掉&lt;code>Soutce-chars&lt;/code>中对应位置的字符&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>s&lt;/code>：替换字符串，通常&lt;code>s&lt;/code>命令的用法是这样的：&lt;code>1,$s/Regexp/Replacement/Flags&lt;/code>，分隔字符&lt;code>/&lt;/code>可以用其他任意单字符代替，用&lt;code>Replacement&lt;/code>替换掉匹配字符串&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>替换选项&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>\digit&lt;/code>：&lt;code>Replacement&lt;/code>中可含有后向引用中的&lt;code>\digit&lt;/code>(&lt;code>digit&lt;/code>是&lt;code>1&lt;/code>至&lt;code>9&lt;/code>)，引用前面定义的子表达&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>&amp;amp;&lt;/code>：代表模版空间中的整个匹配部分&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>\L&lt;/code>：将在其后的替换部分转换成小写字母，直到发现一个&lt;code>\U&lt;/code>或&lt;code>\E&lt;/code>，&lt;code>GNU&lt;/code>扩展功能&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>\l&lt;/code>：将下一个字符转换成小写字母，&lt;code>GNU&lt;/code>扩展功能&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>\U&lt;/code>：将在其后的替换部分转换成大写字母，直到发现一个&lt;code>\L&lt;/code>或&lt;code>\E&lt;/code>，&lt;code>GNU&lt;/code>扩展功能&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>\u&lt;/code>：将下一个字符转换成大写字母，&lt;code>GNU&lt;/code>扩展功能&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>\E&lt;/code>：停止由&lt;code>\L&lt;/code>或&lt;code>\U&lt;/code>指示开始的大小写转换，&lt;code>GNU&lt;/code>扩展功能&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>标志选项&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>g&lt;/code>：将用&lt;code>Replacement&lt;/code>替换模版空间中所有匹配&lt;code>Regexp&lt;/code>的部分，则不仅仅是第一个匹配部分&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>digit&lt;/code>：只用&lt;code>Replacement&lt;/code>替换模版空间中第&lt;code>digit&lt;/code>(&lt;code>digit&lt;/code>是&lt;code>1&lt;/code>至&lt;code>9&lt;/code>)个匹配&lt;code>Regexp&lt;/code>的部分&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>p&lt;/code>：若发生了替换操作，指示显示模版空间中新的数据&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>w file-name&lt;/code>：若发生了替换操作，指示将模版空间中新的数据写入指定的文件&lt;code>file-name&lt;/code>中&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>i&lt;/code>：表示进行&lt;code>Regexp&lt;/code>匹配时，是不区分大小写字母的&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;link href="https://fonts.googleapis.com/css?family=font-family" rel="stylesheet" type="text/css">
&lt;div style="font-family:'font-family'; font-size:18px; font-style:normal; font-weight:bold; color: green">
示例
&lt;/div>
&lt;ul>
&lt;li>&lt;code>a&lt;/code>命令&lt;/li>
&lt;/ul>
&lt;p>&lt;code>sed '1,$a\add one' test.txt&lt;/code> 从第一行到最后一行所有行后追加&lt;code>&amp;quot;add one&amp;quot;&lt;/code>字符串行&lt;/p>
&lt;p>&lt;code>sed '/first/a\add one' test.txt&lt;/code> 在匹配到&lt;code>first&lt;/code>行追加&lt;code>&amp;quot;add one&amp;quot;&lt;/code>字符串行&lt;/p>
&lt;ul>
&lt;li>&lt;code>i&lt;/code>命令&lt;/li>
&lt;/ul>
&lt;p>与&lt;code>a&lt;/code>命令类似，只不过在匹配的行前面插入字符串行，不举例了。&lt;/p>
&lt;ul>
&lt;li>&lt;code>c&lt;/code>命令&lt;/li>
&lt;/ul>
&lt;p>&lt;code>sed '1,$c\add one' test.txt&lt;/code> 从第一行到最后一行所有行替换为&lt;code>&amp;quot;add one&amp;quot;&lt;/code>字符串行&lt;/p>
&lt;p>&lt;code>sed '/first/c\add one' test.txt&lt;/code> 将匹配到&lt;code>first&lt;/code>行替换为&lt;code>&amp;quot;add one&amp;quot;&lt;/code>字符串行&lt;/p>
&lt;ul>
&lt;li>&lt;code>d&lt;/code>命令&lt;/li>
&lt;/ul>
&lt;p>&lt;code>sed '4,$d' test.txt&lt;/code> 从第四行到最后一行全部删除&lt;/p>
&lt;ul>
&lt;li>&lt;code>p&lt;/code>命令&lt;/li>
&lt;/ul>
&lt;p>&lt;code>sed -n '/^first.*end$/p' test.txt&lt;/code> 以&lt;code>first&lt;/code>开头&lt;code>end&lt;/code>结尾的所有行全部打印&lt;/p>
&lt;ul>
&lt;li>&lt;code>s&lt;/code>命令&lt;/li>
&lt;/ul>
&lt;p>&lt;code>sed 's/line/text/g' test.txt&lt;/code> 将所有行的&lt;code>line&lt;/code>替换为&lt;code>text&lt;/code>，&lt;code>g&lt;/code>代表全局选项，没有&lt;code>g&lt;/code>只替换所有行的第一个匹配项&lt;/p>
&lt;p>&lt;code>sed '/^first.*end$/s/line/text/g' test.txt&lt;/code> 匹配以&lt;code>first&lt;/code>开头&lt;code>end&lt;/code>结尾的所有行，然后将&lt;code>line&lt;/code>全部替换为&lt;code>text&lt;/code>&lt;/p>
&lt;p>&lt;code>sed 's/\(.*\)line$/\1/g' test.txt&lt;/code> 本例中的&lt;code>\(\)&lt;/code>中包裹的内容表示正则表达式的第&lt;code>n&lt;/code>部分，&lt;code>.*&lt;/code>表示任意字符串，所以此例相当于删除所有行末的&lt;code>line&lt;/code>&lt;/p>
&lt;h1 id="脚本语言备忘录">脚本语言备忘录&lt;/h1>
&lt;h2 id="shell">shell&lt;/h2>
&lt;p>&lt;a class="link" href="http://www.imooc.com/wiki/shelllesson/shellvariable.html" target="_blank" rel="noopener"
>原文地址&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">name=&amp;#34;MyName&amp;#34; //定义变量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo $name 或 echo ${name} //使用变量
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">val=`expr 2 + 2` #expr 是一款表达式计算工具，使用它能完成表达式的求值操作。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo &amp;#34;Total value : $val&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">2&amp;gt;&lt;span class="err">&amp;amp;&lt;/span>1 把&amp;#34;标准错误输出&amp;#34;重定向到&amp;#34;标准输出&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>特殊变量&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>$0&lt;/td>
&lt;td>当前脚本的文件名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$n&lt;/td>
&lt;td>传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$#&lt;/td>
&lt;td>传递给脚本或函数的参数个数总和&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$*&lt;/td>
&lt;td>传递给脚本或函数的所有参数，当被双引号 &amp;quot; &amp;quot; 包含时，所有的位置参数被看做一个字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$@&lt;/td>
&lt;td>传递给脚本或函数的所有参数，当被双引号 &amp;quot; &amp;quot; 包含时，每个位置参数被看做独立的字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$?&lt;/td>
&lt;td>上个命令的退出状态，或函数的返回值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$$&lt;/td>
&lt;td>当前 Shell 进程 ID。对于 Shell 脚本，就是这些脚本所在的进程 ID。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>测试符&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>-eq，equal&lt;/td>
&lt;td>等于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-ne，not equal&lt;/td>
&lt;td>不等于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-gt，greater than&lt;/td>
&lt;td>大于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-lt，lesser than&lt;/td>
&lt;td>小于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-ge，greater or equal&lt;/td>
&lt;td>大于或等于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-le，lesser or equal&lt;/td>
&lt;td>小于或等于&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-z&lt;/td>
&lt;td>检测字符串长度是否为 0，为 0 返回 true。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-e&lt;/td>
&lt;td>file 检测文件（包括目录）是否存在，如果是，则返回 true。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-f&lt;/td>
&lt;td>file 检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>待续&lt;/p>
&lt;h2 id="python">python&lt;/h2>
&lt;h3 id="os">os&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>函数名&lt;/strong>&lt;/th>
&lt;th>&lt;strong>使用方法&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>getcwd()&lt;/td>
&lt;td>返回当前工作目录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>chdir(path)&lt;/td>
&lt;td>改变工作目录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>listdir(path=&amp;rsquo;.')&lt;/td>
&lt;td>列举指定目录中的文件名（&amp;rsquo;.&amp;lsquo;表示当前目录，&amp;rsquo;..&amp;lsquo;表示上一级目录）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mkdir(path)&lt;/td>
&lt;td>创建单层目录，如该目录已存在抛出异常&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>makedirs(path)&lt;/td>
&lt;td>递归创建多层目录，如该目录已存在抛出异常，注意：&amp;lsquo;E:\a\b&amp;rsquo;和&amp;rsquo;E:\a\c&amp;rsquo;并不会冲突&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>remove(path)&lt;/td>
&lt;td>删除文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>rmdir(path)&lt;/td>
&lt;td>删除单层目录，如该目录非空则抛出异常&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>removedirs(path)&lt;/td>
&lt;td>递归删除目录，从子目录到父目录逐层尝试删除，遇到目录非空则抛出异常&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>rename(old, new)&lt;/td>
&lt;td>将文件old重命名为new&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>system(command)&lt;/td>
&lt;td>运行系统的shell命令&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>walk(top)&lt;/td>
&lt;td>遍历top路径以下所有的子目录，返回一个三元组：(路径, [包含目录], [包含文件])【具体实现方案请看：第30讲课后作业^_^】&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;em>以下是支持路径操作中常用到的一些定义，支持所有平台&lt;/em>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>os.curdir&lt;/td>
&lt;td>指代当前目录（&amp;rsquo;.&amp;rsquo;）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>os.pardir&lt;/td>
&lt;td>指代上一级目录（&amp;rsquo;..&amp;rsquo;）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>os.sep&lt;/td>
&lt;td>输出操作系统特定的路径分隔符（Win下为&amp;rsquo;\&amp;rsquo;，Linux下为&amp;rsquo;/&amp;rsquo;）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>os.linesep&lt;/td>
&lt;td>当前平台使用的行终止符（Win下为&amp;rsquo;\r\n&amp;rsquo;，Linux下为&amp;rsquo;\n&amp;rsquo;）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>os.name&lt;/td>
&lt;td>指代当前使用的操作系统（包括：&amp;lsquo;posix&amp;rsquo;, &amp;rsquo;nt&amp;rsquo;, &amp;lsquo;mac&amp;rsquo;, &amp;lsquo;os2&amp;rsquo;, &amp;lsquo;ce&amp;rsquo;, &amp;lsquo;java&amp;rsquo;）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="ospath">os.path&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>函数名&lt;/strong>&lt;/th>
&lt;th>&lt;strong>使用方法&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>basename(path)&lt;/td>
&lt;td>去掉目录路径，单独返回文件名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dirname(path)&lt;/td>
&lt;td>去掉文件名，单独返回目录路径&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>join(path1[, path2[, &amp;hellip;]])&lt;/td>
&lt;td>将path1, path2各部分组合成一个路径名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>split(path)&lt;/td>
&lt;td>分割文件名与路径，返回(f_path, f_name)元组。如果完全使用目录，它也会将最后一个目录作为文件名分离，且不会判断文件或者目录是否存在&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>splitext(path)&lt;/td>
&lt;td>分离文件名与扩展名，返回(f_name, f_extension)元组&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>getsize(file)&lt;/td>
&lt;td>返回指定文件的尺寸，单位是字节&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>getatime(file)&lt;/td>
&lt;td>返回指定文件最近的访问时间（浮点型秒数，可用time模块的gmtime()或localtime()函数换算）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>getctime(file)&lt;/td>
&lt;td>返回指定文件的创建时间（浮点型秒数，可用time模块的gmtime()或localtime()函数换算）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>getmtime(file)&lt;/td>
&lt;td>返回指定文件最新的修改时间（浮点型秒数，可用time模块的gmtime()或localtime()函数换算）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;em>以下为函数返回 True 或 False&lt;/em>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>exists(path)&lt;/td>
&lt;td>判断指定路径（目录或文件）是否存在&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>isabs(path)&lt;/td>
&lt;td>判断指定路径是否为绝对路径&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>isdir(path)&lt;/td>
&lt;td>判断指定路径是否存在且是一个目录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>isfile(path)&lt;/td>
&lt;td>判断指定路径是否存在且是一个文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>islink(path)&lt;/td>
&lt;td>判断指定路径是否存在且是一个符号链接&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ismount(path)&lt;/td>
&lt;td>判断指定路径是否存在且是一个挂载点&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>samefile(path1, paht2)&lt;/td>
&lt;td>判断path1和path2两个路径是否指向同一个文件&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="beautifulsoup">BeautifulSoup&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">from bs4 import BeautifulSoup
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">html_doc = &amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>The Dormouse&amp;#39;s story&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;title&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">b&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>The Dormouse&amp;#39;s story&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">b&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;story&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Once upon a time there were three little sisters; and their names were
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;http://example.com/elsie&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sister&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;link1&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Elsie&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;http://example.com/lacie&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sister&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;link2&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Lacie&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> and
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;http://example.com/tillie&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sister&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;link3&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Tillie&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">and they lived at the bottom of a well.&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;story&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>...&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 解析html_doc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">soup = BeautifulSoup(html_doc, &amp;#39;html.parser&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 按照标准的缩进格式的结构输出
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">print(soup.prettify())
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># 选择元素
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">soup.title # &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>The Dormouse&amp;#39;s story&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 提取节点信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">soup.title.name # u&amp;#39;title&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 获取属性
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">soup.p.attrs # {&amp;#39;class&amp;#39;: [&amp;#39;title&amp;#39;], &amp;#39;name&amp;#39;: &amp;#39;Dormouse&amp;#39;}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">soup.p.attrs[&amp;#39;name&amp;#39;] # Dormouse
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 获取文本内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">soup.title.get_text()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">soup.title.string # u&amp;#39;The Dormouse&amp;#39;s story&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 获取第一个P标签下的所有的子节点，children是迭代器，所以用list转换
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">list(soup.p.children)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">list(soup.p.children)[0].text
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 获取前面和后面的兄弟节点，迭代器类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">list(soup.a.next_siblings)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">list(soup.a.previous_siblings)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 找到标签
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">soup.find(&amp;#39;title&amp;#39;) # &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>The Dormouse&amp;#39;s story&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 找到所有&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>标签的链接
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">for link in soup.find_all(&amp;#39;a&amp;#39;):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(link.get(&amp;#39;href&amp;#39;))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># CSS选择器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">html_doc = &amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;panel&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;panel-heading&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h4&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Hello World&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h4&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;panel-body&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ul&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;list&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;list-1&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;element&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Foo&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;element&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Bar&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;element&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Jay&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ul&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;list list-samll&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;list-2&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;element&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Foo&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;element&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Bar&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;element&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Jay&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">print(soup.select(&amp;#39;.panel-heading&amp;#39;)) # 获取class为panel-heading的节点
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">print(soup.select(&amp;#39;ul li&amp;#39;)) # 获取ul下的li节点
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">print(soup.select(&amp;#39;#list-2 li&amp;#39;)) # 获取id为list-2下的li节点
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">print(soup.select(&amp;#39;ul&amp;#39;)) # 获取所有的ul节点
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="正则表达式">正则表达式&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">字符&lt;/th>
&lt;th style="text-align:center">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">\&lt;/td>
&lt;td style="text-align:center">将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“&lt;code>n&lt;/code>”匹配字符“&lt;code>n&lt;/code>”。“&lt;code>\n&lt;/code>”匹配一个换行符。串行“&lt;code>\\&lt;/code>”匹配“&lt;code>\&lt;/code>”而“&lt;code>\(&lt;/code>”则匹配“&lt;code>(&lt;/code>”。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">^&lt;/td>
&lt;td style="text-align:center">匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“&lt;code>\n&lt;/code>”或“&lt;code>\r&lt;/code>”之后的位置。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">$&lt;/td>
&lt;td style="text-align:center">匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“&lt;code>\n&lt;/code>”或“&lt;code>\r&lt;/code>”之前的位置。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">*&lt;/td>
&lt;td style="text-align:center">匹配前面的子表达式零次或多次。例如，zo*能匹配“&lt;code>z&lt;/code>”以及“&lt;code>zoo&lt;/code>”。*等价于{0,}。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">+&lt;/td>
&lt;td style="text-align:center">匹配前面的子表达式一次或多次。例如，“&lt;code>zo+&lt;/code>”能匹配“&lt;code>zo&lt;/code>”以及“&lt;code>zoo&lt;/code>”，但不能匹配“&lt;code>z&lt;/code>”。+等价于{1,}。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">?&lt;/td>
&lt;td style="text-align:center">匹配前面的子表达式零次或一次。例如，“&lt;code>do(es)?&lt;/code>”可以匹配“&lt;code>does&lt;/code>”或“&lt;code>does&lt;/code>”中的“&lt;code>do&lt;/code>”。?等价于{0,1}。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">{&lt;em>n&lt;/em>}&lt;/td>
&lt;td style="text-align:center">&lt;em>n&lt;/em>是一个非负整数。匹配确定的&lt;em>n&lt;/em>次。例如，“&lt;code>o{2}&lt;/code>”不能匹配“&lt;code>Bob&lt;/code>”中的“&lt;code>o&lt;/code>”，但是能匹配“&lt;code>food&lt;/code>”中的两个o。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">{&lt;em>n&lt;/em>,}&lt;/td>
&lt;td style="text-align:center">&lt;em>n&lt;/em>是一个非负整数。至少匹配&lt;em>n&lt;/em>次。例如，“&lt;code>o{2,}&lt;/code>”不能匹配“&lt;code>Bob&lt;/code>”中的“&lt;code>o&lt;/code>”，但能匹配“&lt;code>foooood&lt;/code>”中的所有o。“&lt;code>o{1,}&lt;/code>”等价于“&lt;code>o+&lt;/code>”。“&lt;code>o{0,}&lt;/code>”则等价于“&lt;code>o*&lt;/code>”。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">{&lt;em>n&lt;/em>,&lt;em>m&lt;/em>}&lt;/td>
&lt;td style="text-align:center">&lt;em>m&lt;/em>和&lt;em>n&lt;/em>均为非负整数，其中&lt;em>n&lt;/em>&amp;lt;=&lt;em>m&lt;/em>。最少匹配&lt;em>n&lt;/em>次且最多匹配&lt;em>m&lt;/em>次。例如，“&lt;code>o{1,3}&lt;/code>”将匹配“&lt;code>fooooood&lt;/code>”中的前三个o。“&lt;code>o{0,1}&lt;/code>”等价于“&lt;code>o?&lt;/code>”。请注意在逗号和两个数之间不能有空格。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">?&lt;/td>
&lt;td style="text-align:center">当该字符紧跟在任何一个其他限制符（*,+,?，{&lt;em>n&lt;/em>}，{&lt;em>n&lt;/em>,}，{&lt;em>n&lt;/em>,&lt;em>m&lt;/em>}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“&lt;code>oooo&lt;/code>”，“&lt;code>o+?&lt;/code>”将匹配单个“&lt;code>o&lt;/code>”，而“&lt;code>o+&lt;/code>”将匹配所有“&lt;code>o&lt;/code>”。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">.&lt;/td>
&lt;td style="text-align:center">匹配除“&lt;code>\&lt;/code>&lt;em>&lt;code>n&lt;/code>&lt;/em>”之外的任何单个字符。要匹配包括“&lt;code>\&lt;/code>&lt;em>&lt;code>n&lt;/code>&lt;/em>”在内的任何字符，请使用像“`(.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">(pattern)&lt;/td>
&lt;td style="text-align:center">匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“&lt;code>\(&lt;/code>”或“&lt;code>\)&lt;/code>”。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">(?:pattern)&lt;/td>
&lt;td style="text-align:center">匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“`(&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">(?=pattern)&lt;/td>
&lt;td style="text-align:center">正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“`Windows(?=95&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">(?!pattern)&lt;/td>
&lt;td style="text-align:center">正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“`Windows(?!95&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">(?&amp;lt;=pattern)&lt;/td>
&lt;td style="text-align:center">反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“`(?&amp;lt;=95&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">(?&amp;lt;!pattern)&lt;/td>
&lt;td style="text-align:center">反向否定预查，与正向否定预查类拟，只是方向相反。例如“`(?&amp;lt;!95&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">x|y&lt;/td>
&lt;td style="text-align:center">匹配x或y。例如，“`z&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">[xyz]&lt;/td>
&lt;td style="text-align:center">字符集合。匹配所包含的任意一个字符。例如，“&lt;code>[abc]&lt;/code>”可以匹配“&lt;code>plain&lt;/code>”中的“&lt;code>a&lt;/code>”。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">[^xyz]&lt;/td>
&lt;td style="text-align:center">负值字符集合。匹配未包含的任意字符。例如，“&lt;code>[^abc]&lt;/code>”可以匹配“&lt;code>plain&lt;/code>”中的“&lt;code>p&lt;/code>”。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">[a-z]&lt;/td>
&lt;td style="text-align:center">字符范围。匹配指定范围内的任意字符。例如，“&lt;code>[a-z]&lt;/code>”可以匹配“&lt;code>a&lt;/code>”到“&lt;code>z&lt;/code>”范围内的任意小写字母字符。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">[^a-z]&lt;/td>
&lt;td style="text-align:center">负值字符范围。匹配任何不在指定范围内的任意字符。例如，“&lt;code>[^a-z]&lt;/code>”可以匹配任何不在“&lt;code>a&lt;/code>”到“&lt;code>z&lt;/code>”范围内的任意字符。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\b&lt;/td>
&lt;td style="text-align:center">匹配一个单词边界，也就是指单词和空格间的位置。例如，“&lt;code>er\b&lt;/code>”可以匹配“&lt;code>never&lt;/code>”中的“&lt;code>er&lt;/code>”，但不能匹配“&lt;code>verb&lt;/code>”中的“&lt;code>er&lt;/code>”。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\B&lt;/td>
&lt;td style="text-align:center">匹配非单词边界。“&lt;code>er\B&lt;/code>”能匹配“&lt;code>verb&lt;/code>”中的“&lt;code>er&lt;/code>”，但不能匹配“&lt;code>never&lt;/code>”中的“&lt;code>er&lt;/code>”。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\cx&lt;/td>
&lt;td style="text-align:center">匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“&lt;code>c&lt;/code>”字符。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\d&lt;/td>
&lt;td style="text-align:center">匹配一个数字字符。等价于[0-9]。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\D&lt;/td>
&lt;td style="text-align:center">匹配一个非数字字符。等价于[^0-9]。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\f&lt;/td>
&lt;td style="text-align:center">匹配一个换页符。等价于\x0c和\cL。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\n&lt;/td>
&lt;td style="text-align:center">匹配一个换行符。等价于\x0a和\cJ。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\r&lt;/td>
&lt;td style="text-align:center">匹配一个回车符。等价于\x0d和\cM。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\s&lt;/td>
&lt;td style="text-align:center">匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\S&lt;/td>
&lt;td style="text-align:center">匹配任何非空白字符。等价于[^ \f\n\r\t\v]。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\t&lt;/td>
&lt;td style="text-align:center">匹配一个制表符。等价于\x09和\cI。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\v&lt;/td>
&lt;td style="text-align:center">匹配一个垂直制表符。等价于\x0b和\cK。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\w&lt;/td>
&lt;td style="text-align:center">匹配包括下划线的任何单词字符。等价于“&lt;code>[A-Za-z0-9_]&lt;/code>”。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\W&lt;/td>
&lt;td style="text-align:center">匹配任何非单词字符。等价于“&lt;code>[^A-Za-z0-9_]&lt;/code>”。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\x&lt;em>n&lt;/em>&lt;/td>
&lt;td style="text-align:center">匹配&lt;em>n&lt;/em>，其中&lt;em>n&lt;/em>为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“&lt;code>\x41&lt;/code>”匹配“&lt;code>A&lt;/code>”。“&lt;code>\x041&lt;/code>”则等价于“&lt;code>\x04&amp;amp;1&lt;/code>”。正则表达式中可以使用ASCII编码。.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">*num*&lt;/td>
&lt;td style="text-align:center">匹配&lt;em>num&lt;/em>，其中&lt;em>num&lt;/em>是一个正整数。对所获取的匹配的引用。例如，“&lt;code>(.)\1&lt;/code>”匹配两个连续的相同字符。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">*n*&lt;/td>
&lt;td style="text-align:center">标识一个八进制转义值或一个向后引用。如果*n&lt;em>之前至少&lt;/em>n&lt;em>个获取的子表达式，则&lt;/em>n&lt;em>为向后引用。否则，如果&lt;/em>n&lt;em>为八进制数字（0-7），则&lt;/em>n*为一个八进制转义值。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">*nm*&lt;/td>
&lt;td style="text-align:center">标识一个八进制转义值或一个向后引用。如果*nm&lt;em>之前至少有&lt;/em>nm&lt;em>个获得子表达式，则&lt;/em>nm&lt;em>为向后引用。如果*nm&lt;/em>之前至少有&lt;em>n&lt;/em>个获取，则&lt;em>n&lt;/em>为一个后跟文字&lt;em>m&lt;/em>的向后引用。如果前面的条件都不满足，若&lt;em>n&lt;/em>和&lt;em>m&lt;/em>均为八进制数字（0-7），则*nm&lt;em>将匹配八进制转义值&lt;/em>nm*。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">*nml*&lt;/td>
&lt;td style="text-align:center">如果&lt;em>n&lt;/em>为八进制数字（0-3），且&lt;em>m和l&lt;/em>均为八进制数字（0-7），则匹配八进制转义值&lt;em>nm&lt;/em>l。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">\u&lt;em>n&lt;/em>&lt;/td>
&lt;td style="text-align:center">匹配&lt;em>n&lt;/em>，其中&lt;em>n&lt;/em>是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号（©）。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="一校验数字的表达式">一、校验数字的表达式&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">1. 数字：^[0-9]*$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. n位的数字：^\d{n}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. 至少n位的数字：^\d{n,}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. m-n位的数字：^\d{m,n}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5. 零和非零开头的数字：^(0|[1-9][0-9]*)$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6. 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7. 带1-2位小数的正数或负数：^(\-)?\d+(\.\d{1,2})?$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">8. 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">9. 有两位小数的正实数：^[0-9]+(.[0-9]{2})?$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10. 有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">11. 非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\+?[1-9][0-9]*$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">12. 非零的负整数：^\-[1-9][]0-9″*$ 或 ^-[1-9]\d*$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">13. 非负整数：^\d+$ 或 ^[1-9]\d*|0$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">14. 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">15. 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">16. 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">17. 正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">18. 负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">19. 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="二校验字符的表达式">二、校验字符的表达式&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">1. 汉字：^[\u4e00-\u9fa5]{0,}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. 长度为3-20的所有字符：^.{3,20}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. 由26个英文字母组成的字符串：^[A-Za-z]+$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5. 由26个大写英文字母组成的字符串：^[A-Z]+$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6. 由26个小写英文字母组成的字符串：^[a-z]+$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7. 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">8. 由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">9. 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10. 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">11. 可以输入含有^%&lt;span class="ni">&amp;amp;’,;&lt;/span>=?$\”等字符：[^%&lt;span class="ni">&amp;amp;’,;&lt;/span>=?$\x22]+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">12. 禁止输入含有~的字符[^~\x22]+
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="其它">其它：&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">.*匹配除 \n 以外的任何字符。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/[\u4E00-\u9FA5]/ 汉字
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/[\uFF00-\uFFFF]/ 全角符号
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/[\u0000-\u00FF]/ 半角符号
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="三特殊需求表达式">三、特殊需求表达式&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">1. Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&lt;span class="err">&amp;amp;&lt;/span>=]*)?$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5. 电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^(\(\d{3,4}-)|\d{3.4}-)?\d{7,8}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6. 国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7. 身份证号(15位、18位数字)：^\d{15}|\d{18}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">8. 短身份证号码(数字、字母x结尾)：^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">9. 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10. 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">11. 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">12. 日期格式：^\d{4}-\d{1,2}-\d{1,2}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">13. 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">14. 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="钱的输入格式">钱的输入格式：&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">1.有四种钱的表示形式我们可以接受:”10000.00″ 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：^[1-9][0-9]*$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0″不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5.必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：^[0-9]+(.[0-9]{2})?$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>备注：这就是最终结果了,别忘了+可以用*替代,如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">1. xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2. 中文字符的正则表达式：[\u4e00-\u9fa5]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3. 双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4. 空白行的正则表达式：\n\s*\r (可以用来删除空白行)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5. HTML标记的正则表达式：&lt;span class="err">&amp;lt;&lt;/span>(\S*?)[^&amp;gt;]*&amp;gt;.*?&lt;span class="err">&amp;lt;&lt;/span>/\1&amp;gt;|&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">.&lt;/span>&lt;span class="err">*?&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span> (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6. 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">7. 腾讯QQ号：[1-9][0-9]{4,} (腾讯QQ号从10000开始)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">8. 中国邮政编码：[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">9. IP地址：\d+\.\d+\.\d+\.\d+ (提取IP地址时有用)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10. IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">11. IP-v4地址：\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b (提取IP地址时有用)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">12. 校验IP-v6地址:(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">13. 子网掩码：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">14. 校验日期:^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$(“yyyy-mm-dd“ 格式的日期校验，已考虑平闰年。)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">15. 抽取注释：&lt;span class="cp">&amp;lt;!–(.*?)–&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">16. 查找CSS属性:^\\s*[a-zA-Z\\-]+\\s*[:]{1}\\s[a-zA-Z0-9\\s.#]+[;]{1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">17. 提取页面超链接:(&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="err">\\&lt;/span>&lt;span class="na">s&lt;/span>&lt;span class="err">*(?!.*\\&lt;/span>&lt;span class="na">brel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">)[^&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>]*)(href=”https?:\\/\\/)((?!(?:(?:www\\.)?’.implode(‘|(?:www\\.)?’, $follow_list).’))[^” rel=”external nofollow” ]+)”((?!.*\\brel=)[^&amp;gt;]*)(?:[^&amp;gt;]*)&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">18. 提取网页图片:\\&lt;span class="err">&amp;lt;&lt;/span> *[img][^\\\\&amp;gt;]*[src] *= *[\\”\\’]{0,1}([^\\”\\’\\ &amp;gt;]*)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">19. 提取网页颜色代码:^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">20. 文件扩展名效验:^([a-zA-Z]\\:|\\\\)\\\\([^\\\\]+\\\\)*[^\\/:*?”&lt;span class="err">&amp;lt;&lt;/span>&amp;gt;|]+\\.txt(l)?$
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">21. 判断IE版本：^.*MSIE [5-8](?:\\.[0-9]+)?(?!.*Trident\\/[5-9]\\.0).*$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>环境配置和软件</title><link>https://xiaoxiano.github.io/p/config/</link><pubDate>Sun, 18 Jul 2021 00:00:00 +0000</pubDate><guid>https://xiaoxiano.github.io/p/config/</guid><description>&lt;h1 id="部分电脑配置记录">部分电脑配置记录&lt;/h1>
&lt;p>&lt;strong>架构&lt;/strong>
windows-386 ：这些是针对 32 位 Windows 系统编译的
&lt;strong>windows-amd64&lt;/strong> ：这些是针对具有 AMD 或 Intel x86-64 架构的 64 位 Windows 系统编译的
windows-arm64 ：这些是针对具有 ARM 架构的 64 位 Windows 系统编译的&lt;/p>
&lt;h2 id="win10-config">win10 config&lt;/h2>
&lt;ul>
&lt;li>git&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">git config --global http.proxy http://127.0.0.1:[port.http]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global https.proxy https://127.0.0.1:[port.http]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>文件路径：&lt;code>C:\Users\[Username]\.gitconfig&lt;/code>&lt;/p>
&lt;ul>
&lt;li>Terminal（临时使用）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">set http_proxy=http://127.0.0.1:[port.http] #临时命令行代理
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set https_proxy=http://127.0.0.1:[port.http] #临时命令行代理
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="vm-ubuntu-config">VM Ubuntu config&lt;/h2>
&lt;ul>
&lt;li>代理&lt;/li>
&lt;/ul>
&lt;p>Windows中使用&lt;code>ipconfig&lt;/code>查看&lt;code>WLAN 2&lt;/code>的ip地址，ubuntu中进入“设置”-“网络”-“proxy”，在&lt;code>Socks Host&lt;/code>里写入查到的ip地址&lt;/p>
&lt;ul>
&lt;li>git config
默认保存在用户的主目录下的 .gitconfig 文件内&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">git config --global user.name &amp;#34;John Doe&amp;#34; #配置github账号用户名
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global user.email johndoe@example.com #配置邮箱
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>git ssh 代理&lt;/li>
&lt;/ul>
&lt;p>创建~/.ssh/config 文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">Host github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> User git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ProxyCommand nc -v -x ip:port.socks %h %p #写自己ip
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>终端代理（临时使用）&lt;/p>
&lt;ul>
&lt;li>
&lt;p>方法一：直接在命令前加proxychains&lt;/p>
&lt;/li>
&lt;li>
&lt;p>方法二：在.bashrc最后加入：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">export http_proxy=&amp;#34;http://ip:port.http&amp;#34; #写自己ip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">export https_proxy=&amp;#34;http://ip:port.http&amp;#34; #写自己ip
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">source ~/.bashrc #使配置生效
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="vm-ubuntu升级">VM Ubuntu升级&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># 更新
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt upgrade
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo reboot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># 启动 GUI 更新向导
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo update-manager -c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>update错误 N: 无法安全地用该源进行更新，所以默认禁用该源&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">cd /etc/apt/sources.list.d
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo rm -f * # 删除全部软件源
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>W: Failed to fetch &lt;a class="link" href="http://archive.ubuntu.com/" target="_blank" rel="noopener"
>http://archive.ubuntu.com/&lt;/a>&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>备份您的来源列表 &lt;code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>打开&lt;code>/etc/apt/sources.list&lt;/code>粘贴&lt;a class="link" href="https://launchpad.net/ubuntu/&amp;#43;archivemirrors" target="_blank" rel="noopener"
>这里&lt;/a>对应地区和版本的sources.list条目&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl"># DNS 设置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo vim /etc/resolv.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 使用Google DNS作为首选 DNS 服务器
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nameserver 8.8.8.8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nameserver 8.8.4.4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="vm-ubuntu克隆">VM Ubuntu克隆&lt;/h2>
&lt;p>&lt;strong>1. 概念&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>虚拟机克隆
&lt;ul>
&lt;li>完整克隆
是和原始虚拟机完全独立的一个备份，可以脱离原始虚拟机独立使用&lt;/li>
&lt;li>链接克隆
需要和原始虚拟机共享同一虚拟磁盘文件，不能脱离原始虚拟机独立运行&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>虚拟机模板克隆
克隆虚拟机固然是快速部署虚拟机的利器，但是所有的虚拟机都可以克隆，被克隆的虚拟机也可以再次被克隆，长此以往系统就会崩毁，从而给管理员带来诸多的麻烦。模板就是解决此问题的最好的方法，即将一台经常发起克隆的虚拟机做成虚拟机模板，每次需要克隆类似的虚拟机时都通过模板发起&lt;/li>
&lt;li>虚拟快照
快照是针对虚拟机的VMDK文件在某一时间点的&amp;quot;备份&amp;quot;，快照任务启动时，将冻结虚拟机源VMDK文件处于只读状态，同时创建出1个快照文件，今后所有修改的数据都会写入这个快照文件。一旦触发快照恢复操作。系统将放弃文件的内容，回滚到源VMDK文件的状态，实现快照恢复&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>2. 模板克隆过程&lt;/strong>&lt;/p>
&lt;p>关机 -&amp;gt; 创建快照 -&amp;gt; 虚拟机、设置、高级、启用模板模式 -&amp;gt; 右键虚拟机克隆 -&amp;gt; 从快照克隆 -&amp;gt; 完整克隆&lt;/p>
&lt;p>&lt;strong>3. 解决IP相同问题&lt;/strong>&lt;/p>
&lt;p>在虚拟机的网络设置 -&amp;gt; 高级 -&amp;gt; 点击生成新的mac地址&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">cd /etc/netplan
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo gedit 01-network-manager-all.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 添加内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">network:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ethernets:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ens33:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dhcp4: true # 动态ip开启
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dhcp-identifier: mac # 将DHCP获取IP地址的标识改为mac
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> version: 2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 更新配置
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo netplan apply
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ubuntu安装go">Ubuntu安装go&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">sudo apt install snap #安装snap，使用snap更易安装、更新
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">sudo snap install go --classic #安装go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">sudo vim /etc/profile #编辑profile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">export GOROOT=/snap/go #在最后一行添加
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">export PATH=$PATH:$GOROOT/bin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">source /etc/profile #保存
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">go version #验证
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">export GO111MODULE=on
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">export GOPROXY=https://goproxy.cn #设置 go get 为国内源（无代理）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="idea">IDEA&lt;/h1>
&lt;h2 id="使用">使用&lt;/h2>
&lt;p>&lt;a class="link" href="https://www.exception.site/essay/idea-reset-eval" target="_blank" rel="noopener"
>教程1&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.lupf.cn/articles/2023/12/01/1701405135406.html#toc_h2_6" target="_blank" rel="noopener"
>教程2&lt;/a>&lt;/p>
&lt;h2 id="不能输入中文ubuntu">不能输入中文（Ubuntu）&lt;/h2>
&lt;p>在idea.sh注释之后的首行添加&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">export XMODIFIERS=&amp;#34;@im=ibus&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">export GTK_IM_MODULE=&amp;#34;ibus&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">export QT_IM_MODULE=&amp;#34;ibus&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>goland.vmoptions添加&lt;code>-Drecreate.x11.input.method=true&lt;/code>&lt;/p>
&lt;h1 id="win10-系统问题">Win10 系统问题&lt;/h1>
&lt;h2 id="文件夹分类管理">文件夹分类管理&lt;/h2>
&lt;ol>
&lt;li>在要分类的文件夹下新建desktop.txt文件&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">[.ShellClassInfo]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">InfoTip=分类名称
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>另存为desktop.ini，保存类型：所有文件，编码：ANSI&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>生效：文件夹属性 -&amp;gt; 自定义 -&amp;gt; 更改图标 -&amp;gt; 还原默认值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>文件夹查看 -&amp;gt; 分组依据 -&amp;gt; 选择备注&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>修改删除：文件夹查看 -&amp;gt; 选项 -&amp;gt; 查看 -&amp;gt; 取消选中&amp;quot;隐藏受保护的操作系统文件（推荐）&amp;ldquo;可以看到ini文件&lt;/p>
&lt;h2 id="文件删不掉">文件删不掉&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">TASKKILL /IM explorer* /F # 关掉任务栏
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">explorer.exe # 开启任务栏
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="管理员权限">管理员权限&lt;/h2>
&lt;p>方法一： cmd -&amp;gt; 输入 gpedit.msc
&lt;img src="https://xiaoxiano.github.io/p/config/1.jpg"
width="1318"
height="724"
srcset="https://xiaoxiano.github.io/p/config/1_hua24ac506b2f80addf95884de97f54fdf_526049_480x0_resize_q75_box.jpg 480w, https://xiaoxiano.github.io/p/config/1_hua24ac506b2f80addf95884de97f54fdf_526049_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="436px"
>&lt;/p>
&lt;p>方法二： 添加右键超级管理员权限，新建1.reg文件并运行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Windows Registry Editor Version 5.00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[HKEY_CLASSES_ROOT\*\shell\runas]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@=&amp;#34;获取超级管理员所有权限&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;Icon&amp;#34;=&amp;#34;C:\\Windows\\System32\\imageres.dll,101&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;NoWorkingDirectory&amp;#34;=&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[HKEY_CLASSES_ROOT\*\shell\runas\command]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@=&amp;#34;cmd.exe /c takeown /f \&amp;#34;%1\&amp;#34; &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> icacls \&amp;#34;%1\&amp;#34; /grant administrators:F&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;IsolatedCommand&amp;#34;=&amp;#34;cmd.exe /c takeown /f \&amp;#34;%1\&amp;#34; &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> icacls \&amp;#34;%1\&amp;#34; /grant administrators:F&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[HKEY_CLASSES_ROOT\exefile\shell\runas2]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@=&amp;#34;获取超级管理员所有权限&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;Icon&amp;#34;=&amp;#34;C:\\Windows\\System32\\imageres.dll,101&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;NoWorkingDirectory&amp;#34;=&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[HKEY_CLASSES_ROOT\exefile\shell\runas2\command]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@=&amp;#34;cmd.exe /c takeown /f \&amp;#34;%1\&amp;#34; &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> icacls \&amp;#34;%1\&amp;#34; /grant administrators:F&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;IsolatedCommand&amp;#34;=&amp;#34;cmd.exe /c takeown /f \&amp;#34;%1\&amp;#34; &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> icacls \&amp;#34;%1\&amp;#34; /grant administrators:F&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[HKEY_CLASSES_ROOT\Directory\shell\runas]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@=&amp;#34;获取超级管理员所有权限&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;Icon&amp;#34;=&amp;#34;C:\\Windows\\System32\\imageres.dll,101&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;NoWorkingDirectory&amp;#34;=&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[HKEY_CLASSES_ROOT\Directory\shell\runas\command]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@=&amp;#34;cmd.exe /c takeown /f \&amp;#34;%1\&amp;#34; /r /d y &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> icacls \&amp;#34;%1\&amp;#34; /grant administrators:F /t&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;IsolatedCommand&amp;#34;=&amp;#34;cmd.exe /c takeown /f \&amp;#34;%1\&amp;#34; /r /d y &lt;span class="err">&amp;amp;&amp;amp;&lt;/span> icacls \&amp;#34;%1\&amp;#34; /grant administrators:F /t&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="关闭安全通知">关闭安全通知&lt;/h2>
&lt;ol>
&lt;li>关闭Win10防火墙通知&lt;/li>
&lt;/ol>
&lt;p>控制面板 -&amp;gt; 安全与维护 -&amp;gt; 更改用户账户控制设置 -&amp;gt; 从不通知&lt;/p>
&lt;p>搜索&amp;quot;编辑组策略&amp;rdquo; -&amp;gt; 管理模板 -&amp;gt; windows组件 -&amp;gt; windows安全中心 -&amp;gt; 通知 -&amp;gt; 打开隐藏所有通知 -&amp;gt; 已启用&lt;/p>
&lt;ol start="2">
&lt;li>从注册表彻底关闭 Windows安全中心&lt;/li>
&lt;/ol>
&lt;p>win+R输入regedit，定位到HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\SecurityHealthService，找到Start，修改数值数据3为4。&lt;/p>
&lt;ol start="3">
&lt;li>关闭&amp;quot;打开文件-安全警告&amp;quot;弹框&lt;/li>
&lt;/ol>
&lt;p>控制面板-&amp;gt; internet选项 -&amp;gt; 安全 -&amp;gt; 自定义级别 -&amp;gt; 启用(不安全)&lt;/p>
&lt;h2 id="win10-资源管理器无限重启闪屏">Win10 资源管理器无限重启闪屏&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>安全模式开机&lt;/p>
&lt;p>长按开机键3次，选择【疑难解答】-【高级选项】-【启动设置】- 【重启】，在启动设置内，
按 4 或 F4 就可以进入安全模式了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>更换本地账户、新建本地账户。&lt;/p>
&lt;p>开机后&lt;strong>右键windows图标&lt;/strong>点击 powershell（管理员）&lt;/p>
&lt;p>在命令提示符(管理员)中复制粘贴输入以下指令：&lt;/p>
&lt;p>&lt;code>net user User ****** /add&lt;/code> (User是新建账户，******是新建的随机密码)　　&lt;/p>
&lt;p>&lt;code>net localgroup administrators User /add&lt;/code> (赋予该账号管理员权限)&lt;/p>
&lt;p>重启后按电源键息屏，再开启后可以切换到User账户，进去后一切正常，表示故障原因不在硬件和系统方面，肯定是第三方软件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>新建文本粘贴以下代码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">Windows Registry Editor Version 5.00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps\explorer.exe]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;DumpFolder&amp;#34;=hex(2):43,00,3a,00,5c,00,43,00,72,00,61,00,73,00,68,00,44,00,75,\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">00,6d,00,70,00,73,00,00,00
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>重命名为1.reg，运行后会在C盘建立CrashDumps文件夹（路径C:\CrashDumps），当系统闪屏后里面有后缀.dmp文件，把这个文件拖到Visual Studio里打开，可以排查相关的第三方软件的路径，挨个卸载。我放在vs里显示我IDM下载程序缺少二进制文件，卸载后完美进入系统。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h1 id="自用软件">自用软件&lt;/h1>
&lt;h2 id="win10优雅必备">win10优雅必备&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Wallpaper Engine　　　　　　# 壁纸，steam购买&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Everything + uTools　　　　# 文件快捷搜索及工具&lt;/p>
&lt;/li>
&lt;li>
&lt;p>quicker　　　　　　　　　　 # 鼠标便捷操作神器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>DeskGo　　　　　　　　　　# 腾讯出品的桌面软件格子&lt;/p>
&lt;/li>
&lt;li>
&lt;p>IDM　　　　　　　　　　　　　# 下载&lt;/p>
&lt;ul>
&lt;li>PowerShell：&lt;code>irm https://massgrave.dev/ias | iex&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Geek Uninstaller　　　　　　# 卸载无残留&lt;/p>
&lt;/li>
&lt;li>
&lt;p>clover　　　　　　　　　　　# 资源管理器多标签页&lt;/p>
&lt;/li>
&lt;li>
&lt;p>火绒　　　　　　　　　　　　# 屏蔽弹窗&lt;/p>
&lt;/li>
&lt;li>
&lt;p>win10 microsoft store工具&lt;/p>
&lt;ul>
&lt;li>Windows Terminal　　　　　#命令行&lt;/li>
&lt;li>TranslucentTB　　　　　　　#任务栏透明&lt;/li>
&lt;li>EarTrumpet　　　　　　　　#音频管理&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>开发者实用工具&lt;/p>
&lt;ul>
&lt;li>typora　　　　　　　　　　　# markdown记事本&lt;/li>
&lt;li>joplin　　　　　　　　　　　# markdown多端同步&lt;/li>
&lt;li>sourcetree　　　　　　　　　# Git 界面&lt;/li>
&lt;li>DBeaver　　　　　　　　　　　# 连接数据库&lt;/li>
&lt;li>Postman　　　　　　　　　　　# 接口测试&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>素材工具&lt;/p>
&lt;ul>
&lt;li>GIMP　　　　　　　　　　　　# 图像处理
&lt;ul>
&lt;li>例：转换pdf，文件-&amp;gt;打开，导入分辨率填300,文件-&amp;gt;导出&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Pr　　　　　　　　　　　　　# 视频剪辑&lt;/li>
&lt;li>Ae　　　　　　　　　　　　　# 动画特效&lt;/li>
&lt;li>Ps　　　　　　　　　　　　　# 图片处理&lt;/li>
&lt;li>Ai　　　　　　　　　　　　　# 插图&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="安卓app">安卓app&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>浏览器：Chrome、Edge&lt;/p>
&lt;/li>
&lt;li>
&lt;p>影视：&lt;/p>
&lt;ul>
&lt;li>论坛：haopanyou.net（已失效）&lt;/li>
&lt;li>App：tg破解软件中文频道，搜#影视&lt;/li>
&lt;li>网盘搜索：pan.qianfan.app&lt;/li>
&lt;li>VLC　　　　　　　　# 局域网视频播放器&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>椒盐音乐　　　　　　　# 本地音乐播放器&lt;/p>
&lt;ul>
&lt;li>音乐标签　　　　　　　# 歌词&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>小说：&lt;/p>
&lt;ul>
&lt;li>阅读　　　　　　　　　# 酷安评论区可以找书源&lt;/li>
&lt;li>笔趣阁&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>阅读：ReadEra、福昕PDF阅读器&lt;/p>
&lt;/li>
&lt;li>
&lt;p>去除启动广告：跳过广告&lt;/p>
&lt;/li>
&lt;li>
&lt;p>动态壁纸：星空视频壁纸&lt;/p>
&lt;/li>
&lt;li>
&lt;p>手机控制&lt;/p>
&lt;ul>
&lt;li>tasker、hamibot　　　# 手机自动化&lt;/li>
&lt;li>Moonlight　　　　　　　　# 局域网投屏&lt;/li>
&lt;li>AirDroid和AirMirror　　　　# 手机远程控制手机&lt;/li>
&lt;li>向日葵远程控制&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>文件管理&lt;/p>
&lt;ul>
&lt;li>zarchiver　　　　　　　　# 文件管理和解压&lt;/li>
&lt;li>猫头鹰文件　　　　　　　　# 访问局域网文件&lt;/li>
&lt;li>APK Extractor　　　　　　　# 提取apk&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item></channel></rss>